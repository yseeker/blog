<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>キャッシュ on YS&#39;s blog</title>
    <link>https://www.yusaito.com/blog/tags/%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5/</link>
    <description>Recent content in キャッシュ on YS&#39;s blog</description>
    <image>
      <url>https://www.yusaito.com/blog/papermod-cover.png</url>
      <link>https://www.yusaito.com/blog/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 15 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.yusaito.com/blog/tags/%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>joblibの使い方</title>
      <link>https://www.yusaito.com/blog/posts/tech/python/how-to-use-joblib/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/tech/python/how-to-use-joblib/</guid>
      <description>joblib には主な機能として、1) 時間がかかる処理のキャッシュ化, 2)並列処理, 3)圧縮書き出しと読み込み、がある。
joblib のインストール pip install joblib joblib の主な機能 時間がかかる処理のキャッシュ化 (Memory) 途中で止まってしまったら困る数分とか数時間とかかかる処理のキャッシュをとっておきたいときに使う。
from joblib import Memory cachedir = &amp;#39;cache_dir&amp;#39; mem = Memory(cachedir) square = mem.cache(heavy_task_func) b = do_time_consuming_func(a) ###　並列処理 (Parallel, delayed)
デフォルトはマルチプロセスだが、マルチスレッドも選択可能。
マルチプロセス（デフォルト） from joblib import Parallel, delayed Parallel(n_jobs=-1)(delayed(task_func)(param) for param in iterator) マルチスレッド Parallel(n_jobs=-1, backend=&amp;#39;threading&amp;#39;)(delayed(task_func)(param) for param in iterator) オブジェクトの圧縮書き出し（永続化）と読み込み（dump, load） 書き出し（永続化） joblib.dump(object,file_path,compress=3) 読み込み object = joblib.load(file_path) 参考  </description>
    </item>
    
  </channel>
</rss>
