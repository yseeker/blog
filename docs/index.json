[{"content":"NGC 提供の Pytorch イメージを使って docker コンテナを立ち上げる。 NVIDIA NGC | CATALOGから NGC(NVIDIA GPU CLOUD)が提供している、Pytorch の docker イメージをとりあえずdocker runをしてみる。\ndocker run --gpus all -it --rm nvcr.io/nvidia/pytorch:21.12-py3 /bin/bash すると、下記のような NOTE が一番下に現れたので調べてみた。\nNOTE: The SHMEM allocation limit is set to the default of 64MB. This may be insufficient for PyTorch. NVIDIA recommends the use of the following flags: docker run --gpus all --ipc=host --ulimit memlock=-1 --ulimit stack=67108864 ... The SHMEM allocation limit is set to the default of 64MB 一時ファイル領域の/dev/shm のサイズでデフォルト値は 64GB。--shm-size 2g みたいにしておけばよい。\n\u0026ndash;ipc=host コンテナとホスト間でメモリ共有するためにつけるらしい。自分の場合は普段使わなそう。\n\u0026ndash;ulimit memlock=-1 占有可能なメモリスペースを無限にする。\n\u0026ndash;ulimit stack=67108864 スタック領域サイズの上限いっぱいまであげる。\n参考  ","permalink":"https://www.yusaito.com/blog/posts/tech/linux/docker-nvcr-pytorch-ipc-host-ulimit-memlock/","summary":"NGC 提供の Pytorch イメージを使って docker コンテナを立ち上げる。 NVIDIA NGC | CATALOGから NGC(NVIDIA GPU CLOUD)が提供している、Pytorch の docker イメージをとりあえずdocker runをしてみる。\ndocker run --gpus all -it --rm nvcr.io/nvidia/pytorch:21.12-py3 /bin/bash すると、下記のような NOTE が一番下に現れたので調べてみた。\nNOTE: The SHMEM allocation limit is set to the default of 64MB. This may be insufficient for PyTorch. NVIDIA recommends the use of the following flags: docker run --gpus all --ipc=host --ulimit memlock=-1 --ulimit stack=67108864 ... The SHMEM allocation limit is set to the default of 64MB 一時ファイル領域の/dev/shm のサイズでデフォルト値は 64GB。--shm-size 2g みたいにしておけばよい。","title":"nvcr.io/nvidia/pytorchのイメージからdockerコンテナを作成したときのNOTE"},{"content":"問題：Pandas で csv を読むと謎の Unnamed:0 というコラムが出現 解決策 その１ : pd.read_csv で index_col = 0 を指定 df = pd.read_csv(\u0026#39;test.csv\u0026#39;, index_col=0) その２ : そもそも保存するときに index を消す df = pd.to_csv(\u0026#39;test.csv\u0026#39;, index = False) pandas の中身 ちなみに Unnamed:0 はこの辺りで追加されているらしい。\n# ref. https://github.com/pandas-dev/pandas/blob/ad190575aa75962d2d0eade2de81a5fe5a2e285b/pandas/tests/io/parser/test_mangle_dupes.py#L120-L140 @skip_pyarrow def test_mangled_unnamed_placeholders(all_parsers): # xref gh-13017 orig_key = \u0026#34;0\u0026#34; parser = all_parsers orig_value = [1, 2, 3] df = DataFrame({orig_key: orig_value}) # This test recursively updates `df`. for i in range(3): expected = DataFrame() for j in range(i + 1): col_name = \u0026#34;Unnamed: 0\u0026#34; + f\u0026#34;.{1*j}\u0026#34; * min(j, 1) expected.insert(loc=0, column=col_name, value=[0, 1, 2]) expected[orig_key] = orig_value df = parser.read_csv(StringIO(df.to_csv())) tm.assert_frame_equal(df, expected) 参考 read_csv で Unnamed: 0 が追加された場合の対処法\" src=\"https://hatenablog-parts.com/embed?url=https://qiita.com/wariichi/items/988b16dc4941ccbe7af2\" frameborder=\"0\" scrolling=\"no\" ","permalink":"https://www.yusaito.com/blog/posts/tech/python/pandas-read-csv-unnamed-name/","summary":"問題：Pandas で csv を読むと謎の Unnamed:0 というコラムが出現 解決策 その１ : pd.read_csv で index_col = 0 を指定 df = pd.read_csv(\u0026#39;test.csv\u0026#39;, index_col=0) その２ : そもそも保存するときに index を消す df = pd.to_csv(\u0026#39;test.csv\u0026#39;, index = False) pandas の中身 ちなみに Unnamed:0 はこの辺りで追加されているらしい。\n# ref. https://github.com/pandas-dev/pandas/blob/ad190575aa75962d2d0eade2de81a5fe5a2e285b/pandas/tests/io/parser/test_mangle_dupes.py#L120-L140 @skip_pyarrow def test_mangled_unnamed_placeholders(all_parsers): # xref gh-13017 orig_key = \u0026#34;0\u0026#34; parser = all_parsers orig_value = [1, 2, 3] df = DataFrame({orig_key: orig_value}) # This test recursively updates `df`. for i in range(3): expected = DataFrame() for j in range(i + 1): col_name = \u0026#34;Unnamed: 0\u0026#34; + f\u0026#34;.","title":"Pandasでread_csvしたときに出現するUnnamed:0を消す方法"},{"content":"ハッシュ値を求める import hashlib file_name = \u0026#34;important_file.dat\u0026#34; # MD5 ハッシュを生成する hs = hashlib.md5(file_name.encode()).hexdigest() # SHA224 ハッシュを生成する hs = hashlib.sha224(file_name.encode()).hexdigest() 自走プログラマー~Python の先輩が教えるプロジェクト開発のベストプラクティス 120の中でファイル名からハッシュ値を求め、そのハッシュ値の頭 3 文字を中間ディレクトリにして、１つのディレクトリにファイルを集中させないという手法が紹介されていた。\n例 file_name = \u0026#34;important_file.dat\u0026#34; hs = hashlib.md5(file_name.encode()).hexdigest() file_path = f\u0026#34;dir_name/{hs[:3]}/{file_name}\u0026#34; 参考  ","permalink":"https://www.yusaito.com/blog/posts/tech/python/how-to-use-hashlib/","summary":"ハッシュ値を求める import hashlib file_name = \u0026#34;important_file.dat\u0026#34; # MD5 ハッシュを生成する hs = hashlib.md5(file_name.encode()).hexdigest() # SHA224 ハッシュを生成する hs = hashlib.sha224(file_name.encode()).hexdigest() 自走プログラマー~Python の先輩が教えるプロジェクト開発のベストプラクティス 120の中でファイル名からハッシュ値を求め、そのハッシュ値の頭 3 文字を中間ディレクトリにして、１つのディレクトリにファイルを集中させないという手法が紹介されていた。\n例 file_name = \u0026#34;important_file.dat\u0026#34; hs = hashlib.md5(file_name.encode()).hexdigest() file_path = f\u0026#34;dir_name/{hs[:3]}/{file_name}\u0026#34; 参考  ","title":"Python : hashlibを使って、ハッシュ値を求める"},{"content":"Python では joblib や concurrent.futures などで簡単にマルチプロセスできるが、\u0026ldquo;MultiProcessing Is Really Easy\u0026quot;という名の MPIRE というライブラリを見つけたので備忘録として残しておく。この記事によると、特定の場合では joblib や concurrent.futures よりも性能が良いらしい。\nMPIRE のインストール pip install mpire MPIRE の使い方 from mpire import WorkerPool def time_consuming_function(param): return None with WorkerPool(n_jobs=8) as pool: results = pool.map_unordered(time_consuming_function, interator, progress_bar=True) 参考  ","permalink":"https://www.yusaito.com/blog/posts/tech/python/how-to-use-mpire-multiprocess/","summary":"Python では joblib や concurrent.futures などで簡単にマルチプロセスできるが、\u0026ldquo;MultiProcessing Is Really Easy\u0026quot;という名の MPIRE というライブラリを見つけたので備忘録として残しておく。この記事によると、特定の場合では joblib や concurrent.futures よりも性能が良いらしい。\nMPIRE のインストール pip install mpire MPIRE の使い方 from mpire import WorkerPool def time_consuming_function(param): return None with WorkerPool(n_jobs=8) as pool: results = pool.map_unordered(time_consuming_function, interator, progress_bar=True) 参考  ","title":"Pythonで並列処理 : MPIREの使い方"},{"content":"openCV でマルチプロセス化しようとしてもシングルプロセスになっている問題に遭遇 Python で openCV を使った処理をマルチプロセス化してみたのだが、どうもシングルプロセスになってしまうという問題に遭遇した。\n解決策：cv2.setNumThreads(0)＆マルチプロセスをやめる。 cv2.setNumThreads(0) を加えて、かつマルチスレッド化（例えば、concurrent.future.ThreadPoolExecuterなど）することで効率的に並列処理可能になることが分かった。 cv2.setNumThreads(0)有りでもconcurrent.future.ProcessPoolExecuterでは、正しくマルチプロセスされなかった。\n以下テンプレート。\nimport cv2 from concurrent.futures import ThreadPoolExecutor cv2.setNumThreads(0) def task_using_cv2(param): do_some_process_using_cv2() return with ThreadPoolExecutor() as executor: results = list(executor.map(task_using_cv2, param)) 参考   ","permalink":"https://www.yusaito.com/blog/posts/tech/python/opencv-setnumthreads-multithreading/","summary":"openCV でマルチプロセス化しようとしてもシングルプロセスになっている問題に遭遇 Python で openCV を使った処理をマルチプロセス化してみたのだが、どうもシングルプロセスになってしまうという問題に遭遇した。\n解決策：cv2.setNumThreads(0)＆マルチプロセスをやめる。 cv2.setNumThreads(0) を加えて、かつマルチスレッド化（例えば、concurrent.future.ThreadPoolExecuterなど）することで効率的に並列処理可能になることが分かった。 cv2.setNumThreads(0)有りでもconcurrent.future.ProcessPoolExecuterでは、正しくマルチプロセスされなかった。\n以下テンプレート。\nimport cv2 from concurrent.futures import ThreadPoolExecutor cv2.setNumThreads(0) def task_using_cv2(param): do_some_process_using_cv2() return with ThreadPoolExecutor() as executor: results = list(executor.map(task_using_cv2, param)) 参考   ","title":"PythonとopenCVで並列化"},{"content":"自己紹介 東京大学大学院の岩佐研究室にて電界誘起 2 次元超伝導の研究を行い、2018 年 3 月に博士（工学）を取得。その後理化学研究所 AIP分子情報科学チームを経て、カリフォルニア大学サンタバーバラ校のAndrea Young グループで日本人初のElings Prize Fellowとして、twisted 2 層グラフェンの超伝導・電子相関・トポロジカル物性の研究に取り組む。現在はデータグリッドのシニアエンジニアとして機械学習関連プロジェクトに従事。研究内容の詳細はこちら\nUCSB ポスドク時代はこのような実験をやっていました。\nリンク  LinkedIn GitHub Google Scholar Kaggle  略歴  2006 年 4 月 - 2009 年 3 月 福島県立安積高等学校 普通科 2009 年 4 月 - 2013 年 3 月 東京大学 理科 I 類 → 工学部 物理工学科 2013 年 4 月 - 2018 年 3 月 東京大学 大学院工学系研究科 物理工学専攻 博士（工学） 2018 年 4 月 - 2018 年 9 月 理化学研究所 革新知能統合研究センター 特別研究員 2018 年 4 月 - 2020 年 9 月 カリフォルニア大学サンタバーバラ校 Elings Prize Fellow 2021 年 10 月 - 現在まで 株式会社データグリッド シニアエンジニア  主な研究成果 その他の研究成果はこちら\n Isospin Pomeranchuk 効果の発見（Y. Saito et al. Nature (2021)） ホフスタッターバンド由来の強磁性的 Chern 絶縁体の発見（Y. Saito et al. Nature Physics (2021)） twisted 2 層グラフェンの超伝導とハーフフィリング絶縁体の独立した振る舞いを発見（Y. Saito et al. Nature Physics (2020)） 高結晶 2 次元超伝導の量子磁束相図の確立（Y. Saito et al. Nature Communications (2018)） 面内磁場に強固な 2 次元超伝導（イジング超伝導）の発見（Y. Saito et al. Nature Physics (2016)） 電界誘起 2 次元超伝導体における量子金属状態の発見（Y. Saito et al. Science (2015)）  (1-3 はカリフォルニア大学サンタバーバラ校でのポスドク時代の成果、4-6 は東京大学での大学院生時代の成果)\n主な受賞  第 13 回 日本物理学会若手奨励賞(領域 6) （日本物理学会） 第 37 回 井上研究奨励賞 （井上科学振興財団 ） 第 8 回 日本学術振興会 育志賞（日本学術振興会） Elings Prize Fellowship in Science 2018（カリフォルニア大学サンタバーバラ校） 平成 29 年度 工学系研究科長賞（東京大学）  スキル プロジェクトレベル  ナノデバイスの作製と超低温測定の技術 (原子間力顕微鏡, 電子ビーム描画装置, 電子ビーム蒸着機, 希釈冷凍機など) 実験系固体物理、特に量子物質（超伝導体、グラフェンなど）全般に関する知見 LabRAD を用いた同時ハードウェア制御 深層生成モデルの開発と改良（特にデジタルヒューマンと創薬領域） FastAPI などを用いた ML バックエンド開発（主に非同期処理、並列化処理による高速化に注力） Kaggle におけるデータ分析 R\u0026amp;D 全般のプロジェクトマネジメント  言語、ツール、ライブラリなど  言語 : Python(Advanced, 3+years), C/C++(basic), Go(basic), shell script (basic) Backend Framework: FastAPI, Flask Hardware control : LabRAD Pipeline : Gokart, Luigi, MLflow Cloud: Azure, GCP Tools: Git, Docker  趣味・特技   時々を写真をとってます（iphone か Pentax k-30）。うまくとれた写真は500pxで公開してます。\n  5 年ぶりにKaggleを再開しました。\n  卓球と将棋は学生時代に部活/サークルでやっていたので少しできます。\n  海外ドラマ（たまに洋画）をよく見ています。 印象に残っている海外ドラマは「デスパレートな妻たち」「フラッシュ」「Good Place」「クイーンズ・ギャンビット」「運命の大統領」「Community（コミカレ）」「インセプション」「マネー・ショート」など。\n  ","permalink":"https://www.yusaito.com/blog/about/","summary":"自己紹介 東京大学大学院の岩佐研究室にて電界誘起 2 次元超伝導の研究を行い、2018 年 3 月に博士（工学）を取得。その後理化学研究所 AIP分子情報科学チームを経て、カリフォルニア大学サンタバーバラ校のAndrea Young グループで日本人初のElings Prize Fellowとして、twisted 2 層グラフェンの超伝導・電子相関・トポロジカル物性の研究に取り組む。現在はデータグリッドのシニアエンジニアとして機械学習関連プロジェクトに従事。研究内容の詳細はこちら\nUCSB ポスドク時代はこのような実験をやっていました。\nリンク  LinkedIn GitHub Google Scholar Kaggle  略歴  2006 年 4 月 - 2009 年 3 月 福島県立安積高等学校 普通科 2009 年 4 月 - 2013 年 3 月 東京大学 理科 I 類 → 工学部 物理工学科 2013 年 4 月 - 2018 年 3 月 東京大学 大学院工学系研究科 物理工学専攻 博士（工学） 2018 年 4 月 - 2018 年 9 月 理化学研究所 革新知能統合研究センター 特別研究員 2018 年 4 月 - 2020 年 9 月 カリフォルニア大学サンタバーバラ校 Elings Prize Fellow 2021 年 10 月 - 現在まで 株式会社データグリッド シニアエンジニア  主な研究成果 その他の研究成果はこちら","title":"About Me"},{"content":"joblib には主な機能として、1) 時間がかかる処理のキャッシュ化, 2)並列処理, 3)圧縮書き出しと読み込み、がある。\njoblib のインストール pip install joblib joblib の主な機能 時間がかかる処理のキャッシュ化 (Memory) 途中で止まってしまったら困る数分とか数時間とかかかる処理のキャッシュをとっておきたいときに使う。\nfrom joblib import Memory cachedir = \u0026#39;cache_dir\u0026#39; mem = Memory(cachedir) square = mem.cache(heavy_task_func) b = do_time_consuming_func(a) 並列処理 (Parallel, delayed) デフォルトはマルチプロセスだが、マルチスレッドも選択可能。\nマルチプロセス（デフォルト） from joblib import Parallel, delayed Parallel(n_jobs=-1)(delayed(task_func)(param) for param in iterator) マルチスレッド Parallel(n_jobs=-1, backend=\u0026#39;threading\u0026#39;)(delayed(task_func)(param) for param in iterator) オブジェクトの圧縮書き出し（永続化）と読み込み（dump, load） 書き出し（永続化） joblib.dump(object,file_path,compress=3) 読み込み object = joblib.load(file_path) 参考  ","permalink":"https://www.yusaito.com/blog/posts/tech/python/how-to-use-joblib/","summary":"joblib には主な機能として、1) 時間がかかる処理のキャッシュ化, 2)並列処理, 3)圧縮書き出しと読み込み、がある。\njoblib のインストール pip install joblib joblib の主な機能 時間がかかる処理のキャッシュ化 (Memory) 途中で止まってしまったら困る数分とか数時間とかかかる処理のキャッシュをとっておきたいときに使う。\nfrom joblib import Memory cachedir = \u0026#39;cache_dir\u0026#39; mem = Memory(cachedir) square = mem.cache(heavy_task_func) b = do_time_consuming_func(a) 並列処理 (Parallel, delayed) デフォルトはマルチプロセスだが、マルチスレッドも選択可能。\nマルチプロセス（デフォルト） from joblib import Parallel, delayed Parallel(n_jobs=-1)(delayed(task_func)(param) for param in iterator) マルチスレッド Parallel(n_jobs=-1, backend=\u0026#39;threading\u0026#39;)(delayed(task_func)(param) for param in iterator) オブジェクトの圧縮書き出し（永続化）と読み込み（dump, load） 書き出し（永続化） joblib.dump(object,file_path,compress=3) 読み込み object = joblib.load(file_path) 参考  ","title":"joblibの使い方"},{"content":"Ubuntu 20.04 LTS の導入 こちらの記事に従って、Ubuntu 20.04 LTS を入れた。\nライブ USB の作成  Rufus をダウンロード ubuntu の iso ファイルをダウンロード USB を挿して、Rufus を使ってライブ USB を作成  Ubuntu 20.04 LTS のインストール  細かい設定はこちらの記事を参照  インストール後にログインループになってログインできなくなった  ctrl + alt + F2で tty 仮想コンソールを開く Nvidia ドライバ, cuda があるかどうか確認  dpkg -l | grep nvidia dpkg -l | grep cuda ※もしですでにある場合は削除しておく\nsudo apt-get --purge remove nvidia-* sudo apt-get --purge remove cuda-*  Nvidia ドライバが無かったら下記で Nvidia ドライバと cuda を入れる  sudo ubuntu-drivers install sudo reboot または version 指定して入れる。\nsudo apt-get install cuda-drivers-\u0026lt;branch\u0026gt; 以上のプロセスでログインできるようになった。またこのときに cuda も一緒に入った。（nvidia-smiで確認）\nログインループに陥らなかった場合は別途自分で nvidia ドライバと cuda を入れる必要がある。\n一旦きれいににしてから nvidia-driver を入れる\nsudo apt-get --purge remove nvidia-* sudo apt-get --purge remove cuda-* sudo ubuntu-drivers install sudo reboot nvidia-smiで確認して、必要であれば cuda を公式のやり方に従って入れる。\nwget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin sudo mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600 wget https://developer.download.nvidia.com/compute/cuda/11.6.1/local_installers/cuda-repo-ubuntu2004-11-6-local_11.6.1-510.47.03-1_amd64.deb sudo dpkg -i cuda-repo-ubuntu2004-11-6-local_11.6.1-510.47.03-1_amd64.deb sudo apt-key add /var/cuda-repo-ubuntu2004-11-6-local/7fa2af80.pub sudo apt-get update sudo apt-get -y install cuda CPU 情報などを確認 cpu lscpu cat /proc/meminfo sudo dmidecode -t baseboard gpu nvidia -smi sudo parted -l 言語を直しておく https://tech.librastudio.co.jp/entry/index.php/2017/12/20/post-1756/\ndocker 導入 docker のインストール # https://docs.docker.com/engine/install/ubuntu/ curl -fsSL https://get.docker.com -o get-docker.sh DRY_RUN=1 sh ./get-docker.sh docker が自動起動するようにしておく sudo systemctl start docker \u0026amp;\u0026amp; sudo systemctl enable docker sudo 無しで docker を使えるようにする sudo groupadd docker sudo usermod -aG docker \u0026lt;username\u0026gt; newgrp docker ssh 導入 ssh サーバーのインストール sudo apt install openssh-server パスワードでログイン可能にしておく\nsudo vi /etc/ssh/sshd_config PasswordAuthentication yes ssh を再起動する\nsudo systemctl restart sshd.service 鍵を生成して転送  クライアント側で鍵を生成  ssh-keygen -t ed25519 -C \u0026#34;username@servername\u0026#34;  ローカル IP を調べる  hostname -I  鍵をサーバーに転送  scp ~/.ssh/my_key.pub ホスト名@\u0026lt;ローカルIP\u0026gt;:  公開鍵を authorized key に移動  cat my_key.pub \u0026gt;\u0026gt; .ssh/authorized_keys rm id_ras.pub sudo chmod 700 -R /home/user /home/user/.ssh sudo chmod 600 /home/user/.ssh/authorized_keys セキュリティを上げておく sudo vi /etc/ssh/sshd_config PasswordAuthentication no #パスワードログインを許可しない Port 56666　#ポートを変えておく sudo systemctl restart sshd.service ssh 接続できない場合はクライアント側の ssh config を設定する\nvi /home/user/.ssh/config Host remote-host HostName XXX.XX.XX.XX Port XXXXX IdentityFile ~/.ssh/my_key User user ※ホームの permission がおかしいと ssh アクセスできないので、アクセスできない場合は変更しておく。\nsudo chown root:root /home sudo chmod -R 755 /home sudo chown user:user /home/user -R sudo chmod 700 -R /home/user /home/user/.ssh sudo chmod 600 /home/user/.ssh/authorized_keys リモート VScode の設定 Extention の　Remote Developmentをインストールしておく。 リモート VSCode でファイルの生成や削除で permission エラーが出るのでよく使うフォルダ or ワークスペースにのみ権限を与えておく sudo chmod -R 777 ./workspace\n閲覧可能なファイル数の上限を最大にする cat /proc/sys/fs/inotify/max_user_watches vi /etc/sysctl.conf # add \u0026#34;fs.inotify.max_user_watches=524288\u0026#34; at the end sudo sysctl -p リンターとフォーマッター  extention で Python をインストール black mypy isort flake8 をインストール  pip3 install black mypy isort flake8 USER と ssh サーバーで下記を設定\n Python › Formatting: Provider -\u0026gt; black Python › Linting: Mypy Enabled -\u0026gt; check Editor: Format On Save -\u0026gt; check Editor: Code Actions On Save -\u0026gt; setting json  下記の箇所を\n\u0026#34;editor.codeActionsOnSave\u0026#34;: null 下記に変更する\n\u0026#34;editor.codeActionsOnSave\u0026#34;: { \u0026#34;source.organizeImports\u0026#34;: true } その他有用な extention  Error Lense : setting から delay を 500 にしておく pylance : インタプリタを適切なものに設定しておく。 indent rainbow blacket pair : いろいろある paste image  ","permalink":"https://www.yusaito.com/blog/posts/tech/linux/ubuntu-server-ssh-docker-setup/","summary":"Ubuntu 20.04 LTS の導入 こちらの記事に従って、Ubuntu 20.04 LTS を入れた。\nライブ USB の作成  Rufus をダウンロード ubuntu の iso ファイルをダウンロード USB を挿して、Rufus を使ってライブ USB を作成  Ubuntu 20.04 LTS のインストール  細かい設定はこちらの記事を参照  インストール後にログインループになってログインできなくなった  ctrl + alt + F2で tty 仮想コンソールを開く Nvidia ドライバ, cuda があるかどうか確認  dpkg -l | grep nvidia dpkg -l | grep cuda ※もしですでにある場合は削除しておく\nsudo apt-get --purge remove nvidia-* sudo apt-get --purge remove cuda-*  Nvidia ドライバが無かったら下記で Nvidia ドライバと cuda を入れる  sudo ubuntu-drivers install sudo reboot または version 指定して入れる。","title":"Ubuntu 20.04 LTSセットアップ（自宅サーバー用）とリモート環境用の諸々の初期設定（docker + cuda + ssh + vscode）"},{"content":"この web サイトは PaperMod というテンプレートから作成しているのが、シンタックスハイライトをいい感じにする Prism.js を導入したらPageSpeed Insightsのパフォーマンスが悪くなったので改善メモ。\nJavascript の読み込み時に defer を導入 Before モバイルでのパフォーマンスは、40-50 くらいだった。\n\u0026lt;script src=\u0026#34;{{ .Site.BaseURL }}/js/prism.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; After モバイルでのパフォーマンスが、65-75 くらいに改善した。\n\u0026lt;script type=\u0026#34;text/javascript\u0026#34; defer src=\u0026#34;{{ .Site.BaseURL }}/js/prism.js\u0026#34; \u0026gt;\u0026lt;/script\u0026gt; 余談 ちなみに PaperMod はデフォルトでパフォーマンスが90-99くらい出る超高速なテンプレートである。（Prism.js の読み込みで大幅に速度が低下した。）\n上の javascript の読み込み部分をコメントアウトするとパフォーマンスは 90 以上まで戻る（笑）\n参考  ","permalink":"https://www.yusaito.com/blog/posts/tech/other/hugo-papermod-prism-pagespeed-web-dev/","summary":"この web サイトは PaperMod というテンプレートから作成しているのが、シンタックスハイライトをいい感じにする Prism.js を導入したらPageSpeed Insightsのパフォーマンスが悪くなったので改善メモ。\nJavascript の読み込み時に defer を導入 Before モバイルでのパフォーマンスは、40-50 くらいだった。\n\u0026lt;script src=\u0026#34;{{ .Site.BaseURL }}/js/prism.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; After モバイルでのパフォーマンスが、65-75 くらいに改善した。\n\u0026lt;script type=\u0026#34;text/javascript\u0026#34; defer src=\u0026#34;{{ .Site.BaseURL }}/js/prism.js\u0026#34; \u0026gt;\u0026lt;/script\u0026gt; 余談 ちなみに PaperMod はデフォルトでパフォーマンスが90-99くらい出る超高速なテンプレートである。（Prism.js の読み込みで大幅に速度が低下した。）\n上の javascript の読み込み部分をコメントアウトするとパフォーマンスは 90 以上まで戻る（笑）\n参考  ","title":"Hugo : PaperModのテーマでjavascriptを非同期で読み込んで高速化"},{"content":"numpy でベンチマーク # ファイル名: numpy_benchmark.py import os os.environ[\u0026#34;OPENBLAS_NUM_THREADS\u0026#34;] = \u0026#34;32\u0026#34; # import mkl # mkl.set_num_threads(32) import numpy as np import time from threadpoolctl import threadpool_info from pprint import pp pp(threadpool_info()) np.show_config() N_LOOP = 5 calc_eigh_time_list = [] calc_inv_time_list = [] calc_dot_time_list = [] calc_norm_time_list = [] for size in [5000, 10000, 20000]: print(f\u0026#34;size : {size}\u0026#34;) for i in range(3): np.random.seed(i) X = np.random.randn(size, size) t_start = time.time() np.linalg.eigh(X @ X.T) calc_eigh_time_list.append(time.time() - t_start) t_start = time.time() np.linalg.inv(X) calc_inv_time_list.append(time.time() - t_start) t_start = time.time() np.dot(X,X) calc_dot_time_list.append(time.time() - t_start) t_start = time.time() np.linalg.norm(X @ X) calc_norm_time_list.append(time.time() - t_start) calc_eigh_time_ndarr = np.array(calc_eigh_time_list) calc_inv_time_ndarr = np.array(calc_inv_time_list) calc_dot_time_ndarr = np.array(calc_dot_time_list) calc_norm_time_ndarr = np.array(calc_norm_time_list) print(f\u0026#34;np.linalg.eigh : {np.average(calc_eigh_time_ndarr):.4f}s\u0026#34;) print(f\u0026#34;np.linalg.inv : {np.average(calc_inv_time_ndarr):.4f}s\u0026#34;) print(f\u0026#34;np.dot : {np.average(calc_dot_time_ndarr):.4f}s\u0026#34;) print(f\u0026#34;np.linalg.norm : {np.average(calc_norm_time_ndarr):.4f}s\u0026#34;) Intel MKL の場合（スレッド数：32） docker run --init --rm --shm-size 8g -v $PWD:/work -w /work continuumio/anaconda3 python numpy_benchmark.py [{\u0026#39;filepath\u0026#39;: \u0026#39;/opt/conda/lib/libmkl_rt.so.1\u0026#39;, \u0026#39;prefix\u0026#39;: \u0026#39;libmkl_rt\u0026#39;, \u0026#39;user_api\u0026#39;: \u0026#39;blas\u0026#39;, \u0026#39;internal_api\u0026#39;: \u0026#39;mkl\u0026#39;, \u0026#39;version\u0026#39;: \u0026#39;2021.4-Product\u0026#39;, \u0026#39;num_threads\u0026#39;: 32, \u0026#39;threading_layer\u0026#39;: \u0026#39;intel\u0026#39;}, {\u0026#39;filepath\u0026#39;: \u0026#39;/opt/conda/lib/libiomp5.so\u0026#39;, \u0026#39;prefix\u0026#39;: \u0026#39;libiomp\u0026#39;, \u0026#39;user_api\u0026#39;: \u0026#39;openmp\u0026#39;, \u0026#39;internal_api\u0026#39;: \u0026#39;openmp\u0026#39;, \u0026#39;version\u0026#39;: None, \u0026#39;num_threads\u0026#39;: 64}] blas_mkl_info: libraries = [\u0026#39;mkl_rt\u0026#39;, \u0026#39;pthread\u0026#39;] library_dirs = [\u0026#39;/opt/conda/lib\u0026#39;] define_macros = [(\u0026#39;SCIPY_MKL_H\u0026#39;, None), (\u0026#39;HAVE_CBLAS\u0026#39;, None)] include_dirs = [\u0026#39;/opt/conda/include\u0026#39;] blas_opt_info: libraries = [\u0026#39;mkl_rt\u0026#39;, \u0026#39;pthread\u0026#39;] library_dirs = [\u0026#39;/opt/conda/lib\u0026#39;] define_macros = [(\u0026#39;SCIPY_MKL_H\u0026#39;, None), (\u0026#39;HAVE_CBLAS\u0026#39;, None)] include_dirs = [\u0026#39;/opt/conda/include\u0026#39;] lapack_mkl_info: libraries = [\u0026#39;mkl_rt\u0026#39;, \u0026#39;pthread\u0026#39;] library_dirs = [\u0026#39;/opt/conda/lib\u0026#39;] define_macros = [(\u0026#39;SCIPY_MKL_H\u0026#39;, None), (\u0026#39;HAVE_CBLAS\u0026#39;, None)] include_dirs = [\u0026#39;/opt/conda/include\u0026#39;] lapack_opt_info: libraries = [\u0026#39;mkl_rt\u0026#39;, \u0026#39;pthread\u0026#39;] library_dirs = [\u0026#39;/opt/conda/lib\u0026#39;] define_macros = [(\u0026#39;SCIPY_MKL_H\u0026#39;, None), (\u0026#39;HAVE_CBLAS\u0026#39;, None)] include_dirs = [\u0026#39;/opt/conda/include\u0026#39;] size : 5000 np.linalg.eigh : 4.2719 s np.linalg.inv : 0.6087 s np.dot : 0.4056 s np.linalg.norm : 0.3880 s size : 10000 np.linalg.eigh : 14.3513 s np.linalg.inv : 2.1228 s np.dot : 1.6021 s np.linalg.norm : 1.5480 s size : 20000 np.linalg.eigh : 61.9019 s np.linalg.inv : 10.3558 s np.dot : 7.9529 s np.linalg.norm : 7.7727 s OpenBLAS の場合（スレッド数：32） 普段良く使うベースイメージを元にしたコンテナでテスト\ndocker run --init --rm --shm-size 8g -v $PWD:/work -w /work nvcr.io/nvidia/pytorch:21.11-py3 python numpy_benchmark.py [{\u0026#39;user_api\u0026#39;: \u0026#39;blas\u0026#39;, \u0026#39;internal_api\u0026#39;: \u0026#39;openblas\u0026#39;, \u0026#39;prefix\u0026#39;: \u0026#39;libopenblas\u0026#39;, \u0026#39;filepath\u0026#39;: \u0026#39;/opt/conda/lib/libopenblasp-r0.3.18.so\u0026#39;, \u0026#39;version\u0026#39;: \u0026#39;0.3.18\u0026#39;, \u0026#39;threading_layer\u0026#39;: \u0026#39;pthreads\u0026#39;, \u0026#39;architecture\u0026#39;: \u0026#39;Zen\u0026#39;, \u0026#39;num_threads\u0026#39;: 32}] blas_info: libraries = [\u0026#39;cblas\u0026#39;, \u0026#39;blas\u0026#39;, \u0026#39;cblas\u0026#39;, \u0026#39;blas\u0026#39;] library_dirs = [\u0026#39;/opt/conda/lib\u0026#39;] include_dirs = [\u0026#39;/opt/conda/include\u0026#39;] language = c define_macros = [(\u0026#39;HAVE_CBLAS\u0026#39;, None)] blas_opt_info: define_macros = [(\u0026#39;NO_ATLAS_INFO\u0026#39;, 1), (\u0026#39;HAVE_CBLAS\u0026#39;, None)] libraries = [\u0026#39;cblas\u0026#39;, \u0026#39;blas\u0026#39;, \u0026#39;cblas\u0026#39;, \u0026#39;blas\u0026#39;] library_dirs = [\u0026#39;/opt/conda/lib\u0026#39;] include_dirs = [\u0026#39;/opt/conda/include\u0026#39;] language = c lapack_info: libraries = [\u0026#39;lapack\u0026#39;, \u0026#39;blas\u0026#39;, \u0026#39;lapack\u0026#39;, \u0026#39;blas\u0026#39;] library_dirs = [\u0026#39;/opt/conda/lib\u0026#39;] language = f77 lapack_opt_info: libraries = [\u0026#39;lapack\u0026#39;, \u0026#39;blas\u0026#39;, \u0026#39;lapack\u0026#39;, \u0026#39;blas\u0026#39;, \u0026#39;cblas\u0026#39;, \u0026#39;blas\u0026#39;, \u0026#39;cblas\u0026#39;, \u0026#39;blas\u0026#39;] library_dirs = [\u0026#39;/opt/conda/lib\u0026#39;] language = c define_macros = [(\u0026#39;NO_ATLAS_INFO\u0026#39;, 1), (\u0026#39;HAVE_CBLAS\u0026#39;, None)] include_dirs = [\u0026#39;/opt/conda/include\u0026#39;] Supported SIMD extensions in this NumPy install: baseline = SSE,SSE2,SSE3 found = SSSE3,SSE41,POPCNT,SSE42,AVX,F16C,FMA3,AVX2 not found = AVX512F,AVX512CD,AVX512_KNL,AVX512_KNM,AVX512_SKX,AVX512_CLX,AVX512_CNL,AVX512_ICL size : 5000 np.linalg.eigh : 4.6165 s np.linalg.inv : 0.8397 s np.dot : 0.3431 s np.linalg.norm : 0.3570 s size : 10000 np.linalg.eigh : 26.7373 s np.linalg.inv : 2.5276 s np.dot : 1.1968 s np.linalg.norm : 1.2321 s size : 20000 np.linalg.eigh : 138.9376 s np.linalg.inv : 10.5088 s np.dot : 6.3217 s np.linalg.norm : 6.0329 s cupy でベンチマーク import os #os.environ[\u0026#34;MKL_NUM_THREADS\u0026#34;] = 64 #os.environ[\u0026#34;OPENBLAS_NUM_THREADS\u0026#34;] = \u0026#34;64\u0026#34; # import mkl # mkl.set_num_threads(32) import numpy as np import cupy as cp import time from threadpoolctl import threadpool_info from pprint import pp # pp(threadpool_info()) # np.show_config() N_LOOP = 5 calc_eigh_time_list = [] calc_inv_time_list = [] calc_dot_time_list = [] calc_norm_time_list = [] for size in [5000, 10000, 20000]: print(f\u0026#34;size : {size}\u0026#34;) for i in range(3): cp.random.seed(i) X = cp.random.randn(size, size) cp.cuda.Stream.null.synchronize() t_start = time.time() cp.linalg.eigh(X @ X.T) cp.cuda.Stream.null.synchronize() calc_eigh_time_list.append(time.time() - t_start) t_start = time.time() cp.linalg.inv(X) cp.cuda.Stream.null.synchronize() calc_inv_time_list.append(time.time() - t_start) t_start = time.time() cp.dot(X,X) cp.cuda.Stream.null.synchronize() calc_dot_time_list.append(time.time() - t_start) t_start = time.time() cp.linalg.norm(X @ X) cp.cuda.Stream.null.synchronize() calc_norm_time_list.append(time.time() - t_start) calc_eigh_time_ndarr = cp.array(calc_eigh_time_list) calc_inv_time_ndarr = cp.array(calc_inv_time_list) calc_dot_time_ndarr = cp.array(calc_dot_time_list) calc_norm_time_ndarr = cp.array(calc_norm_time_list) print(f\u0026#34;cp.linalg.eigh : {cp.average(calc_eigh_time_ndarr):.4f}s\u0026#34;) print(f\u0026#34;cp.linalg.inv : {cp.average(calc_inv_time_ndarr):.4f}s\u0026#34;) print(f\u0026#34;cp.dot : {cp.average(calc_dot_time_ndarr):.4f}s\u0026#34;) print(f\u0026#34;cp.linalg.norm : {cp.average(calc_norm_time_ndarr):.4f}s\u0026#34;) docker run --init --rm --shm-size 8g --gpus all -v $PWD:/work -w /work nvcr.io/nvidia/pytorch:21.11-py3 python cupy_benchmark.py size : 5000 cp.linalg.eigh : 2.1541 s cp.linalg.inv : 0.8055 s cp.dot : 0.4646 s cp.linalg.norm : 0.5734 s size : 10000 cp.linalg.eigh : 7.4867 s cp.linalg.inv : 2.9686 s cp.dot : 2.0489 s cp.linalg.norm : 2.1329 s size : 20000 cp.linalg.eigh : 37.9862 s cp.linalg.inv : 15.2210 s cp.dot : 11.0195 s cp.linalg.norm : 11.1704 s 結果（size = 20000 の場合）    TH numpy (Intel MKL) numpy (OpenBLAS) cupy     dot 7.9529 sec 6.3217 sec 11.0195 sec   linalg.inv 10.3558 sec 10.5088 sec 15.2210 sec   linalg.norm 7.7727 sec 6.0329 sec 11.1704 sec   linalg.eigh 61.9019 sec 138.9376 sec 37.9862 sec     この４つの評価項目だと linalig.eigh （固有値計算） 以外は numpy (OpenBLAS)で良くて、固有値 は cupy で計算すれば良さそう。行列のサイズがもっと大きくなれば結果が変わるかもしれない。\n（一概に CPU と GPU の比較といっても CPU 側ではスレッド数と BLAS でだいぶ結果が変わるので単純に比較はできなさそう。）\n雑な結論：サイズが 20000 までの行列なら Ryzen Threadripper 3970X ＆ numpy でだいたい OK。\n（ま、とは言っても普段行列計算しないんですけどね。）\n","permalink":"https://www.yusaito.com/blog/posts/tech/python/numpy-benchmark-ryzen-threadripper/","summary":"numpy でベンチマーク # ファイル名: numpy_benchmark.py import os os.environ[\u0026#34;OPENBLAS_NUM_THREADS\u0026#34;] = \u0026#34;32\u0026#34; # import mkl # mkl.set_num_threads(32) import numpy as np import time from threadpoolctl import threadpool_info from pprint import pp pp(threadpool_info()) np.show_config() N_LOOP = 5 calc_eigh_time_list = [] calc_inv_time_list = [] calc_dot_time_list = [] calc_norm_time_list = [] for size in [5000, 10000, 20000]: print(f\u0026#34;size : {size}\u0026#34;) for i in range(3): np.random.seed(i) X = np.random.randn(size, size) t_start = time.time() np.linalg.eigh(X @ X.T) calc_eigh_time_list.","title":"Ryzen Threadripper 3970XとNVIDIA RTX 3090を使ってnumpy(Intel MKL and OpenBLAS)とcupyでベンチマーク"},{"content":"functools.partial は、関数の特定の引数を固定したい場合に使う 個人的に concurrent.futures の ProcessPoolExecuter や ThreadPoolExecuter の map を使うときに併用することが多い。\nfunctools.partial の定義 # ref. https://docs.python.org/ja/3/library/functools.html#functools.partial def partial(func, /, *args, **keywords): def newfunc(*fargs, **fkeywords): newkeywords = {**keywords, **fkeywords} return func(*args, *fargs, **newkeywords) newfunc.func = func newfunc.args = args newfunc.keywords = keywords return newfunc 使い方：引数を固定する from functools import partial def product_xyz(x, y, z): return x * y * z # xとyの値を固定する product_z = partial(product_xyz, x=2, y=3) product_z(4) # 24 参考  ","permalink":"https://www.yusaito.com/blog/posts/tech/python/how-to-use-functools-partial/","summary":"functools.partial は、関数の特定の引数を固定したい場合に使う 個人的に concurrent.futures の ProcessPoolExecuter や ThreadPoolExecuter の map を使うときに併用することが多い。\nfunctools.partial の定義 # ref. https://docs.python.org/ja/3/library/functools.html#functools.partial def partial(func, /, *args, **keywords): def newfunc(*fargs, **fkeywords): newkeywords = {**keywords, **fkeywords} return func(*args, *fargs, **newkeywords) newfunc.func = func newfunc.args = args newfunc.keywords = keywords return newfunc 使い方：引数を固定する from functools import partial def product_xyz(x, y, z): return x * y * z # xとyの値を固定する product_z = partial(product_xyz, x=2, y=3) product_z(4) # 24 参考  ","title":"Python : functools.partial 関数の引数を一部固定"},{"content":"openCV を使って画像リストから動画を作成する。 画像リストがあったときにそこから動画を生成するときに使う。\nfrom pathlib import Path from typing import List import cv2 def list_file_paths(dir_path: str) -\u0026gt; List[str]: \u0026#34;\u0026#34;\u0026#34; List file paths in a directory. Parameters ---------- dir_path : str Path of the directory Returns ------- List[str] List of the file paths in the directory \u0026#34;\u0026#34;\u0026#34; return sorted([str(path) for path in Path(dir_path).rglob(\u0026#34;*\u0026#34;) if path.is_file()]) def create_mp4_video_from_image_path_list( output_video_path: str, image_path_list: List[str], fps: int, ) -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34; Create mp4 video file from a image path list Parameters ---------- output_video_path : str Path of the output video image_path_list : List[str] Path of image file list fps : int fps (frames per second) \u0026#34;\u0026#34;\u0026#34; height, width, _ = cv2.imread(image_path_list[0]).shape writer = cv2.VideoWriter( output_video_path, cv2.VideoWriter_fourcc(\u0026#34;m\u0026#34;, \u0026#34;p\u0026#34;, \u0026#34;4\u0026#34;, \u0026#34;v\u0026#34;), fps, (width, height), True, ) for image_file_path in image_path_list: writer.write(cv2.imread(image_file_path)) writer.release() cv2.destroyAllWindows() file_list = list_file_paths(\u0026#34;images\u0026#34;) create_mp4_video_from_image_path_list(\u0026#34;output.mp4\u0026#34;, file_list, 30) ","permalink":"https://www.yusaito.com/blog/posts/tech/python/create-video-from-images-opencv/","summary":"openCV を使って画像リストから動画を作成する。 画像リストがあったときにそこから動画を生成するときに使う。\nfrom pathlib import Path from typing import List import cv2 def list_file_paths(dir_path: str) -\u0026gt; List[str]: \u0026#34;\u0026#34;\u0026#34; List file paths in a directory. Parameters ---------- dir_path : str Path of the directory Returns ------- List[str] List of the file paths in the directory \u0026#34;\u0026#34;\u0026#34; return sorted([str(path) for path in Path(dir_path).rglob(\u0026#34;*\u0026#34;) if path.is_file()]) def create_mp4_video_from_image_path_list( output_video_path: str, image_path_list: List[str], fps: int, ) -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34; Create mp4 video file from a image path list Parameters ---------- output_video_path : str Path of the output video image_path_list : List[str] Path of image file list fps : int fps (frames per second) \u0026#34;\u0026#34;\u0026#34; height, width, _ = cv2.","title":"PythonとOpenCVで画像リストから動画を作成"},{"content":"自走プログラマー~Python の先輩が教えるプロジェクト開発のベストプラクティス 120を読んだのでその中で気になった「ファイルパスはプログラムからの相対パスで組み立てるという箇所は実践的でとても勉強になったのでメモしておく。\n├──　run.py ├──　data ├── input.txt └── images みたいなディレクトリがある場合は\nimport csv from pathlib import Path current_dir = Path(__file__).parent image_path = current_dir / \u0026#34;data\u0026#34; / \u0026#34;images\u0026#34; inuput_path = current_dir / \u0026#34;input.txt\u0026#34; とすればよい。\n","permalink":"https://www.yusaito.com/blog/posts/tech/python/relative-path-with-pathlib/","summary":"自走プログラマー~Python の先輩が教えるプロジェクト開発のベストプラクティス 120を読んだのでその中で気になった「ファイルパスはプログラムからの相対パスで組み立てるという箇所は実践的でとても勉強になったのでメモしておく。\n├──　run.py ├──　data ├── input.txt └── images みたいなディレクトリがある場合は\nimport csv from pathlib import Path current_dir = Path(__file__).parent image_path = current_dir / \u0026#34;data\u0026#34; / \u0026#34;images\u0026#34; inuput_path = current_dir / \u0026#34;input.txt\u0026#34; とすればよい。","title":"Pathlibで相対パスを有効活用する"},{"content":"問題 : tqdm を標準出力している状態でターミナルの横幅を狭めるとバグる 解決策 : dynamic_ncols=True にする 下記のように tqdm を定義すればよい（参考）\nfrom functools import partial from tqdm import tqdm as std_tqdm tqdm = partial(std_tqdm, dynamic_ncols=True) 参考  ","permalink":"https://www.yusaito.com/blog/posts/tech/python/tqdm-dynamic-ncols/","summary":"問題 : tqdm を標準出力している状態でターミナルの横幅を狭めるとバグる 解決策 : dynamic_ncols=True にする 下記のように tqdm を定義すればよい（参考）\nfrom functools import partial from tqdm import tqdm as std_tqdm tqdm = partial(std_tqdm, dynamic_ncols=True) 参考  ","title":"tqdmでターミナルの横幅を狭めるとバグる問題を解消する"},{"content":"logger と print と tqdm を併用する場合は以下のコードをコピペする。\nimport contextlib import logging import logging.handlers import sys from time import sleep from tqdm import tqdm from tqdm.contrib import DummyTqdmFile class TqdmLoggingHandler(logging.Handler): colors = {\u0026#34;INFO\u0026#34;: \u0026#34;\\033[37m{}\\033[0m\u0026#34;} def __init__(self, level=logging.NOTSET): super().__init__(level) def emit(self, record): try: record.msg = TqdmLoggingHandler.colors.get(record.levelname, \u0026#34;{}\u0026#34;).format( record.msg ) msg = self.format(record) tqdm.write(msg, file=sys.stderr) self.flush() except Exception: self.handleError(record) class CustomFormatter(logging.Formatter): grey = \u0026#34;\\x1b[38;20m\u0026#34; green = \u0026#34;\\x1b[32;20m\u0026#34; yellow = \u0026#34;\\x1b[33;20m\u0026#34; red = \u0026#34;\\x1b[31;20m\u0026#34; bold_red = \u0026#34;\\x1b[31;1m\u0026#34; reset = \u0026#34;\\x1b[0m\u0026#34; format = \u0026#34;[%(asctime)s] [%(levelname)s] [%(process)d] [%(name)s] [%(funcName)s] [%(lineno)d] %(message)s\u0026#34; FORMATS = { logging.DEBUG: grey + format + reset, logging.INFO: green + format + reset, logging.WARNING: yellow + format + reset, logging.ERROR: red + format + reset, logging.CRITICAL: bold_red + format + reset, } def format(self, record): log_fmt = self.FORMATS.get(record.levelno) formatter = logging.Formatter(log_fmt) return formatter.format(record) def setup_logger(name, logfile=\u0026#34;log.log\u0026#34;): logger = logging.getLogger(name) logger.setLevel(logging.DEBUG) # create file handler which logs even DEBUG messages fh = logging.handlers.RotatingFileHandler( logfile, maxBytes=100000000, backupCount=10 ) fh.setLevel(logging.DEBUG) fh_formatter = logging.Formatter( \u0026#34;[%(asctime)s] [%(levelname)s] [%(process)d] [%(name)s] [%(funcName)s] [%(lineno)d] %(message)s\u0026#34; ) fh.setFormatter(fh_formatter) # create console handler with a INFO log level ch = TqdmLoggingHandler() ch.setLevel(logging.INFO) ch.setFormatter(CustomFormatter()) # add the handlers to the logger logger.addHandler(fh) logger.addHandler(ch) return logger logger = setup_logger(__name__) @contextlib.contextmanager def std_out_err_redirect_tqdm(): orig_out_err = sys.stdout, sys.stderr try: sys.stdout, sys.stderr = map(DummyTqdmFile, orig_out_err) yield orig_out_err[0] # Relay exceptions except Exception as exc: raise exc # Always restore sys.stdout/err if necessary finally: sys.stdout, sys.stderr = orig_out_err def some_fun(i): logger.info(\u0026#34;Fee, fi, fo,\u0026#34;.split()[2]) print(\u0026#34;Fee, fi, fo,\u0026#34;.split()[2]) # Redirect stdout to tqdm.write() (don\u0026#39;t forget the `as save_stdout`) with std_out_err_redirect_tqdm() as orig_stdout: # tqdm needs the original stdout # and dynamic_ncols=True to autodetect console width for i in tqdm(range(3), file=orig_stdout, dynamic_ncols=True): sleep(0.5) some_fun(i) # After the `with`, printing is restored print(\u0026#34;Done!\u0026#34;) 参考  https://github.com/tqdm/tqdm#redirecting-writing https://qiita.com/mino-38/items/f09251d18fe3181bfbfd https://waregawa-log.hatenablog.com/entry/2020/01/01/100000 https://stackoverflow.com/questions/384076/how-can-i-color-python-logging-output  ","permalink":"https://www.yusaito.com/blog/posts/tech/python/tqdm-logging-print/","summary":"logger と print と tqdm を併用する場合は以下のコードをコピペする。\nimport contextlib import logging import logging.handlers import sys from time import sleep from tqdm import tqdm from tqdm.contrib import DummyTqdmFile class TqdmLoggingHandler(logging.Handler): colors = {\u0026#34;INFO\u0026#34;: \u0026#34;\\033[37m{}\\033[0m\u0026#34;} def __init__(self, level=logging.NOTSET): super().__init__(level) def emit(self, record): try: record.msg = TqdmLoggingHandler.colors.get(record.levelname, \u0026#34;{}\u0026#34;).format( record.msg ) msg = self.format(record) tqdm.write(msg, file=sys.stderr) self.flush() except Exception: self.handleError(record) class CustomFormatter(logging.Formatter): grey = \u0026#34;\\x1b[38;20m\u0026#34; green = \u0026#34;\\x1b[32;20m\u0026#34; yellow = \u0026#34;\\x1b[33;20m\u0026#34; red = \u0026#34;\\x1b[31;20m\u0026#34; bold_red = \u0026#34;\\x1b[31;1m\u0026#34; reset = \u0026#34;\\x1b[0m\u0026#34; format = \u0026#34;[%(asctime)s] [%(levelname)s] [%(process)d] [%(name)s] [%(funcName)s] [%(lineno)d] %(message)s\u0026#34; FORMATS = { logging.","title":"loggerとprintとtqdmの併用"},{"content":"ファイルのリストを受け取って何らかの並列処理をする。 from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor from functools import partial from pathlib import Path from typing import List def list_file_paths(dir_path: str) -\u0026gt; List[str]: \u0026#34;\u0026#34;\u0026#34; List file paths in a directory. Parameters ---------- dir_path : str Path of the directory Returns ------- List[str] List of the file paths in the directory \u0026#34;\u0026#34;\u0026#34; return sorted([str(path) for path in Path(dir_path).rglob(\u0026#34;*\u0026#34;) if path.is_file()]) def task(same_value, same_value2, diffent_values): return None def multiprocess_task(task, same_value, same_value2, diffent_values): with ProcessPoolExecutor() as executor: results = list(executor.map( partial(task, same_value, same_value2), different_values )) def multithreading_task(task, same_value, same_value2, diffent_values): with ThreadPoolExecutor() as executor: results = list(executor.map( partial(task, same_value, same_value2), different_values )) def joblib_multiprocess_task(task : function, same_value, same_value2, diffent_values): results = joblib.Parallel(n_jobs=-1)( joblib.delayed(partial(task, same_value, same_value2))(different_value) for different_value in different_values) ","permalink":"https://www.yusaito.com/blog/posts/tech/python/multiprocess-multithreading-utils/","summary":"ファイルのリストを受け取って何らかの並列処理をする。 from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor from functools import partial from pathlib import Path from typing import List def list_file_paths(dir_path: str) -\u0026gt; List[str]: \u0026#34;\u0026#34;\u0026#34; List file paths in a directory. Parameters ---------- dir_path : str Path of the directory Returns ------- List[str] List of the file paths in the directory \u0026#34;\u0026#34;\u0026#34; return sorted([str(path) for path in Path(dir_path).rglob(\u0026#34;*\u0026#34;) if path.is_file()]) def task(same_value, same_value2, diffent_values): return None def multiprocess_task(task, same_value, same_value2, diffent_values): with ProcessPoolExecutor() as executor: results = list(executor.","title":"Pythonでファイルリストからの並列処理"},{"content":"jpg から png への一括変換 (マルチプロセス) from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor from functools import partial from pathlib import Path from typing import List from PIL import Image, ImageFile ImageFile.LOAD_TRUNCATED_IMAGES = True def list_file_paths(dir_path: str) -\u0026gt; List[str]: \u0026#34;\u0026#34;\u0026#34; List file paths in a directory. Parameters ---------- dir_path : str Path of the directory Returns ------- List[str] List of the file paths in the directory \u0026#34;\u0026#34;\u0026#34; return sorted([str(path) for path in Path(dir_path).rglob(\u0026#34;*\u0026#34;) if path.is_file()]) def jpg2png(file_path): img = Image.open(file_path) img.save(f\u0026#34;{file_path[:-4]}.png\u0026#34;) def multiprocess_jpg2png(jpg2png, file_path_list): with ProcessPoolExecutor() as executor: results = list(executor.map( jpg2png, file_path_list )) file_path_list = list_file_paths(\u0026#34;./image_file_dir\u0026#34;) multiprocess_jpg2png(jpg2png, file_path_list) ","permalink":"https://www.yusaito.com/blog/posts/tech/python/image-convert-jpg-png-multiprocess/","summary":"jpg から png への一括変換 (マルチプロセス) from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor from functools import partial from pathlib import Path from typing import List from PIL import Image, ImageFile ImageFile.LOAD_TRUNCATED_IMAGES = True def list_file_paths(dir_path: str) -\u0026gt; List[str]: \u0026#34;\u0026#34;\u0026#34; List file paths in a directory. Parameters ---------- dir_path : str Path of the directory Returns ------- List[str] List of the file paths in the directory \u0026#34;\u0026#34;\u0026#34; return sorted([str(path) for path in Path(dir_path).rglob(\u0026#34;*\u0026#34;) if path.","title":"Pythonでjpgからpngへ一括変換"},{"content":"今までパス操作は、組み込みのosとglob, pathlibが便利そうだったので調べてみる。\n基本操作 ファイル名取得 ディレクトリ名取得 from pathlib import Path path = Path(\u0026#34;./dir/filename.txt\u0026#34;)  ファイル名を取得 : path.name ファイル名拡張子抜き : path.stem ファイルの拡張子のみ : path.suffix ファイルのディレクトリを取得 : path.parents (list) パス連結 : / 演算子を使う（path.joinpath()） パスの存在確認：path.exists() ファイルかどうか確認 : path.is_file() ディレクトリかどうか確認 : path.is_dir() ディレクトリの作成 : path.mkdir(exist_ok=True, parents=True) ディレクトリの削除 : path.rmdir() ファイル/ディレクトリパス変更 : path.replace(tgt) ファイル/ディレクトリパス変更（末尾のみ）: path.rename(new_file_apth) 同じ階層に別名ファイルを作成 : path.with_name('file_new.txt').touch() 同じ階層に別拡張子ファイルを作成 : path.with_suffix('png').touch() 同じ階層のファイルとディレクトリ一覧を返す：path.iterdir() ファイルの存在ディレクトリのパスを取得：Path(__file__).parent  個人的によく使うモジュール ファイルを再帰的に探索  Pathlib の場合  # Pathlibの場合 from pathlib import Path from typing import List def list_file_paths(dir_path: str) -\u0026gt; List[str]: \u0026#34;\u0026#34;\u0026#34; List file paths in a directory. Parameters ---------- dir_path : str Path for the directory Returns ------- List[str] List of the file paths in the directory \u0026#34;\u0026#34;\u0026#34; return sorted([str(path) for path in Path(dir_path).rglob(\u0026#34;*\u0026#34;) if path.is_file()])  os + glob の場合  # os + globの場合 import os import glob from typing import List def list_file_paths(dir_path: str) -\u0026gt; List[str]: \u0026#34;\u0026#34;\u0026#34; List file paths in a directory. Parameters ---------- dir_path : str Path for the directory Returns ------- List[str] List of the file paths in the directory \u0026#34;\u0026#34;\u0026#34; return sorted( [ path for path in glob.glob(os.path.join(dir_path, \u0026#34;**\u0026#34;), recursive=True) if os.path.isfile(path) ] ) ファイル名の一括変換 def add_suffix_to_all_file_paths(dir_path: str) -\u0026gt; List[str]: \u0026#34;\u0026#34;\u0026#34; Add suffix to all the file name Parameters ---------- dir_path : str Path for the directory Returns ------- List[str] List of the file paths in the directory \u0026#34;\u0026#34;\u0026#34; return sorted( [ str( path.rename( str(path.parent / Path(path.stem + \u0026#34;_suffix\u0026#34; + path.suffix)) ) ) for path in Path(dir_path).rglob(\u0026#34;*\u0026#34;) if path.is_file() ] ) ","permalink":"https://www.yusaito.com/blog/posts/tech/python/how-to-use-pathlib/","summary":"今までパス操作は、組み込みのosとglob, pathlibが便利そうだったので調べてみる。\n基本操作 ファイル名取得 ディレクトリ名取得 from pathlib import Path path = Path(\u0026#34;./dir/filename.txt\u0026#34;)  ファイル名を取得 : path.name ファイル名拡張子抜き : path.stem ファイルの拡張子のみ : path.suffix ファイルのディレクトリを取得 : path.parents (list) パス連結 : / 演算子を使う（path.joinpath()） パスの存在確認：path.exists() ファイルかどうか確認 : path.is_file() ディレクトリかどうか確認 : path.is_dir() ディレクトリの作成 : path.mkdir(exist_ok=True, parents=True) ディレクトリの削除 : path.rmdir() ファイル/ディレクトリパス変更 : path.replace(tgt) ファイル/ディレクトリパス変更（末尾のみ）: path.rename(new_file_apth) 同じ階層に別名ファイルを作成 : path.with_name('file_new.txt').touch() 同じ階層に別拡張子ファイルを作成 : path.with_suffix('png').touch() 同じ階層のファイルとディレクトリ一覧を返す：path.iterdir() ファイルの存在ディレクトリのパスを取得：Path(__file__).parent  個人的によく使うモジュール ファイルを再帰的に探索  Pathlib の場合  # Pathlibの場合 from pathlib import Path from typing import List def list_file_paths(dir_path: str) -\u0026gt; List[str]: \u0026#34;\u0026#34;\u0026#34; List file paths in a directory.","title":"Pathlibの使い方"},{"content":"Azure の web で VM インスタンスを作成 VM インスタンスの作成はこちら 秘密鍵をダウンロードして、read 権限を与えていおく。\ncp ~/Downloads/your_key_name.pem ~/.ssh/keys/azure_vm_key.pem chmod 400 ~/.ssh/keys/azure_vm_key.pem ssh を使って VM にアクセス\nssh -i ~/.ssh/keys/azure_vm_key.pem azureuser@\u0026lt;public ip address of VM instance\u0026gt; Cuda をインストール wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin sudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600 wget https://developer.download.nvidia.com/compute/cuda/11.5.0/local_installers/cuda-repo-ubuntu1804-11-5-local_11.5.0-495.29.05-1_amd64.deb sudo dpkg -i cuda-repo-ubuntu1804-11-5-local_11.5.0-495.29.05-1_amd64.deb sudo apt-key add /var/cuda-repo-ubuntu1804-11-5-local/7fa2af80.pub sudo apt-get update sudo apt-get -y install cuda Data Center GPU manager のインストール（A100x8 の場合） bandwidthTest を行う 詳細は、こちらを参照。 A100x8 ではここでエラーが出る、V100x4 では出ない\ngit clone https://github.com/NVIDIA/cuda-samples.git cd cuda-samples/Samples/bandwidthTest make ./bandwidthTest エラー：CUDA error at bandwidthTest.cu:256 code=802(cudaErrorSystemNotReady) \u0026ldquo;cudaSetDevice(currentDevice)\u0026rdquo; cudaGetDeviceProperties returned 802 -\u0026gt; system not yet initialized CUDA error at bandwidthTest.cu:256 code=802(cudaErrorSystemNotReady) \u0026#34;cudaSetDevice(currentDevice)\u0026#34; it means that the Data Center GPU manager is not installed. What you want to do is to install the nvidia DCGM, fetch the repository keys: Data Center GPU manager のインストール wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin sudo mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600 sudo apt-key adv --keyserver-options http-proxy=http://proxy-chain.intel.com:911 --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub エラー：Connection timed out you may need to manually set the proxy: Executing: /tmp/apt-key-gpghome.qjhmgicscb/gpg.1.sh --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub gpg: requesting key from \u0026#39;https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub\u0026#39; gpg: WARNING: unable to fetch URI https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub: Connection timed out you may need to manually set the proxy: マニュアルでプロキシを設定し、再度 Data center GPU manger をインストール sudo apt-key adv --keyserver-options http-proxy=\u0026lt;PROXY-ADDRESS:PORT\u0026gt; --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub sudo add-apt-repository \u0026#34;deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /\u0026#34; sudo apt-get update sudo apt-get install -y datacenter-gpu-manager ホストエンジンの停止 sudo nv-hostengine -t fabricmanager を再起動 sudo service nvidia-fabricmanager start エラー：Failed to start nvidia-fabricmanager.service: Unit nvidia-fabricmanager.service not found. Failed to start nvidia-fabricmanager.service: Unit nvidia-fabricmanager.service not found. install the fabric manager and start it: fabricmanager のインストール sudo apt-get install cuda-drivers-fabricmanager-495 sudo service nvidia-fabricmanager start bandwidthTest を行ってエラーが無いことを確認 ./bandwidthTest VM インスタンス立ち上げ時にホストエンジンを停止し、fabric manager を再起動 （VM 立ち上げ２回目以降） sudo nv-hostengine -t sudo service nvidia-fabricmanager start Docker インストールと Pytorch コンテナの確認 sudo apt update sudo apt install -y docker.io sudo docker pull nvcr.io/nvidia/pytorch:21.10-py3 sudo docker run -it --gpus all --shm-size 8g --rm -v $PWD:/work -w /work 030c24bd72ba /bin/bash エラー:　docker: Error response from daemon: could not select device driver “” with capabilities: [[gpu]]. docker: Error response from daemon: could not select device driver “” with capabilities: [[gpu]] 解決方法 こちらを参照\ncurl -s -L https://nvidia.github.io/nvidia-container-runtime/gpgkey | sudo apt-key add - distribution=$(. /etc/os-release;echo $ID$VERSION_ID) curl -s -L https://nvidia.github.io/nvidia-container-runtime/$distribution/nvidia-container-runtime.list | sudo tee /etc/apt/sources.list.d/nvidia-container-runtime.list sudo apt-get update sudo apt-get install -y nvidia-container-runtime sudo service docker restart ","permalink":"https://www.yusaito.com/blog/posts/tech/linux/azure-vm-cuda-docker-setup/","summary":"Azure の web で VM インスタンスを作成 VM インスタンスの作成はこちら 秘密鍵をダウンロードして、read 権限を与えていおく。\ncp ~/Downloads/your_key_name.pem ~/.ssh/keys/azure_vm_key.pem chmod 400 ~/.ssh/keys/azure_vm_key.pem ssh を使って VM にアクセス\nssh -i ~/.ssh/keys/azure_vm_key.pem azureuser@\u0026lt;public ip address of VM instance\u0026gt; Cuda をインストール wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin sudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600 wget https://developer.download.nvidia.com/compute/cuda/11.5.0/local_installers/cuda-repo-ubuntu1804-11-5-local_11.5.0-495.29.05-1_amd64.deb sudo dpkg -i cuda-repo-ubuntu1804-11-5-local_11.5.0-495.29.05-1_amd64.deb sudo apt-key add /var/cuda-repo-ubuntu1804-11-5-local/7fa2af80.pub sudo apt-get update sudo apt-get -y install cuda Data Center GPU manager のインストール（A100x8 の場合） bandwidthTest を行う 詳細は、こちらを参照。 A100x8 ではここでエラーが出る、V100x4 では出ない\ngit clone https://github.com/NVIDIA/cuda-samples.git cd cuda-samples/Samples/bandwidthTest make .","title":"AzureでA100x8（V100x4）のPytorch環境構築とエラー対処"},{"content":"IOError: image file is truncated jpg で結構大きめの画像を Pillow で読み込むときに下記のエラーが出た。\nIOError: image file is truncated 解決策 from PIL import ImageFile ImageFile.LOAD_TRUNCATED_IMAGES = True 参考  ","permalink":"https://www.yusaito.com/blog/posts/tech/python/ioerror-image-file-is-truncated/","summary":"IOError: image file is truncated jpg で結構大きめの画像を Pillow で読み込むときに下記のエラーが出た。\nIOError: image file is truncated 解決策 from PIL import ImageFile ImageFile.LOAD_TRUNCATED_IMAGES = True 参考  ","title":"エラーメモ：IOError: image file is truncated"},{"content":"product は便利そうだけど、starmap は一行別で生成したほうが分かりやすそう。\nitertools.groupby 同じキーをもつような要素からなる イテレーターのグループに対して、キーとグループを返すようなイテレータを作成する。通常、イテレーターは同じキー関数でソート済みである必要がある。\n使い方 for k, g in itertools.groupby(\u0026#39;AAAABBBCCDAABBB\u0026#39;): print(k) # --\u0026gt; A B C D A B for k, g in itertools.groupby(\u0026#39;AAAABBBCCD\u0026#39;): print(list(g)) # --\u0026gt; AAAA BBB CC D itertools.islice 要素を選択・スライスして返すイテレータを生成。\n使い方 for n in itertools.islice(\u0026#39;ABCDEFG\u0026#39;, 2): print(n) # --\u0026gt; A B itertools.pairwise 隣同士をペアにしたイテレータを返す。\n使い方 for n in itertools.pairwise(\u0026#39;ABCDEFG\u0026#39;): print(n) # --\u0026gt; AB BC CD DE EF FG itertools.permutations 特定の長さの順列を返す。\n使い方 for n in itertools.permutations(\u0026#39;ABCD\u0026#39;, 2): print(n) # --\u0026gt; AB AC AD BA BC BD CA CB CD DA DB DC itertools.product 使い方 for n in itertools.product(\u0026#39;ABCD\u0026#39;, \u0026#39;xy\u0026#39;): print(n) # --\u0026gt; (\u0026#39;A\u0026#39;, \u0026#39;x\u0026#39;), (\u0026#39;A\u0026#39;, \u0026#39;y\u0026#39;), (\u0026#39;B\u0026#39;, \u0026#39;x\u0026#39;), (\u0026#39;B\u0026#39;, \u0026#39;y\u0026#39;), (\u0026#39;C\u0026#39;, \u0026#39;x\u0026#39;), (\u0026#39;C\u0026#39;, \u0026#39;y\u0026#39;), (\u0026#39;D\u0026#39;, \u0026#39;x\u0026#39;), (\u0026#39;D\u0026#39;, \u0026#39;y\u0026#39;) for n in itertools.product(range(2), repeat=3): print(n) # --\u0026gt; (0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1) itertools.repeat 繰り返しのイテレータを生成\n使い方 for n in itertools.repeat(10, 3): print(n) # --\u0026gt; A B C D E F itertools.starmap イテレータ の要素を引数として 関数 を計算するイテレータを作成します\n使い方 for n in itertools.starmap(pow, [(2,5), (3,2), (10,3)]): print(n) # --\u0026gt; 32 9 1000 itertools.takewhile predicate が真である限り iterable から要素を返すイテレータを作成する\n使い方 for n in itertools.takewhile(lambda x: x\u0026lt;5, [1,4,6,4,1]): print(n) # --\u0026gt; 1 4 itertools.zip_longest 通常の zip は短いイテレータの合わされるが、長い方に合わせる用。\n使い方 for n in itertools.zip_longest(\u0026#39;ABCD\u0026#39;, \u0026#39;xy\u0026#39;, fillvalue=\u0026#39;-\u0026#39;): print(n) # --\u0026gt; Ax By C- D- ## 参考 \u0026lt;iframe class=\u0026#34;hatenablogcard\u0026#34; style=\u0026#34;width:100%;height:155px;margin:15px 0;max-width:560px;\u0026#34; title=\u0026#34;itertools --- 効率的なループ実行のためのイテレータ生成関数\u0026#34; src=\u0026#34;https://hatenablog-parts.com/embed?url=https://docs.python.org/ja/3/library/itertools.html\u0026#34; frameborder=\u0026#34;0\u0026#34; scrolling=\u0026#34;no\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; ","permalink":"https://www.yusaito.com/blog/posts/tech/python/how-to-use-itertools-2/","summary":"product は便利そうだけど、starmap は一行別で生成したほうが分かりやすそう。\nitertools.groupby 同じキーをもつような要素からなる イテレーターのグループに対して、キーとグループを返すようなイテレータを作成する。通常、イテレーターは同じキー関数でソート済みである必要がある。\n使い方 for k, g in itertools.groupby(\u0026#39;AAAABBBCCDAABBB\u0026#39;): print(k) # --\u0026gt; A B C D A B for k, g in itertools.groupby(\u0026#39;AAAABBBCCD\u0026#39;): print(list(g)) # --\u0026gt; AAAA BBB CC D itertools.islice 要素を選択・スライスして返すイテレータを生成。\n使い方 for n in itertools.islice(\u0026#39;ABCDEFG\u0026#39;, 2): print(n) # --\u0026gt; A B itertools.pairwise 隣同士をペアにしたイテレータを返す。\n使い方 for n in itertools.pairwise(\u0026#39;ABCDEFG\u0026#39;): print(n) # --\u0026gt; AB BC CD DE EF FG itertools.permutations 特定の長さの順列を返す。\n使い方 for n in itertools.permutations(\u0026#39;ABCD\u0026#39;, 2): print(n) # --\u0026gt; AB AC AD BA BC BD CA CB CD DA DB DC itertools.","title":"Python : itertoolsの使い方 -その２-"},{"content":"Atcoder などを昔解いていたときに itertools 便利だなーと思いつつも使いこなせていなかったので総まとめ。\nitertools の解説その１ itertools.accumulate 累積和を返すイテレータを作成できる。\n使い方 for n in itertools.accumulate([1,2,3,4,5]): print(n) # --\u0026gt; 1 3 6 10 15 itertools.chain ２つのシーケンスを１つのシーケンスとして扱う。\n使い方 for n in itertools.chain(\u0026#39;ABC\u0026#39;, \u0026#39;DEF\u0026#39;): print(n) # --\u0026gt; A B C D E F itertools.combinations 特定の長さの組み合わせを返す。出力は辞書式でソートされている。\n使い方 for n in itertools.combinations(\u0026#39;ABCD\u0026#39;, 2): print(n) # --\u0026gt; AB AC AD BC BD CD itertools.combinations_with_replacement 特定の長さの組み合わせを返す。出力は辞書式でソートされている。同じ要素が複数回現れることを許容。\n使い方 for n in itertools.combinations_with_replacement(\u0026#39;ABC\u0026#39;, 2): print(n) # --\u0026gt; AA AB AC BB BC CC itertools.compress Bool のリストも入れて、真の値だけのものだけを返す。\n使い方 for n in itertools.compress(\u0026#39;ABCDEF\u0026#39;, [1,0,1,0,1,1]): print(n) # --\u0026gt; A C E F itertools.count あるかずでスタートして、等間隔の値を返すイテレータを作成する。\n使い方 for n in itertools.count(2.5, 0.5): print(n) # -\u0026gt; 2.5 3.0 3.5 itertools.cycle イテレータから無限にサイクルを生成する。\n使い方 for n in itertools.cycle(\u0026#39;ABCD\u0026#39;): print(n) # --\u0026gt; A B C D A B C D A B C D itertools.dropwhile predicate（第一引数）が真になるまで値を飛ばす。\n使い方 for n in itertools.dropwhile(lambda x: x\u0026lt;5, [1,4,6,4,1]): print(n) # --\u0026gt; 6 4 1 itertools.filterfalse イテレーターから predicate（第一引数） が False となる要素だけを返す。\n使い方 for n in itertools.ilterfalse(lambda x: x%2, range(10)): print(n) # --\u0026gt; 0 2 4 6 8 参考  ","permalink":"https://www.yusaito.com/blog/posts/tech/python/how-to-use-itertools-1/","summary":"Atcoder などを昔解いていたときに itertools 便利だなーと思いつつも使いこなせていなかったので総まとめ。\nitertools の解説その１ itertools.accumulate 累積和を返すイテレータを作成できる。\n使い方 for n in itertools.accumulate([1,2,3,4,5]): print(n) # --\u0026gt; 1 3 6 10 15 itertools.chain ２つのシーケンスを１つのシーケンスとして扱う。\n使い方 for n in itertools.chain(\u0026#39;ABC\u0026#39;, \u0026#39;DEF\u0026#39;): print(n) # --\u0026gt; A B C D E F itertools.combinations 特定の長さの組み合わせを返す。出力は辞書式でソートされている。\n使い方 for n in itertools.combinations(\u0026#39;ABCD\u0026#39;, 2): print(n) # --\u0026gt; AB AC AD BC BD CD itertools.combinations_with_replacement 特定の長さの組み合わせを返す。出力は辞書式でソートされている。同じ要素が複数回現れることを許容。\n使い方 for n in itertools.combinations_with_replacement(\u0026#39;ABC\u0026#39;, 2): print(n) # --\u0026gt; AA AB AC BB BC CC itertools.","title":"Python : itertoolsの使い方 -その１-"},{"content":"Pandas.DataFrame/Series と numpy.ndarray と list の相互変換 (複数の) list から pd.DataFrame へ変換 大きく２つの方法がある。\ndf = pd.DataFrame({\u0026#39;list_1\u0026#39;:list_1, \u0026#39;list_2\u0026#39;:list_2, \u0026#39;list_3\u0026#39;=list_3}) df = pd.DataFrame( data=zip(list_1, list_2, list_3), columns=[\u0026#34;list_1\u0026#34;, \u0026#34;list_2\u0026#34;, \u0026#34;list_3\u0026#34;], ) numpy.ndarray から pd.DataFrame へ変換 # numpy_array # [[ 0 1 2] # [ 3 4 5] # [ 6 7 8]] df = pd.DataFrame(data=numpy_array,columns=[\u0026#39;col_1\u0026#39;,\u0026#39;col_2\u0026#39;,\u0026#39;col_3\u0026#39;]) # col_1 col_2 col_3 # 0 0.0 1.0 2.0 # 1 3.0 4.0 5.0 # 2 6.0 7.0 8.0 pd.DataFrame（Series） から list へ変換 # pandas.DataFrame to numpy.ndarray to list list_2d = df.to_numpy().tolist() # pandas.Series to numpy.ndarray to list list_1d = df[\u0026#34;list_1d\u0026#34;].to_numpy().tolist() 注意 df.values でも numpy.ndarray が取得できるが、現在は非推奨であり、df.to_numpy() が推奨されている。\n参考  ","permalink":"https://www.yusaito.com/blog/posts/tech/python/pandas-dataframe-series-convert-numpy-list/","summary":"Pandas.DataFrame/Series と numpy.ndarray と list の相互変換 (複数の) list から pd.DataFrame へ変換 大きく２つの方法がある。\ndf = pd.DataFrame({\u0026#39;list_1\u0026#39;:list_1, \u0026#39;list_2\u0026#39;:list_2, \u0026#39;list_3\u0026#39;=list_3}) df = pd.DataFrame( data=zip(list_1, list_2, list_3), columns=[\u0026#34;list_1\u0026#34;, \u0026#34;list_2\u0026#34;, \u0026#34;list_3\u0026#34;], ) numpy.ndarray から pd.DataFrame へ変換 # numpy_array # [[ 0 1 2] # [ 3 4 5] # [ 6 7 8]] df = pd.DataFrame(data=numpy_array,columns=[\u0026#39;col_1\u0026#39;,\u0026#39;col_2\u0026#39;,\u0026#39;col_3\u0026#39;]) # col_1 col_2 col_3 # 0 0.0 1.0 2.0 # 1 3.0 4.0 5.0 # 2 6.0 7.0 8.0 pd.","title":"Pandas.DataFrame/Series と numpy.ndarray と list の相互変換"},{"content":"この日にサンタバーバラに来てからあっという間に３年間が経った。２年間住んだ Berkshire Terrace ともお別れである。 家具の大部分は FaceBook のコミュニティを通して UCSB の学生に買い取ってもらったので大きいもので捨てるものはほとんど無かった。\n窓際のL字型の机\rキッチン＆ダイニング\rアパートと壺\r2年間住んだアパート。Berkshire Terrace\rバスの中から見たダウンタウン\r  空港への道中\r","permalink":"https://www.yusaito.com/blog/posts/us-life/last-day-in-santabarbara/","summary":"この日にサンタバーバラに来てからあっという間に３年間が経った。２年間住んだ Berkshire Terrace ともお別れである。 家具の大部分は FaceBook のコミュニティを通して UCSB の学生に買い取ってもらったので大きいもので捨てるものはほとんど無かった。\n窓際のL字型の机\rキッチン＆ダイニング\rアパートと壺\r2年間住んだアパート。Berkshire Terrace\rバスの中から見たダウンタウン\r  空港への道中\r","title":"Last day in Santa Barbara"},{"content":"Henly Gate\rキャンパス内\rキャンパスビーチとラグーン\r2017 年秋　海外ポスドクを志す 昔からいつかはアメリカで研究してみたいという漠然とした思いがあった。博士号取得後の 2018 年 4 月からの勤務先は決まっていたが、もしもうまく海外ポスドク先が決まれば退職して海外へ行くという意向をボス（予定）に相談したところ快諾して頂いた。この時期から海外ポスドク先を探し始めた。ラボ選びの方針は以前の記事で書いた通りである。また同時期にElings Prize Fellowshipにも応募した。\n2018 年 2 月 Elings Prize Fellowship のオファー 幸運にもカリフォルニア大学サンタバーバラ校から Elings Prize Fellowship のオファーレターを頂き（日本人初）、同大学のAndrea Young グループに同年 10 月から行くことが決定した。\n※上のオファーレターによると 2018 年では Elings Prize Fellowship の年間給与予定額は 60000USD (~ 660 万円)だが、2021 年現在は公式サイトにある通り 65000USD になっている。また UC サンタバーバラのポスドクの給与は年間 2%上昇する（これはフェローシップに限らない）。したがって 2021 年現在 Elings Prize Fellowship を獲得すると 1 年目 65000USD, 2 年目 66300USD, 3 年目 67626USD (~ 743 万円) となる。\n2018 年 3 月　博士（工学）取得 博論審査を無事に通過して、東大から博士号が授与された。同時期に幸運にも日本学術振興会育志賞も頂いた。\n2018 年 9 月 27 日　渡米 アイラビスタの学生街でシェアハウスで暮らし始める。最初の 1 ヶ月は英語が分からなすぎて非常につらかった。 初見の装置の使い方の説明を理解するのが特に大変だった。食事に関しても、とりあえず空腹をしのいで明日生きていればそれで良いくらいの精神で朝夜菓子パンと昼はキャンパスの YOSHINOYA で食べていた。それから程なくして食事処をいくつか見つけ、朝はカロリーメイト、昼はサブウェイ、夜はサブウェイまたはインドカレーというスタイルになった。インドカレーは東京だとナンがデフォルトだがアイラビスタのインドカレー屋はライスがデフォルトだった。カレーは美味しかったが、ライスは美味しくなかった。またサブウェイをあまりに食べ過ぎていた時期もあり、一時期サブウェイを全く受けつけなくなった。家に帰るのは\u0026quot;毎日\u0026quot;夜 10-12 時くらいだった。以前の記事でも書いたが、アイラビスタは学生街でとても治安が良いので夜１時にぼーっと歩いていても全く身の危険を感じたことはない（アメリカの他の多くの場所ではこうはいかないと思う）。むしろ、頭上からかなり太めの枝が突然落ちてきたり（頭に落ちたら怪我では済まないかもしれない）、目の前で倒木したりなど人以外の要素で危険が多い。\n2018 年 11 月　ソーシャルセキュリティーナンバー（SSN）取得 アメリカ人にとって命の次に大事なSSN（納税者番号）を取得した。これがないとタックスリターンなどの場面で困る。\n2018 年 12 月　研究テーマ大幅変更 当初予定していた研究、つまりフェローシップ獲得用の書類で書いた研究計画、は非常に難しいことが分かったので、渡米から 3 ヶ月も経たずにあきらめ、全く別の研究テーマに切り替えた。 以後、フェローシップ獲得用の書類で書いた研究は一度も行っていない。\n2019 年 1 月　歯の神経を抜く この記事で書いたが、歯の神経を抜いた。アメリカで根管治療をうけるのはなかなか無い経験ではないかと思う。（もう一度したいとは思わない。）\n2019 年 3 月　アメリカ物理学会＠ボストン ボストンで開催されたアメリカ物理学会（正式には APS March Meeting）に参加した。大雪だった。ちなみにサンタバーバラは雪が降らない。翌年の同学会は開催２日前に COVID-19 の影響で突然キャンセルされた。\n2019 年 6 月　2 人の学部生のメンターになる 自分が直接メンターをする UCSB の学部生（2 年生と 3 年生）を２人受け持つことになった。２人には主に私の実験で使うサンプル作製の前半の部分を担当してもらった。\n2019 年 6 月下旬　引っ越し 妻が渡米してきてくれ、これを機に同じアイラビスタにある 1bedroom (ほぼ 1LDK) の部屋（前のシェアハウスから徒歩 10-15 分）に引っ越した。以後は妻が料理を作ってくれたおかげで、カロリーメイト、サブウェイ、インドカレー、そして YOSHINOYA のローテーションからは卒業した。\n新しいアパート\r2019 年 7-8 月　リンダウ・ノーベル賞受賞者会議に参加 毎年、ドイツのリンダウに 30 名程度のノーベル賞受賞者が世界中から招待され、若手研究者（大学院生やポスドク）に対して講演やディスカッションを行って下さる会議に参加した。 日本人は 10 名程度参加していた。詳細はこちら。\n2019 年 8 月-9 月　2 人の北京大学からのインターン生のメンターになる 当時受け持っていた UCSB の学部生二人に加え、北京大学からのインターン生（学部 3 年生）二人受け持つことになった。この時期は自分の実験と指導を並行して行う時間が多く、とても忙しかった。\n2019 年 10 月　歯の矯正をはじめた 詳細はこの記事に書いた。\n2019 年 12 月　1 本目の筆頭論文を投稿 渡米から 1 年ちょっとが過ぎ、やっと当時行っていた研究がまとまりそう（？）になった。より正確には競合がいることが分かったので、早急にまとめざるを得なくなった。ボスが競合の研究グループから「私達は今日投稿した」みたいな旨のメールを受け取ったらしく、突然（文字も図も全くなにもない状態で）ボスから 2 日で書き終えられるか？みたいな無茶振りを受け、Yes?って勢いで答えたが、4 日くらいかかってしまい、それをボスが 2 日で直し、1 日かけて 2 人で見直し、投稿という感じの超スピード論文執筆＆投稿になった。論文執筆指令から投稿までわずか 1 週間である。ディスカッションは実質 1-2 日くらいしかしていない。この論文はアメリカでの最初の筆頭著者の論文となり、後にNature Physics (arXiv PDF 版)に掲載された。\n2019 年 12 月　ニューヨークで超極寒の中、体調を崩す とある実験のためにニューヨーク大学に 2-3 週間出張することになった。時期が悪かったのか毎年そうなのか、この頃のニューヨークシティは超極寒でマイナス 10 度を下回る日もたびたびあった。サンタバーバラの温暖な気候に慣れていた私は体調を崩してしまい、38 度以上の熱とひどい咳に苦しんだ。妻が看病してくれたが完治するのに 10 日くらいかかった。ちょうど中国で COVID-19 が発見された頃でもあった。\n2020 年 3 月 18 日　COVID-19 の影響で大学閉鎖 私は当時 COVID-19 がまさかここまで全世界的に蔓延し、パンデミックを引き起こすことになるとは夢にも思っていなかったし、マスクもしていなかった。3 月 12 日にアメリカ物理学会が開催 2 日前になって突然キャンセルの連絡が入り、ハーバードやブラウンなどでキャンパス閉鎖の噂を耳にする。3 月 16 日にボスから slack でメンバー全員に数時間以内に装置など全て停止してラボを閉鎖し、キャンパスから去るようにと連絡を受ける。さらに 3 月 18 日に研究副学長からShutdown of All On-Campus Researchというタイトルの PDF ファイルがメーリスで回ってきて、この日を境に実質的にキャンパスが完全に閉鎖された。あっという間の 1 週間だった。そこからミーティングがすべて Zoom 上で行われるようになった。実験系の研究のつらいところは装置を使った実験が必要なためラボに行かないと全く研究が進まないという点である。Work from Home というわけには行かないのである。\n2020 年 6 月　制限付きで大学再開 1 実験室 1 人ルールのもと実験が再開できるようになった。どの実験室で作業しても常に自分一人しかいないのは寂しかった。もちろんマスクは全員着用、さらにクリーンルームではフェイスシールドも着用義務になり、目の前が曇りすぎて非常に作業しづらかった。\n2020 年 8 月　2 本目の筆頭論文を投稿 COVID-19 の直前に 7-8 割がた出ていた成果に関してまたもや競合がいることが分かった。例によってボスから来週までに追加データをとって論文を投稿しようと言われ、急いで追加実験を行い論文にまとめた。この論文はアメリカでの 2 本目の筆頭著者の論文となり、後にNature Physics (arXiv PDF 版)に掲載された。\n2020 年 8 月　3 本目の筆頭論文を投稿 前々から気になっていたデータに関して、（サンプル依存性がとても多い物質なので）最初はサンプル依存性を疑ったが、サンプル依存性ではなく実は普遍的な現象ではないかと思い、ラボ再開後にとある実験を始めた。その仮説が実験的に正しいらしいことが分かり、ボスがその仮説が理論的に説明できるような物理現象を思いつき、論文をまとめはじめた。生き馬の目を抜く世界とはまさにこのことである。またもや競合がいることが判明した。そして例によって大急ぎで論文を書き上げ、投稿した。この論文はアメリカでの 3 本目の筆頭著者の論文となり、後にNature (arXiv PDF 版)に掲載された。\n結局アメリカで書いた 3 本の筆頭論文に関して、ほぼ同じ研究テーマをやっている競合の研究グループがいたので、それらの他の研究グループからもほぼ同時期に似た内容の実験結果が同じ雑誌また別の雑誌の論文に出版され、報告されている。自分達だけが最初に見つけたわけではないというのはいささか悔しいが、裏を返せば再現性が高い実験結果であるともいえる。\n2020 年 11-12 月　ビザ更新のため一時帰国 J1 ビザ更新のために一時帰国した。コロナのために 2 週間隔離などがあり、いろいろ大変だったが、Thanksgiving Day を挟んだにも関わらず、アメリカ大使館・領事館は新しいビザを営業日で 2 日程度で発行してくれた。この頃、ファイザーとモデルナがワクチン開発に成功したというニュースを聞いた。\n2021 年 3-4 月　Pfizer-BioNTech 製のワクチンを接種 Pfizer-BioNTech 製のワクチンを接種した、接種後 6-20 時間くらいは腕の痛みと倦怠感があったが、発熱はなかった。\n2021 年 5 月　研究テーマ変更 3 年目になって再度研究テーマを変更した。これが実質最後の研究テーマになった。\n2021 年 6 月　マスク無し生活になる CDC からワクチン接種済みの人はマスクをつけなくても良いというようなガイドラインが発表される。これを受け、UCSB でも下記のようなガイドラインが発表される（多分この頃はその後デルタ株がこれほどまでに猛威を振るうことになるとは誰も思っていなかったのだろう。私はデルタ株の存在さえ知らなかったと思う。）\n2021 年 8 月　デルタ株の蔓延と共にマスク有り生活に戻る COVID-19 の変異種であるデルタ株が世界中で広がり始め、アメリカでも再び感染者が急増したことから再びマスク着用が強く推奨されるようになった。\n2021 年 9 月　日本へ本帰国予定 3 年間のポスドク生活も終え、あと少しで日本に本帰国である。\n寄せ書き付きノートブック\rボスからの送別のプレゼント（本）と3年間使ったマグカップ\r集合写真（2019\u00262021）\r","permalink":"https://www.yusaito.com/blog/posts/us-life/ucsb-postdoc-memory/","summary":"Henly Gate\rキャンパス内\rキャンパスビーチとラグーン\r2017 年秋　海外ポスドクを志す 昔からいつかはアメリカで研究してみたいという漠然とした思いがあった。博士号取得後の 2018 年 4 月からの勤務先は決まっていたが、もしもうまく海外ポスドク先が決まれば退職して海外へ行くという意向をボス（予定）に相談したところ快諾して頂いた。この時期から海外ポスドク先を探し始めた。ラボ選びの方針は以前の記事で書いた通りである。また同時期にElings Prize Fellowshipにも応募した。\n2018 年 2 月 Elings Prize Fellowship のオファー 幸運にもカリフォルニア大学サンタバーバラ校から Elings Prize Fellowship のオファーレターを頂き（日本人初）、同大学のAndrea Young グループに同年 10 月から行くことが決定した。\n※上のオファーレターによると 2018 年では Elings Prize Fellowship の年間給与予定額は 60000USD (~ 660 万円)だが、2021 年現在は公式サイトにある通り 65000USD になっている。また UC サンタバーバラのポスドクの給与は年間 2%上昇する（これはフェローシップに限らない）。したがって 2021 年現在 Elings Prize Fellowship を獲得すると 1 年目 65000USD, 2 年目 66300USD, 3 年目 67626USD (~ 743 万円) となる。\n2018 年 3 月　博士（工学）取得 博論審査を無事に通過して、東大から博士号が授与された。同時期に幸運にも日本学術振興会育志賞も頂いた。","title":"UCSBポスドク記"},{"content":"ポスドク（Postdoctoral Researcher; 博士研究員）のポジションは世界中に無数にあるので博士号さえ持っていれば容易になれる（なりたいかどうかはもちろん人による）。日本から海外のポスドクを目指す際に多くの人はまず第一に海外学振をとることを目指すと思うが、少なくともアメリカに関しては、応募先のラボがある程度以上に研究費が潤沢であれば応募者側に明らかに問題がない限り（例えばコミュニケーションに極端に難がある、前所属で何らかの問題を起こしたなど）フェローシップ無しでもポスドクに応募して落ちることはまずない。\u0026ldquo;研究費に困っていない\u0026quot;ラボの主宰者（PI）が、応募してくるポスドクを断る理由がほぼないのである。論文が 1 本もないからと言って海外ポスドクを諦める人をたまに見かけるが、アメリカには論文無しで学位をとってポスドクやってる人なんて山ほどいるから基本的には問題にはならないと思う。従って、海外ポスドクになりたい場合はいくつか研究費が潤沢そうで\u0026ldquo;良さげなラボ\u0026rdquo;の候補を決めてとりあえずメールを送ってみるのが良いと思う。ラボの PI のもとにはかなり多く（数十から 100 以上）の迷惑メールが届くので（メールアドレスを論文の責任著者として各論文誌の web サイトに公開しているため）、返信がなくともめげずに何度も送って見るのが良い。もちろんメールを送る前に学会などで顔見知りになっていればなお良いと思う。\n海外ポスドクになる方法 海外ポスドクになるには、1) フェローシップ無しで現地のラボに直接応募する（アメリカでは最も一般的）、2) 海外学振を獲得する、以外にも 3) 現地のフェローシップを獲得するという方法がある。現地のフェローシップというの国や地域、そして各研究機関が出しているフェローシップのことである。フェローシップ獲得のメリットは、お給料が同じ研究機関のポスドクよりも 100 万円前後高くなる（特に各研究機関が出している場合）のと、アカデミックキャリアを目指すのであれば研究費獲得実績と言う点でプラスになることである。デメリットは倍率が高い（例えば 30 倍-100 倍以上）のである程度は運である点である。例えば私が知っている物理関連分野で応募できるものをぱっと上げると\n Pappalardo Fellowship (MIT, 物理分野) Miller Research Fellowship (UC Berkeley, 基礎研究全般) Kavli Institute at Cornell Postdoctoral Fellowships (Cornell, ナノサイエンス) Materials Science Postdoctoral Fellowship (Princeton, 材料科学) Elings Prize Fellowship (UC Santa Barbara, ナノサイエンス)  地域・国単位だと例えば\n Marie Skłodowska-Curie Fellowship (ヨーロッパ) Banting Postdoctoral Fellowships (カナダ)  などがある。\n要求される応募書類 どの fellowship も似たような書類が要求される。例えば私が獲得した Elings Prize Fellowship の公式サイトから要求される書類を見てみると（特に太字の箇所はどこの応募する際にも要求されると思う）、\n a. A cover letter summarizing the applicant\u0026rsquo;s background, indicating the area of proposed research, and listing the group(s) with which the research will be pursued.\nb. A complete curriculum vitae of the applicant\u0026rsquo;s educational and professional experience, listing all publications, and summarizing the applicant’s contributions to teaching, mentorship and service.\nc. A one-page research summary, to be completed in coordination with the proposed faculty advisor. References may be included on a separate page and do not count toward the one-page research summary limit.\nd. A one-page statement on contributions to diversity, equity, and inclusion, core values of the California NanoSystems Institute and UC Santa Barbara. This statement should address past and/or planned contributions to diversity, equity, and inclusion through research, outreach, and/or service, and may highlight the applicant’s personal history, for example, in overcoming barriers such as economic, social or educational disadvantage to achieve significant academic success.\ne. A one-page mentoring plan to be submitted directly by the proposed faculty mentor to describe the training environment as well as plans for professional development (e.g. in research, ethics, teaching, service, and promotion of diversity and equal opportunity.)\nf. Three supporting letters of recommendation, one must prepared by your proposed UCSB advisor(s), to be submitted directly by the recommenders. Letters of recommendation will only be accepted online. Each recommender listed on an application will receive an e-mail with instructions on how to submit a letter of recommendation. https://www.cnsi.ucsb.edu/resources/funding/elings-prize\n 要するに必要な書類は、カバーレター、CV、研究計画、多様性などへの貢献の Statement(私が応募した際はなかった)、メンターのプラン（ボス（予定）が提出）、3 通の推薦状である。アメリカの大学/大学院では、筆記試験スコア（GRE や SAT）、Statement of Purpose が要求されるが、こうしたフェローシップではそれらの代わりに論文リスト（CV に含まれる）と研究計画が要求される点が異なる。さらに場合によっては面接審査がある。博士取得時点で論文が 1 本もないとこうしたフェローシップに通ることはほぼ不可能だと思うが、論文が 1 本でもあれば出して見る価値はあると思う（筆頭 2 本くらいでも通ってる人はいる）。私の場合はコネは全く無かったが、もちろんフェローシップ審査員にコネがあれば審査が有利になるかもしれない。\n","permalink":"https://www.yusaito.com/blog/posts/us-life/how-to-get-fellowship/","summary":"ポスドク（Postdoctoral Researcher; 博士研究員）のポジションは世界中に無数にあるので博士号さえ持っていれば容易になれる（なりたいかどうかはもちろん人による）。日本から海外のポスドクを目指す際に多くの人はまず第一に海外学振をとることを目指すと思うが、少なくともアメリカに関しては、応募先のラボがある程度以上に研究費が潤沢であれば応募者側に明らかに問題がない限り（例えばコミュニケーションに極端に難がある、前所属で何らかの問題を起こしたなど）フェローシップ無しでもポスドクに応募して落ちることはまずない。\u0026ldquo;研究費に困っていない\u0026quot;ラボの主宰者（PI）が、応募してくるポスドクを断る理由がほぼないのである。論文が 1 本もないからと言って海外ポスドクを諦める人をたまに見かけるが、アメリカには論文無しで学位をとってポスドクやってる人なんて山ほどいるから基本的には問題にはならないと思う。従って、海外ポスドクになりたい場合はいくつか研究費が潤沢そうで\u0026ldquo;良さげなラボ\u0026rdquo;の候補を決めてとりあえずメールを送ってみるのが良いと思う。ラボの PI のもとにはかなり多く（数十から 100 以上）の迷惑メールが届くので（メールアドレスを論文の責任著者として各論文誌の web サイトに公開しているため）、返信がなくともめげずに何度も送って見るのが良い。もちろんメールを送る前に学会などで顔見知りになっていればなお良いと思う。\n海外ポスドクになる方法 海外ポスドクになるには、1) フェローシップ無しで現地のラボに直接応募する（アメリカでは最も一般的）、2) 海外学振を獲得する、以外にも 3) 現地のフェローシップを獲得するという方法がある。現地のフェローシップというの国や地域、そして各研究機関が出しているフェローシップのことである。フェローシップ獲得のメリットは、お給料が同じ研究機関のポスドクよりも 100 万円前後高くなる（特に各研究機関が出している場合）のと、アカデミックキャリアを目指すのであれば研究費獲得実績と言う点でプラスになることである。デメリットは倍率が高い（例えば 30 倍-100 倍以上）のである程度は運である点である。例えば私が知っている物理関連分野で応募できるものをぱっと上げると\n Pappalardo Fellowship (MIT, 物理分野) Miller Research Fellowship (UC Berkeley, 基礎研究全般) Kavli Institute at Cornell Postdoctoral Fellowships (Cornell, ナノサイエンス) Materials Science Postdoctoral Fellowship (Princeton, 材料科学) Elings Prize Fellowship (UC Santa Barbara, ナノサイエンス)  地域・国単位だと例えば\n Marie Skłodowska-Curie Fellowship (ヨーロッパ) Banting Postdoctoral Fellowships (カナダ)  などがある。\n要求される応募書類 どの fellowship も似たような書類が要求される。例えば私が獲得した Elings Prize Fellowship の公式サイトから要求される書類を見てみると（特に太字の箇所はどこの応募する際にも要求されると思う）、","title":"海外ポスドクになる方法と現地フェローシップ"},{"content":"SETI Breakthrough Listen - E.T. Signal Searchという Kaggle の画像分類コンペに参加しました。\n結果 774 チーム中 74 位でソロ銅でした。\nコンペの概要 Overview のページには\n In this competition, use your data science skills to help identify anomalous signals in scans of Breakthrough Listen targets. Because there are no confirmed examples of alien signals to use to train machine learning algorithms, the team included some simulated signals (that they call “needles”) in the haystack of data from the telescope. They have identified some of the hidden needles so that you can train your model to find more.\n とあって、要するに SETI（Search for Extra Terrestrial Intelligence；地球外知的生命体探査）の研究グループ（Listen チーム）が取得した大量の望遠鏡の信号のデータ（2 次元データ）をシミュレーションによる擬似的な信号（needle）が加えられたデータ（Positive）と無いデータ（Negative）に分類し、その AUC スコアを競うコンペです。地球外知的生命体からの信号発見用の機械学習アルゴリズムを開発するという何ともロマンのあるコンペです。\nコンペで使用するデータの例を Negative, Positive で 2 つずつ挙げると（縦軸は時間、横軸は周波数）\nのようになっており、たしかに Positive データの方には needle らしい特徴が視認できます（赤矢印）。上のデータはわかりやすいデータをあげましたが、実際には少なくとも目で見る限りは Needle らしい特徴なんてどこにもない Positive データもたくさんありました。シグナルよりも圧倒的にノイズが大きいデータもありました。実際の観測データでは、望遠鏡を信号を発する方向に向けた際のデータを ON データ、別の方向に向けた際のデータ OFF データとしているため、今回のデータでは Positive の ON データにのみシミュレーションによって生成した擬似的な needle（信号）をうまく混ぜてあるようです。\n参加記 2021 年 6 月  本業に余裕ができたので 5 年ぶりに Kaggle を真面目にやりたいと思い立つ。画像コンペに参加したことが無かったので、画像コンペを中心に漁り始める。SIIM と SETI の 2 つのコンペを発見した。最初に SIIM をやり始めたが、厳しそうだったのですぐに撤退。 Google Colab Pro を契約 Kaggler たちは皆 Pytorch を使っているようなので Pytorch を勉強し始めた。深層学習もすっかり忘れていたので復習した。 世の中には timm という神ライブラリがあることを知り、転移学習を覚えた。 とりあえず Pytorch で一通り書けるようになりまともなスコアが出るようになったので、公開カーネルとディスカッションを読みはじめる。 入力は ON チャネルだけにした。 4xGrandmaster の@abhishekさんが作ったTezというエコシステムを知り、これを利用しつつ、自分で一からエコシステムを作ったりして Pytorch の理解を深めた。 mixup という data augumentation を知る。  リーク発覚  ローカルに落としたファイルの time stamp などから正解ラベルが特定できるリークが発覚＝＞ 3-4 週間後にコンペ再スタート  2021 年 7 月  @ttaharaさんが公開されていたpytorch-pfn-extraを使ったCodeを発見して、便利さに感動したが、web 上に pytorch-pfn-extra の説明があまりなく、すべての解読はまだできていない。 *mixup の alpha を 0.5 から 1.5 に変えると efficientnetb0 で Public score が 0.760 から 0.766 に上がった。 何もいいアイディアが思い浮かばないので、データの加工（標準化、正規化）、モデルの変更（efficientnet family, resnet family, vgg16bn, mobilenet）などを試すがあまり劇的な効果は得られなかったが、efficientnetb3 が若干良いスコアを出すことが分かった。 リーク前のデータで pretrain したら少しスコアが上がった。 これまでのモデルのスコアをアンサンブルをしたら一時期 15 位くらいまで上昇した（残り 1 ヶ月）  2021 年 8 月  TTA, アンサンブル、スタッキングなどを試す。TTA してからアンサンブルすると TTA 無しのアンサンブルよりもスコアが下がって謎だった。 positive データだけリーク前のデータから追加したが、スコアが下がった。 Pseudo labeling も試したがうまくいかなかった。 スタッキングを試すが Public score で 0.780 を超えない。 Google Colab Pro ＋にアップグレード ラスト 3 日で銀圏から銅圏に追い出される。 最終的に 512x512 の画像サイズで学習し、mixup alpha を 1-1.5 で変えたりして、efficientnetb3 x 6 + efficientnetb0 x 3 + resnet34d x 2 + effnetb1 x 1 + effnetb5 x 1 + XGBoost のスタッキングの単純平均アンサンブルを提出。  上位陣の解法 1 位 Watercooled チーム（@philippsingerさん、@philippsingerさん、@philippsingerさん） [https://www.kaggle.com/c/seti-breakthrough-listen/discussion/266385]\n \u0026ldquo;Magic\u0026quot;を使って最終的に 2 位に大差をつけて優勝。 モデルは First convolution stride (1, 2) + eca_nf_net _l2 + GeM Pooling   Magic1: test セットにのみ現れる sin 波を生成して学習させる（=\u0026gt; LB 0.800） Magic2. バックグラウンドノイズの量を大幅減らすため（S/N ratio を上げるため？）のデータ処理　(LB=\u0026gt;0.853)  2 位 未知との遭遇 チーム（@hirune924さん） [https://www.kaggle.com/c/seti-breakthrough-listen/discussion/266397]\n Pytorch lightening を用いた圧倒的に簡潔なコード logical OR 用の mixup：y = y + y[index] - (y * y[index]) (これで pseudo lebel のときの soft target になるらしい。)  3 位 knjチーム（@knjcodeさん） [https://www.kaggle.com/c/seti-breakthrough-listen/discussion/266403]\n Convolutional Triplet Attention Moduleを Efficient Net に使った解法 backbone は EfficientNet B1\u0026ndash; B4 GeM Pooling (p=4) Focal Loss (gamma=0.5) MADGRAD optimizer  Initial Lr 1e-4 LinearWarmupCosineAnnealingLR (warmup_epochs=5)    4 位 Steven Signal チーム（@sherlockkayさん, @kulyabinさん, @bakeryproductsさん） [https://www.kaggle.com/c/seti-breakthrough-listen/discussion/266396]\n 工夫した mixup と cutmix FocalLoss, gamma=2, alpha=.7 モデル: nf-regnetb1, nf-regnetb1, HRNet18, timm EMA  5 位 SETI の壁 チーム（@kzkt0713さん, @sinpcwさん, @sunakuziraさん） [https://www.kaggle.com/c/seti-breakthrough-listen/discussion/266394]\n モデル: eca_nfnet_l2 (4fold) + efficientnet_v2_m (4fold) SHOT (https://github.com/tim-learn/SHOT) pseudo labeling  上位陣の手法を身に着けて精進していきたいです。 CPMP さんとか僕がのほほんとサンタコンペ出た 5 年前からずっと存在感があってすごい。\n","permalink":"https://www.yusaito.com/blog/posts/tech/kaggle/seti-breakthrough-listen/","summary":"SETI Breakthrough Listen - E.T. Signal Searchという Kaggle の画像分類コンペに参加しました。\n結果 774 チーム中 74 位でソロ銅でした。\nコンペの概要 Overview のページには\n In this competition, use your data science skills to help identify anomalous signals in scans of Breakthrough Listen targets. Because there are no confirmed examples of alien signals to use to train machine learning algorithms, the team included some simulated signals (that they call “needles”) in the haystack of data from the telescope.","title":"Kaggle：SETIコンペ参加記（ソロ銅：71th/768 teams）"},{"content":"渡米直後 渡米直後に最初に住んだ部屋。アイラビスタの Trigo Rd にある 7-8 人くらいが住めるシェアハウス。同じ時期に ICU から交換留学のような制度で女子学生が二人来ていた。彼女達は二人とも英語がペラペラでキャンパスの情報などを時折仕入れてくれたり、時には日本食をプレゼントしてくれたりなどとてもお世話になった。（学部生の彼女達からみたら私は毎日深夜頃にラボから部屋に帰ってくる異様な存在だったのではないかと思う。）\n\rアイラビスタの街並み アイラビスタは人口の大半が学生の街である。スケボーに乗ってる人やサーフボードを持ってる人を多数見かける。治安はとても良い。ニューヨークと比べて時間がとてもゆっくり流れていて、穏やかな人が多く、これといった（人種）差別を受けたことは 3 年間で一度もない。ただし、たまによそ見をしているスケボーダーが突っ込んできたり、スケボーダーが転んだ際にボードがこちらに突っ込んでくることがあるので注意。\nカリフォルニア大学サンタバーバラ校（UCSB） 多分 UCSB の正門（キャンパスの東側にある）。めったに使わない。 キャンパス内 キャンパスビーチ 研究で疲れたときはぼーっとビーチを見ると癒やされる。 Downtown 赤い屋根が特徴的なスペイン風の美しい建物が多い。ワイナリーや海鮮系のレストランも多い。 サンタバーバラはウニの名産地なので、Sushi Go Go と Shell fish company というお店で妻とウニを食べた。 以下はサンタバーバラ外の場所である。\nチャンネル諸島（Channel island） @ Ventura チャンネル諸島は、サンタバーバラ近くにベンチュラ郡に属する 8 つの島々で構成される諸島で国立公園にもなっている。シマハイイロギツネ(Island fox)という小柄なキツネが多数生息する。かなり人馴れしている。 リンダウ・ノーベル賞受賞者会議 @ Linadu, Germany 毎年 30 名程度のノーベル賞受賞者が世界中から招待され、若手研究者（大学院生やポスドク）に対して講演やディスカッションを行って下さる会議でドイツのリンダウで開催されている。 日本人は 10 名程度参加していた。詳細はこちら\nThe Institute of Photonic Sciences @ Castelldefels, Spain リンダウの帰りにスペインのカステイダフェルス（Castelldefels）にある ICFO（The Institute of Photonic Sciences）という研究機関の中の Dimitri Efetov 研を訪問した。Prof. Efetov の大学院時代の研究テーマが私の大学院時代の研究テーマと似た内容だったために興味をもってもらい、大学院時代の研究テーマでセミナーをさせて頂いた。 ニューヨーク大学 @ NYC 2019 年 12 月頃（covid19 が中国で発見されたあたり？）にベクトルマグネット付きの希釈冷凍機を借りるためにニューヨーク大学の Javad Shabani 研究室を訪問した。冬のニューヨーク市は極寒で日によってはマイナス 10 度を下回ったりして顔中凍るかと思った。ニューヨーク市滞在中に体調を崩し、そこそこの熱（38 度以上）とひどい咳が出た。これがコロナの症状だったかどうかは今となっては知る由もない。ちなみに実験はうまくいかなかった（サンプルが全滅した）。 ","permalink":"https://www.yusaito.com/blog/posts/us-life/santabarbara-pictures/","summary":"渡米直後 渡米直後に最初に住んだ部屋。アイラビスタの Trigo Rd にある 7-8 人くらいが住めるシェアハウス。同じ時期に ICU から交換留学のような制度で女子学生が二人来ていた。彼女達は二人とも英語がペラペラでキャンパスの情報などを時折仕入れてくれたり、時には日本食をプレゼントしてくれたりなどとてもお世話になった。（学部生の彼女達からみたら私は毎日深夜頃にラボから部屋に帰ってくる異様な存在だったのではないかと思う。）\n\rアイラビスタの街並み アイラビスタは人口の大半が学生の街である。スケボーに乗ってる人やサーフボードを持ってる人を多数見かける。治安はとても良い。ニューヨークと比べて時間がとてもゆっくり流れていて、穏やかな人が多く、これといった（人種）差別を受けたことは 3 年間で一度もない。ただし、たまによそ見をしているスケボーダーが突っ込んできたり、スケボーダーが転んだ際にボードがこちらに突っ込んでくることがあるので注意。\nカリフォルニア大学サンタバーバラ校（UCSB） 多分 UCSB の正門（キャンパスの東側にある）。めったに使わない。 キャンパス内 キャンパスビーチ 研究で疲れたときはぼーっとビーチを見ると癒やされる。 Downtown 赤い屋根が特徴的なスペイン風の美しい建物が多い。ワイナリーや海鮮系のレストランも多い。 サンタバーバラはウニの名産地なので、Sushi Go Go と Shell fish company というお店で妻とウニを食べた。 以下はサンタバーバラ外の場所である。\nチャンネル諸島（Channel island） @ Ventura チャンネル諸島は、サンタバーバラ近くにベンチュラ郡に属する 8 つの島々で構成される諸島で国立公園にもなっている。シマハイイロギツネ(Island fox)という小柄なキツネが多数生息する。かなり人馴れしている。 リンダウ・ノーベル賞受賞者会議 @ Linadu, Germany 毎年 30 名程度のノーベル賞受賞者が世界中から招待され、若手研究者（大学院生やポスドク）に対して講演やディスカッションを行って下さる会議でドイツのリンダウで開催されている。 日本人は 10 名程度参加していた。詳細はこちら\nThe Institute of Photonic Sciences @ Castelldefels, Spain リンダウの帰りにスペインのカステイダフェルス（Castelldefels）にある ICFO（The Institute of Photonic Sciences）という研究機関の中の Dimitri Efetov 研を訪問した。Prof. Efetov の大学院時代の研究テーマが私の大学院時代の研究テーマと似た内容だったために興味をもってもらい、大学院時代の研究テーマでセミナーをさせて頂いた。 ニューヨーク大学 @ NYC 2019 年 12 月頃（covid19 が中国で発見されたあたり？）にベクトルマグネット付きの希釈冷凍機を借りるためにニューヨーク大学の Javad Shabani 研究室を訪問した。冬のニューヨーク市は極寒で日によってはマイナス 10 度を下回ったりして顔中凍るかと思った。ニューヨーク市滞在中に体調を崩し、そこそこの熱（38 度以上）とひどい咳が出た。これがコロナの症状だったかどうかは今となっては知る由もない。ちなみに実験はうまくいかなかった（サンプルが全滅した）。 ","title":"写真で振り返るサンタバーバラ滞在記"},{"content":"サンタバーバラのスターンズワーフの先端にある Shell Fish Company という甲殻類がメインの海鮮料理店に行った。サンタバーバラはウニの名産地なので目的はウニだった。 ホタテの上に乗ったウニがとても美味しかった。\n","permalink":"https://www.yusaito.com/blog/posts/us-life/shellfish-company/","summary":"サンタバーバラのスターンズワーフの先端にある Shell Fish Company という甲殻類がメインの海鮮料理店に行った。サンタバーバラはウニの名産地なので目的はウニだった。 ホタテの上に乗ったウニがとても美味しかった。","title":"Shell Fish Company"},{"content":"以前の記事で書いた通り、私は渡米 3 ヶ月で歯の神経を抜いた。歯内療法科で専門医に歯の神経を抜いてもらった後に、すぐ隣の一般歯科の専門医に見てもらったのだが、その際に奥歯に過度な力が加わっているためこのまま放っておくと頭痛持ちになるかもしれないからどこかの矯正歯科に行ったほうが良いと言われた。当時は渡米直後ということもあり、仕事をするのに、もっと言えば生活していくのに精一杯だったためには華麗にスルーしてしまったのだが（金銭的にも余裕がなかった）、それから数ヶ月が経って一段落してやはり矯正歯科に行くことにした。お世辞にも健康で丈夫な体とは言えないので年をとってからの悩みの種を増やしたくなかったからである。それと矯正大国アメリカでの矯正を体験してみたかったというのも少しある。矯正歯科は、根管治療をしてくださった歯内療法科と一般歯科のすぐ近くにあるSanta Barbara Orthodontistというところにした。これらの歯科医院は全てAlamar Dental Centerに連なって存在している。これら以外にもあと 3 つくらい別の分野を専門とする歯科医院が存在している。\n初回相談でレントゲン写真などをとってもらい（無料）、治療完了までの予想期間や費用、完成予想図などを説明された。さて米国での治療費は日本に比べてかなり高いと言われるが、その数少ない例外が歯科矯正の治療費だと思う。アメリカでの平均治療費は約 50 万（うわさ）で、これは日本の平均的な治療費である約 100 万円（いくつかのサイトを適当に見て平均した）の半分である。その例に漏れず、私の場合も治療費は 49 万円だった。内訳は、表側治療の透明ブラケット＆ワイヤーで基本治療費 56 万円＋透明なブラケット 3 万円－保険適用 10 万円＝ 49 万円である。この他に上下左右の真ん中あたりの歯の 4 本を\u0026quot;同時に\u0026quot;抜いたので、この矯正の費用とは別に一般歯科で数万円かかった。治療完了までの予想期間は 2 年弱と言われた。何事もなければ本帰国予定までちょうど 2 年だったのでまあ間に合うだろうと思っていた。もちろん当時はその後、Covid-19 によるパンデミックが起こるとは夢にも思っていなかった。そんなこんなで帰国 1 ヶ月になって、主治医からは\u0026quot;ぎりぎり間に合わない\u0026quot;と言われて、日本で継続治療をできる矯正歯科医を絶賛探し中である。\n","permalink":"https://www.yusaito.com/blog/posts/us-life/orthodontics-santabarbara/","summary":"以前の記事で書いた通り、私は渡米 3 ヶ月で歯の神経を抜いた。歯内療法科で専門医に歯の神経を抜いてもらった後に、すぐ隣の一般歯科の専門医に見てもらったのだが、その際に奥歯に過度な力が加わっているためこのまま放っておくと頭痛持ちになるかもしれないからどこかの矯正歯科に行ったほうが良いと言われた。当時は渡米直後ということもあり、仕事をするのに、もっと言えば生活していくのに精一杯だったためには華麗にスルーしてしまったのだが（金銭的にも余裕がなかった）、それから数ヶ月が経って一段落してやはり矯正歯科に行くことにした。お世辞にも健康で丈夫な体とは言えないので年をとってからの悩みの種を増やしたくなかったからである。それと矯正大国アメリカでの矯正を体験してみたかったというのも少しある。矯正歯科は、根管治療をしてくださった歯内療法科と一般歯科のすぐ近くにあるSanta Barbara Orthodontistというところにした。これらの歯科医院は全てAlamar Dental Centerに連なって存在している。これら以外にもあと 3 つくらい別の分野を専門とする歯科医院が存在している。\n初回相談でレントゲン写真などをとってもらい（無料）、治療完了までの予想期間や費用、完成予想図などを説明された。さて米国での治療費は日本に比べてかなり高いと言われるが、その数少ない例外が歯科矯正の治療費だと思う。アメリカでの平均治療費は約 50 万（うわさ）で、これは日本の平均的な治療費である約 100 万円（いくつかのサイトを適当に見て平均した）の半分である。その例に漏れず、私の場合も治療費は 49 万円だった。内訳は、表側治療の透明ブラケット＆ワイヤーで基本治療費 56 万円＋透明なブラケット 3 万円－保険適用 10 万円＝ 49 万円である。この他に上下左右の真ん中あたりの歯の 4 本を\u0026quot;同時に\u0026quot;抜いたので、この矯正の費用とは別に一般歯科で数万円かかった。治療完了までの予想期間は 2 年弱と言われた。何事もなければ本帰国予定までちょうど 2 年だったのでまあ間に合うだろうと思っていた。もちろん当時はその後、Covid-19 によるパンデミックが起こるとは夢にも思っていなかった。そんなこんなで帰国 1 ヶ月になって、主治医からは\u0026quot;ぎりぎり間に合わない\u0026quot;と言われて、日本で継続治療をできる矯正歯科医を絶賛探し中である。","title":"アメリカで矯正歯科に行った話"},{"content":"Twenty-four seven. 24 時間 365 日。\u0026ldquo;いつでも\u0026quot;を表す表現は日本語も英語もあまり変わらない。私はポスドク 1 年目はほぼ文字通り\u0026quot;いつでも\u0026quot;働いていた。実際には週 7 で 1 日 12-13 時間、365 日のうち休んだのは 10 日くらいである。もちろん、研究自体は楽しかったし（特にはじめは新しい環境で新しいテーマだったので）、没頭できていたというのもあるが、その一方全く別の環境でもしっかりと結果を出したいという思いもあった。\n渡米前に英語の勉強を兼ねて\u0026quot;Suits\u0026quot;という弁護士が主役の法律事務所が舞台のアメリカドラマを見ていたのたが、そのメインキャラの一人である Harvey Specter がもうひとりのメインキャラである Mike Ross（当時は Harvey の弟子的ポジション）に次のようなことを言っていた。\n Now when I got here, I dominated. They thought I worked 100 hours a day. Now, no matter what time I get in, nobody questions my ability to get the job done. Get it through your head. First impressions last. Suits シーズン 1 第３話\n 要するに「仕事は第一印象がすべて、最初に全力で頑張ることで信頼が得られる。」ということらしい。仕事の流儀というものは十人十色なので環境＋自分にあった流儀を見つけることが重要なのだと思うけど、当時はこのセリフに感化され、なんとなくアメリカってそういう感じなのかなと思い、自ら進んで冒頭で書いたようなハードワークをしたのである。当時ラボ内で自分が最も働いていたかと聞かれれば自信を持って Yes とは答えられないくらいに他のメンバーも働いていた。少なくとも私がラボに Join した 2018 年当時はそれくらいハードワークなラボだった。そのハードワークの甲斐あってラボ内で数ヶ月である技術にとても詳しくなり（英語がかなり片言でも）信頼されるようになった。Covid のパンデミック以降は数ヶ月はラボに出入り禁止になり、出入りが許可されたあとも 1 実験室あたり 1 人などの制限が長期間続いたこともあり、私も含めラボ全体の労働時間は減った。\n","permalink":"https://www.yusaito.com/blog/posts/us-life/first-year-postdoc/","summary":"Twenty-four seven. 24 時間 365 日。\u0026ldquo;いつでも\u0026quot;を表す表現は日本語も英語もあまり変わらない。私はポスドク 1 年目はほぼ文字通り\u0026quot;いつでも\u0026quot;働いていた。実際には週 7 で 1 日 12-13 時間、365 日のうち休んだのは 10 日くらいである。もちろん、研究自体は楽しかったし（特にはじめは新しい環境で新しいテーマだったので）、没頭できていたというのもあるが、その一方全く別の環境でもしっかりと結果を出したいという思いもあった。\n渡米前に英語の勉強を兼ねて\u0026quot;Suits\u0026quot;という弁護士が主役の法律事務所が舞台のアメリカドラマを見ていたのたが、そのメインキャラの一人である Harvey Specter がもうひとりのメインキャラである Mike Ross（当時は Harvey の弟子的ポジション）に次のようなことを言っていた。\n Now when I got here, I dominated. They thought I worked 100 hours a day. Now, no matter what time I get in, nobody questions my ability to get the job done. Get it through your head. First impressions last. Suits シーズン 1 第３話","title":"Twenty-four seven --- ポスドク1年目の思い出"},{"content":"住民の大半が学生で構成されているアイラビスタはカリフォルニア大学サンタバーバラ校（UCSB）のすぐ東側に位置する小さい町である。\n 一年中快晴の地中海性気候（冬に少し雨が降る）のせいか、ビーチ沿いのせいか、学生街だからか、治安はとても良い。ビーチに隣接しているので街中には夏冬関係なく水着姿の学生が散見され、ビーチではサーフィンしている学生も多い（例えばある学生の一日の様子が Youtube にある＝＞A Day in My Life at UCSB ）。下記は 2021 年 1 月に撮影したアイラビスタのビーチの写真である。(気温は 15-20℃ くらいだった。) デルプラヤ アイラビスタのデルプラヤ（Del Playa Drive）というビーチ沿いのストリートは現地ではかなり有名で、第３セメスター（semester）後の春休み明け（4 月頭）になるとデルトピアと呼ばれる盛大なパーティーが街中で開催される。このパーティーのために、ときにはカリフォルニア中からこの小さい街に学生が集まるとも言われている。このデルトピアのためか、UCSB は全米でも有数のパーティー大学としても有名である。もっともデルプラヤではデルトピアの日に限らずほとんど毎日各家でパーティー（日本で言うところの学生の宅飲みだが、爆音で音楽をかけながら庭で（時として上裸または水着で）謎のテーブルゲームをしながら行う点が異なる）が行われているのでパーティー三昧の学生生活を謳歌したければデルプラヤのどこかに住むのが良いし、そうでなければなるべくデルプラヤから離れた場所に部屋を借りるのが賢明である。ちなみに私は後者を選択した。\nスケボー文化 アイラビスタにはスケボーが自転車並に使われている。平時であれば自転車よりも多くみかけるかもしれない。UCSB キャンパス内にはスケボーの専用レーンがあるほどである。裸足でスケボーに乗っている人もいれば（街中には裸足の人が意外に多い）、サーフボードを抱えながら乗りこなす人もいたりする。\n ","permalink":"https://www.yusaito.com/blog/posts/us-life/islavista/","summary":"住民の大半が学生で構成されているアイラビスタはカリフォルニア大学サンタバーバラ校（UCSB）のすぐ東側に位置する小さい町である。\n 一年中快晴の地中海性気候（冬に少し雨が降る）のせいか、ビーチ沿いのせいか、学生街だからか、治安はとても良い。ビーチに隣接しているので街中には夏冬関係なく水着姿の学生が散見され、ビーチではサーフィンしている学生も多い（例えばある学生の一日の様子が Youtube にある＝＞A Day in My Life at UCSB ）。下記は 2021 年 1 月に撮影したアイラビスタのビーチの写真である。(気温は 15-20℃ くらいだった。) デルプラヤ アイラビスタのデルプラヤ（Del Playa Drive）というビーチ沿いのストリートは現地ではかなり有名で、第３セメスター（semester）後の春休み明け（4 月頭）になるとデルトピアと呼ばれる盛大なパーティーが街中で開催される。このパーティーのために、ときにはカリフォルニア中からこの小さい街に学生が集まるとも言われている。このデルトピアのためか、UCSB は全米でも有数のパーティー大学としても有名である。もっともデルプラヤではデルトピアの日に限らずほとんど毎日各家でパーティー（日本で言うところの学生の宅飲みだが、爆音で音楽をかけながら庭で（時として上裸または水着で）謎のテーブルゲームをしながら行う点が異なる）が行われているのでパーティー三昧の学生生活を謳歌したければデルプラヤのどこかに住むのが良いし、そうでなければなるべくデルプラヤから離れた場所に部屋を借りるのが賢明である。ちなみに私は後者を選択した。\nスケボー文化 アイラビスタにはスケボーが自転車並に使われている。平時であれば自転車よりも多くみかけるかもしれない。UCSB キャンパス内にはスケボーの専用レーンがあるほどである。裸足でスケボーに乗っている人もいれば（街中には裸足の人が意外に多い）、サーフボードを抱えながら乗りこなす人もいたりする。\n ","title":"若者の街、アイラビスタ"},{"content":"アメリカ生活最後の思い出として、妻とメキシコのカンクンへ旅行に行った。 宿泊したホテルはハイアット・ジラーラという所で年齢制限があるため子供は宿泊できない大人オンリーの空間である。ホテル内のプールから望むカリブ海は絶景だった。 オールインクルーシブプランのためホテル内のレストランであればどこでも食べ放題でとても豪華なひとときを過ごした。\n午前１１時くらいからホテル中央のバーでお酒も飲み放題になる。 アジア料理店アシアナとメキシコ料理店マリアマリエ インターナショナルビュッフェのスパイス。朝食はだいたいここで食べた。 シェフズプレート。豪華なコース料理を頂いた。\n VELTRA のツアーを使ってマヤ文明やセノーテの観光にも行った。ガイドの MAMI さんにはとてもお世話になった。\nチチェンイッツァ遺跡 セノーテ スイトゥン セノーテ イキル セノーテイキルのお土産屋で買える珍しい蜂蜜酒 ","permalink":"https://www.yusaito.com/blog/posts/us-life/cancun-trip/","summary":"アメリカ生活最後の思い出として、妻とメキシコのカンクンへ旅行に行った。 宿泊したホテルはハイアット・ジラーラという所で年齢制限があるため子供は宿泊できない大人オンリーの空間である。ホテル内のプールから望むカリブ海は絶景だった。 オールインクルーシブプランのためホテル内のレストランであればどこでも食べ放題でとても豪華なひとときを過ごした。\n午前１１時くらいからホテル中央のバーでお酒も飲み放題になる。 アジア料理店アシアナとメキシコ料理店マリアマリエ インターナショナルビュッフェのスパイス。朝食はだいたいここで食べた。 シェフズプレート。豪華なコース料理を頂いた。\n VELTRA のツアーを使ってマヤ文明やセノーテの観光にも行った。ガイドの MAMI さんにはとてもお世話になった。\nチチェンイッツァ遺跡 セノーテ スイトゥン セノーテ イキル セノーテイキルのお土産屋で買える珍しい蜂蜜酒 ","title":"Cancun"},{"content":"ダウンタウンのワイナリーでとても良い雰囲気な所を見つけた。店員の方がワインの産地についてとても詳しく説明してくれたが英語が早すぎて３ − ４割分からなかった。\n ","permalink":"https://www.yusaito.com/blog/posts/us-life/jamie-sloan-wines/","summary":"ダウンタウンのワイナリーでとても良い雰囲気な所を見つけた。店員の方がワインの産地についてとても詳しく説明してくれたが英語が早すぎて３ − ４割分からなかった。\n ","title":"Jamie Sloan Wines"},{"content":"Broida Hall (物理学棟) Broida Hall は、カリフォルニア大学サンタバーバラ校（UCSB）のキャンパスの東側にある物理学科の建物で、ここに各研究室の居室や実験室などがだいたい入っている。 実験室の近く。実験室の扉を開けるとすぐ外に出る。液体窒素などの汲み場はすぐ近くにあり、便利である。 研究グループの居室。窓が無いのが残念。 サンプル作製と測定 サンプルの作製 実験では、まずスコッチテープ法という手法（2010 年ノーベル物理学賞）でグラファイトや六方晶窒化ホウ素などを劈開して（スコッチテープで手で剥がしていく）それらの原子層（ナノメートルスケールの厚さのもの）を準備する。これらを積層する（重ねる）ことでサンプルを作製する。私の研究では各層（主にグラフェン）の結晶方位に対する相対角度を制御して積層していき、モアレ構造を作成する。（例えばこちらの記事を参照。）実際のサンプル作製に関しては下記の Youtube 動画が分かりやすい\n  スコッチテープ法に関して     原子層の転写に関して     実際の原子層の光学顕微鏡の写真。右から六方晶窒化ホウ素、グラフェン、六方晶窒化ホウ素。これらを積層するとその下の写真になる。 デバイス加工 積層したサンプルをデバイスに加工する。これらのプロセスはキャンパス内の共同利用施設であるクリーンルーム(UCSB Nanofabrication Facility)で行う。企業なども利用でき（ただしかなり高額）、例えば Google の量子コンピュータ部門（サンタバーバラ近くの Goleta にある）もハードウェアの部品の作成などに利用している。クリーンルーム内の装置（主に走査型電子顕微鏡、Etching 装置、蒸着装置）を利用して、加工していく。 クリーンルーム内 Wet bench：試薬の使用など。 走査型電子顕微鏡: デバイスのデザインのパターニングに使用。装置の詳細はこちら 電子ビーム蒸着装置：電極の作成に使用。装置の詳細はこちら 完成したデバイスの例がこちら。 デバイスのサイズは 10-20 マイクロメートル程度である。このデバイスは実際に論文中のデータ取得に使ったものでこの論文 (arXiv 版)中の Device #1 と同一のものである。 実際にどのように電極がデバイスに電気的に接しているかはこちらの論文を参照。\n測定 デバイスが実際に測定可能か、つまり最低限電気的にコンタクトがとれているか、ゲートがリークしていないかをプローブステーションでチェックする。針のようなもの（プローブ）を電極パッドに接触させて、任意の電極間の抵抗値などを測定する。 冷凍機に入れるためにまずこのような冷却用プローブの先端にデバイスを設置する。 希釈冷凍機（写真左側の大きい白い円筒状のもの）で最低温度 10mK（つまりセルシウス度で-273.14℃、絶対零度よりも 0.01℃ だけ高い）まで冷却し、デバイスの特性、例えば電気抵抗値や量子キャパシタンスなどを測定する。希釈冷凍機の仕組みはこちら。冷凍機や測定装置の制御には LabRAD を用いていた。 そこまでの低温が必要ない場合は液体ヘリウム（＋減圧）を用いて、1.5K まで冷却して測定を行う。希釈冷凍機が最低温度 10mK まで 10 時間程度かかるのに対して、こちらは 2-3 時間で最低温（1.5K）までいくことができる。写真の冷凍機は今のラボができる前にこの実験室を使用していたラボが数十年前に購入し使用していた（古代の）冷凍機でメンテナンスが大変である。 研究テーマと論文 UCSB では、twisted2 層グラフェンという 2 枚のグラフェンをある特定の角度（1.1 度）だけずらして積層させた構造の超低温における量子現象の研究を行っていた。\n関連ビデオ（ポスドク時代のボスの講演）：https://online.kitp.ucsb.edu/online/bands-oc20/young/rm/jwvideo.html\n論文\n Saito et al. Nature Physics 16, 926-930 (2020). (arXiv PDF) Saito et al. Nature Physics 17, 478-481 (2021). (arXiv PDF) Saito et al. Nature 592, 220-224 (2021). (arXiv PDF)  ","permalink":"https://www.yusaito.com/blog/posts/us-life/experiment-in-ucsb/","summary":"Broida Hall (物理学棟) Broida Hall は、カリフォルニア大学サンタバーバラ校（UCSB）のキャンパスの東側にある物理学科の建物で、ここに各研究室の居室や実験室などがだいたい入っている。 実験室の近く。実験室の扉を開けるとすぐ外に出る。液体窒素などの汲み場はすぐ近くにあり、便利である。 研究グループの居室。窓が無いのが残念。 サンプル作製と測定 サンプルの作製 実験では、まずスコッチテープ法という手法（2010 年ノーベル物理学賞）でグラファイトや六方晶窒化ホウ素などを劈開して（スコッチテープで手で剥がしていく）それらの原子層（ナノメートルスケールの厚さのもの）を準備する。これらを積層する（重ねる）ことでサンプルを作製する。私の研究では各層（主にグラフェン）の結晶方位に対する相対角度を制御して積層していき、モアレ構造を作成する。（例えばこちらの記事を参照。）実際のサンプル作製に関しては下記の Youtube 動画が分かりやすい\n  スコッチテープ法に関して     原子層の転写に関して     実際の原子層の光学顕微鏡の写真。右から六方晶窒化ホウ素、グラフェン、六方晶窒化ホウ素。これらを積層するとその下の写真になる。 デバイス加工 積層したサンプルをデバイスに加工する。これらのプロセスはキャンパス内の共同利用施設であるクリーンルーム(UCSB Nanofabrication Facility)で行う。企業なども利用でき（ただしかなり高額）、例えば Google の量子コンピュータ部門（サンタバーバラ近くの Goleta にある）もハードウェアの部品の作成などに利用している。クリーンルーム内の装置（主に走査型電子顕微鏡、Etching 装置、蒸着装置）を利用して、加工していく。 クリーンルーム内 Wet bench：試薬の使用など。 走査型電子顕微鏡: デバイスのデザインのパターニングに使用。装置の詳細はこちら 電子ビーム蒸着装置：電極の作成に使用。装置の詳細はこちら 完成したデバイスの例がこちら。 デバイスのサイズは 10-20 マイクロメートル程度である。このデバイスは実際に論文中のデータ取得に使ったものでこの論文 (arXiv 版)中の Device #1 と同一のものである。 実際にどのように電極がデバイスに電気的に接しているかはこちらの論文を参照。\n測定 デバイスが実際に測定可能か、つまり最低限電気的にコンタクトがとれているか、ゲートがリークしていないかをプローブステーションでチェックする。針のようなもの（プローブ）を電極パッドに接触させて、任意の電極間の抵抗値などを測定する。 冷凍機に入れるためにまずこのような冷却用プローブの先端にデバイスを設置する。 希釈冷凍機（写真左側の大きい白い円筒状のもの）で最低温度 10mK（つまりセルシウス度で-273.14℃、絶対零度よりも 0.01℃ だけ高い）まで冷却し、デバイスの特性、例えば電気抵抗値や量子キャパシタンスなどを測定する。希釈冷凍機の仕組みはこちら。冷凍機や測定装置の制御には LabRAD を用いていた。 そこまでの低温が必要ない場合は液体ヘリウム（＋減圧）を用いて、1.5K まで冷却して測定を行う。希釈冷凍機が最低温度 10mK まで 10 時間程度かかるのに対して、こちらは 2-3 時間で最低温（1.5K）までいくことができる。写真の冷凍機は今のラボができる前にこの実験室を使用していたラボが数十年前に購入し使用していた（古代の）冷凍機でメンテナンスが大変である。 研究テーマと論文 UCSB では、twisted2 層グラフェンという 2 枚のグラフェンをある特定の角度（1.","title":"ポスドク＠UCSBでの実験について"},{"content":"PI ポジションを目指している人なら公募の状況、例えばどの大学に誰が面接まで残っているのか、という情報を知りたいのではないだろうか。アメリカの物理関連分野では、そうした公募情報の\u0026quot;うわさ\u0026quot;を掲載している web サイトがある。CM/AMO Rumor Millである。公募情報はもちろん、誰がどの大学の面接に呼ばれたか、誰がオファーを受け、誰が断ったかなどが書いてある。※あくまで\u0026quot;うわさ\u0026quot;である。\n","permalink":"https://www.yusaito.com/blog/posts/other/cmp-rumor/","summary":"PI ポジションを目指している人なら公募の状況、例えばどの大学に誰が面接まで残っているのか、という情報を知りたいのではないだろうか。アメリカの物理関連分野では、そうした公募情報の\u0026quot;うわさ\u0026quot;を掲載している web サイトがある。CM/AMO Rumor Millである。公募情報はもちろん、誰がどの大学の面接に呼ばれたか、誰がオファーを受け、誰が断ったかなどが書いてある。※あくまで\u0026quot;うわさ\u0026quot;である。","title":"公募状況のうわさ"},{"content":"東大に在学していた頃は時代錯誤社が発行している「逆評定」という邪神・大鬼・鬼・仏・大仏・神などの指標で学生が大学の先生を評価するキャンパスマガジンにとてもお世話になったが、そのような媒体は欧米圏（主にアメリカ）でも存在するらしい。Rate My Professorsという web サイトである。\nちなみに現ボス（ポスドク時代のボス）の評価はこちらである。\n","permalink":"https://www.yusaito.com/blog/posts/other/rate-my-professors/","summary":"東大に在学していた頃は時代錯誤社が発行している「逆評定」という邪神・大鬼・鬼・仏・大仏・神などの指標で学生が大学の先生を評価するキャンパスマガジンにとてもお世話になったが、そのような媒体は欧米圏（主にアメリカ）でも存在するらしい。Rate My Professorsという web サイトである。\nちなみに現ボス（ポスドク時代のボス）の評価はこちらである。","title":"海外版逆評定"},{"content":"初めてアメリカに来たのは、修士 1 年の頃、アメリカ物理学会＠デンバー（APS March Meeting）に参加したときのことだった。それから 4 年半後にアメリカ（カリフォルニア・サンタバーバラ）で生活することになるとは夢にも思ってなかった。\nサンタバーバラは海がとてもきれいなリゾート地である一方、リゾート地であるが故に田舎なので例えばニューヨークやボストン、ロサンゼルスなどと比べたらほとんど日本人がいない。もちろん知り合いなどもいなかった。そのためネット上で日本語で検索できる情報にはかなり限りがあり、事前準備や生活のセットアップで未知数なところがいろいろあった。そこで、もしサンタバーバラを含め、アメリカの都市部/田舎でポスドクなどを始める場合に参考になればと思い、そして自分が万が一またアメリカに行くことになった場合の備忘録として自分の場合の（でもある程度汎用的な）海外生活ミニマムセットアップを書き残してみる。\n渡米前 ビザの取得（渡米 2-3 ヶ月前 ビザが無ければ入国できないので最重要事項である。ポスドクで行く場合はJ1 ビザが必要。取得は他の H1B などの労働ビザに比べたら圧倒的に簡単。普通は落ちないらしい。詳細情報/必要書類は公式 webを参照。DS2019（滞在/労働許可証のようなものでビザと同程度に重要）などの必要書類を大学から手に入れたら（大学の事務は遅いことがあるので、必要であればリマンドを絶えず送ったほうが良い）、面接の予約が埋まってたりするので例えば出国 2-3 ヶ月前に準備を始めるほうが良い。\n※以下の渡米前の準備は必ずしも必須ではないし、個人の価値観に左右される部分だと思う。私は渡米直後の面倒を最小限にするために行った。\n銀行口座の開設（渡米 1-2 ヶ月前） 銀行口座は渡米後にももちろん開設できるし、その場合は Chase 銀行が人気である。私は渡米後の面倒を 1 つ減らすために渡米前に日本にいながら現地のユニオン・バンクの口座を開設できる三菱 UFJ 銀行のパシフィックリム・カンパニーベネフィット・プログラムを利用した。日本に本帰国後も口座を閉じる必要はなく利用可能である。\n家探し（渡米 1 ヶ月前） 家探しは渡米後でもできるし、実際の部屋を見てから決めたいという人も多くいると思う。私は決め打ちでどんとこい派なので日本から契約できるなら契約したかった。ネットで調べるといろいろな方法があるが、例えば大学関係者の場合は\u0026quot;大学名　Housing\u0026quot;で検索すると専用の web がある場合があり、そこから探すこともできる。私は UCSB の housing 専用サイトから探して、渡米前に決め打ちで契約した。すでに現地の口座とそれに付随するクレジットデビットを持っていたので契約は楽だった。サンタバーバラの治安の良さは日本と同等以上なので（サンタバーバラはアメリカではない、と言われるくらいに治安が良い）、家の場所を考える際に治安はそこまで考慮しなかったけど、そうでなければ治安が比較的に良い場所の部屋を借りるのが良いと思う。部屋タイプとして単身または夫婦で住む場合は、Studio(日本で言うところの 1K)かone bedroom(日本で言うところの 1LDK)がちょうど良いと思う。2021 年のサンタバーバラの平均家賃は Studio で 1000-1500USD/月、one bedroom で 1500-2000USD/月くらいである。(毎年値上がりしている。)\n荷物を船便で発送（渡米 3 週間前） 家が決まったので、必要な荷物を現地の住所にクロネコヤマトの海外引越単身プランで送った。ダンボール 9 箱分のミニマムコースで料金はおよそ 10 万円。服や下着、靴（現地だとサイズが合わないかもしれないので）、デスクトップ PC、モニター x2, 炊飯器(大半のものは渡米後に揃うけど、ご飯が食べたい人は炊飯器は日本で買って送ったほうが良い気がする)、シャンプー、リンス、ボディーソープなどを送った。場合にもよるが、平時であれば 1 ヶ月程度で届く。本などは渡米前に可能な限り PDF 化した。\n現地で使える SIM カードを Hanacell で契約（渡米 2-3 週間前） これも渡米後に契約できるし、現地のプランの方がお得かもしれない（あまり調べていない）が面倒くさがりの私は日本で渡米直前に契約した。大学と家との往復なので基本的に Wifi しか使わないし、モバイル通信であまり困ったことはない。\n渡米後 ※実際に最初に住んだ場所はシェアハウスだったので電気ガスの契約と必要な家具の注文は必要なく、それらについては現地で引っ越し後の話である。\n電気・ガス・水道・ネットなどの契約（渡米直前 or 初日） これらが無ければ生活できないので初日あるいは渡米直前にネットまたは電話で契約する。\n必要な家具を注文（渡米初日） 寝具がなければ始まらないので、寝具を買いに行き、Amazon などでその他家具（机や椅子など）を注文。\n職場の ID カードや雇用者番号の取得 初出勤日にいろいろ手続きして雇用者番号と ID カードを取得。職場の健康保険にも加入する。\nソーシャルセキュリティーナンバー（SSN）の取得（渡米後 1 ヶ月以内） 現地で雇用されている場合は必須の納税者番号である。（海外学振など日本から給料が支払われている場合はどうなのか良くわからない。）雇用者番号などの情報が大学のシステムに反映されたら（1-2 週間くらいかかった）、最寄りのソーシャル・セキュリティー・アドミニストレーションオフィスに行き、SSN を取得する。毎年 4 月 15 日が（日本でいうところの）確定申告の締め切り日なので忘れずに行う。ちなみに私達、国外からの一時的な労働者にとって最も大事なもの（書類）はパスポート、ビザ、労働滞在許可証（例えば DS2019）であるが、アメリカ国民にとって命の次に大事なのは SSN と言われるくらい大事なものなのである。\n運転免許の取得（必要であればなるべくはやく） 私は運転免許を取らなかったので詳細は分からないが、よほどの都市部でない限りは運転免許があったほうが便利だと思う。（生活には困らなかった。）パスポートの代わりに身分証明書にもなる。\n","permalink":"https://www.yusaito.com/blog/posts/us-life/setup-life-in-us/","summary":"初めてアメリカに来たのは、修士 1 年の頃、アメリカ物理学会＠デンバー（APS March Meeting）に参加したときのことだった。それから 4 年半後にアメリカ（カリフォルニア・サンタバーバラ）で生活することになるとは夢にも思ってなかった。\nサンタバーバラは海がとてもきれいなリゾート地である一方、リゾート地であるが故に田舎なので例えばニューヨークやボストン、ロサンゼルスなどと比べたらほとんど日本人がいない。もちろん知り合いなどもいなかった。そのためネット上で日本語で検索できる情報にはかなり限りがあり、事前準備や生活のセットアップで未知数なところがいろいろあった。そこで、もしサンタバーバラを含め、アメリカの都市部/田舎でポスドクなどを始める場合に参考になればと思い、そして自分が万が一またアメリカに行くことになった場合の備忘録として自分の場合の（でもある程度汎用的な）海外生活ミニマムセットアップを書き残してみる。\n渡米前 ビザの取得（渡米 2-3 ヶ月前 ビザが無ければ入国できないので最重要事項である。ポスドクで行く場合はJ1 ビザが必要。取得は他の H1B などの労働ビザに比べたら圧倒的に簡単。普通は落ちないらしい。詳細情報/必要書類は公式 webを参照。DS2019（滞在/労働許可証のようなものでビザと同程度に重要）などの必要書類を大学から手に入れたら（大学の事務は遅いことがあるので、必要であればリマンドを絶えず送ったほうが良い）、面接の予約が埋まってたりするので例えば出国 2-3 ヶ月前に準備を始めるほうが良い。\n※以下の渡米前の準備は必ずしも必須ではないし、個人の価値観に左右される部分だと思う。私は渡米直後の面倒を最小限にするために行った。\n銀行口座の開設（渡米 1-2 ヶ月前） 銀行口座は渡米後にももちろん開設できるし、その場合は Chase 銀行が人気である。私は渡米後の面倒を 1 つ減らすために渡米前に日本にいながら現地のユニオン・バンクの口座を開設できる三菱 UFJ 銀行のパシフィックリム・カンパニーベネフィット・プログラムを利用した。日本に本帰国後も口座を閉じる必要はなく利用可能である。\n家探し（渡米 1 ヶ月前） 家探しは渡米後でもできるし、実際の部屋を見てから決めたいという人も多くいると思う。私は決め打ちでどんとこい派なので日本から契約できるなら契約したかった。ネットで調べるといろいろな方法があるが、例えば大学関係者の場合は\u0026quot;大学名　Housing\u0026quot;で検索すると専用の web がある場合があり、そこから探すこともできる。私は UCSB の housing 専用サイトから探して、渡米前に決め打ちで契約した。すでに現地の口座とそれに付随するクレジットデビットを持っていたので契約は楽だった。サンタバーバラの治安の良さは日本と同等以上なので（サンタバーバラはアメリカではない、と言われるくらいに治安が良い）、家の場所を考える際に治安はそこまで考慮しなかったけど、そうでなければ治安が比較的に良い場所の部屋を借りるのが良いと思う。部屋タイプとして単身または夫婦で住む場合は、Studio(日本で言うところの 1K)かone bedroom(日本で言うところの 1LDK)がちょうど良いと思う。2021 年のサンタバーバラの平均家賃は Studio で 1000-1500USD/月、one bedroom で 1500-2000USD/月くらいである。(毎年値上がりしている。)\n荷物を船便で発送（渡米 3 週間前） 家が決まったので、必要な荷物を現地の住所にクロネコヤマトの海外引越単身プランで送った。ダンボール 9 箱分のミニマムコースで料金はおよそ 10 万円。服や下着、靴（現地だとサイズが合わないかもしれないので）、デスクトップ PC、モニター x2, 炊飯器(大半のものは渡米後に揃うけど、ご飯が食べたい人は炊飯器は日本で買って送ったほうが良い気がする)、シャンプー、リンス、ボディーソープなどを送った。場合にもよるが、平時であれば 1 ヶ月程度で届く。本などは渡米前に可能な限り PDF 化した。\n現地で使える SIM カードを Hanacell で契約（渡米 2-3 週間前） これも渡米後に契約できるし、現地のプランの方がお得かもしれない（あまり調べていない）が面倒くさがりの私は日本で渡米直前に契約した。大学と家との往復なので基本的に Wifi しか使わないし、モバイル通信であまり困ったことはない。","title":"アメリカ生活ミニマムセットアップ（ポスドク＠サンタバーバラ版）"},{"content":"前書き 渡米直後は半分以上英語が聞き取れず、非常に苦労した。聞くだけでもこんなに苦労したのだから、話す方が 3 歳児以下だったのは想像に難くない。今考えても（話せなさすぎて）クビにならなかったのが不思議なくらいである。クビにならなかったのは、ラボのデフォルトのコミュニケーションツールが slack だったからかもしれない。（slack, もっといえば email がない時代だったら僕は 1 週間でクビになるレベルだったし、そもそも採用されていないと思う）対面でも最大限コミュニケーションをとるように努力したとはいえ、最初の 3 ヶ月いや半年くらいはコミュニケーションの面で非常に迷惑をかけてしまったと思うと大変申し訳ない。これでも渡米前の半年は英会話教室に行きつつ、海外ドラマを英語字幕で見るなど一応の努力はしたつもりだった。あれほど英語がしゃべれたら、あるいはリスニングだけでも日本語レベルでできればと思った期間はなかったと思う。\n3 年弱の間、メンバーの半分くらいがネイティブの環境で仕事をしたかいもあり、少なくともリスニング力に関しては格段に向上したと思う（当社比）。専門のディスカッションではあれば（知らない単語がない限り）90%は聞き取れる\u0026quot;気がするし\u0026quot;, 日常会話でもローカルネタでなければ 80%は聞き取れるようになった\u0026quot;気がする\u0026quot;。スピーキングも毛が生えた程度には向上したと思う。\n本題 渡米当初の英語の苦労の要因はいろいろあるが、発音がわからず聞き取れない以外で大きな要因を上げるとしたら、日本の中学で習うような単語の組み合わせのはずなのに聞き取れても初見で意味を汲み取れないものが思いの他多かった点だと思う。特に頻出だった初見で難しい、しかし簡単な英語表現をいくつか列挙してみる。以下の各コメントは、完全に私の主観で、英語の専門家の解説では決してない。1 と 2 が個人的にぶっちぎりで初見殺しの表現である。\nI would 〜 (例) I would try this experiment.\n(訳) 私\u0026quot;なら\u0026quot;この実験をする＝＞この実験をやってくれ。（丁寧な命令表現）\nI would 自体は例えば丁寧な表現、あるいは婉曲するために使われるというのはどこかで習った気がするし、これは間違いではないと思う。ただ上記の I would の使い方は初見殺しで、どこかの web ページによると If I were you, が省略されている仮定法の表現らしい。したがって訳は、私\u0026quot;なら\u0026quot;この実験をする、つまり、この実験をやってくれ（これを命令と捉えるか、提案ととらえるかは文脈にもよる）、となる。多分仕事を指示する、あるいは代案を提案する場面だと頻出の使い方なのではないかと思う。ついつい You should と言ってしまいたくなる場面で I would を使えるとネイティブに一歩近づけるのではないかと思う。これとは違う使い方だけど、I think の婉曲版に I would say というのもあって、これも一日に何回も聞く表現である。\nwant to 〜 (例) Wanna grab food? (正式 ver. Do you want to grab food?)\n(訳) 何か食べにいかない？ (この場合は let\u0026rsquo;s とほぼ同義だけど、〜してくれない？みたいなお願いの意味になるときもある)\nこの例文の grab food（食べに行く）もなかなかの初見殺しだけど、want to の意味を知ったときにはそんなん知らんわってなった。恥ずかしながら want to といえば中学で習った「〜したい」の意味しか知らなかった。英語圏に行くときに Do you want to 〜? あるいは単に Wanna 〜?と聞かれたら脳内で Let\u0026rsquo;s または Can you に変換すると良いと思う。これの亜種に Do you want me to 〜（私に〜してほしい？つまり、私が〜しましょうか）もあってこれは、Shall I とほぼ同義である。\nwalk through 〜 (あるいは walk 人 through 〜) (例) Can you walk through this process?\n(訳) このプロセスを一通り説明してくれる？\nExplain とほぼ同義。知らないと知らないイディオムである。ラボでも頻出だし、多分ビジネスの場でも頻出だと思う。\nI am not big fan of 〜 (例) I am not big fan of baseball.\n(訳) 私は野球が好きじゃないんだ。\n要するに、I don\u0026rsquo;t like。英語での婉曲表現。英語（あるいはアメリカでは？）では否定的なことを言うときにこのような婉曲表現を用いることが多いと思う。多分ストレートに I don\u0026rsquo;t like というと強すぎる印象を与えてしまうのだと思う。他にもいろいろあった気がするが思い出せない。\nmight want to 〜 (例) You might want to look over this document in advance.\n(訳) 前もってこの文書を目を通しておいた方が良い。\nこれも婉曲表現で、「～したほうが良い」の意味。slack 上であるいは論文の査読コメントでよく見かける。口語では比較的聞かないので書き言葉なのだろうか（私が聞き取れていない可能性が多分にある。）\nDo you mind if I〜 または単に Mind if I〜 (例) Mind if I use this tweezer?\n(訳) このピンセット使ってもいい？\nこれもよく日常で耳にする表現で Can I よりも丁寧な許可を求める表現（これは高校かどこかで習った気がしないでもない）。難しいのが返答で、Mind は「気にする」の意味なので直訳すると、「あなたは、私が〜したら気にする？」の意味になる。「気にしないよ」、と返答する場合は、No が文法的に正しい表現になる。しかし、許可をとっている疑問文にどうぞといいたい場合は Yes と答えてしまいたくなるのが人情である。ネットをいろいろ検索すると、返答例として No, not at all とか Sure, go ahead などが出てくる（Sure 自体は返答として文法的には正しくない。）要するに Yes、No だけでなく一言付加的に Go ahead や Not at all, please do so など付け加えることで誤解がなくせて良いということらしい。ちなみに私はピンセットが英語で tweezer であることをアメリカに行くまで知らなかった。\nworks for me (例) That works for me。\n(訳) 私はそれでいいよ。\n「この日のこの時間でどう？」という質問に対して「それで問題ないよ」という返事をする場合に使う。このような質問に対してはこの返答一択なのではないかというくらいよく使われる。works 自体、「うまくいく」という意味でとても良く使われる。例えば「これはうまくいくよ」というときはシンプルに\u0026quot;This works\u0026quot;という。\n\u0026ldquo;This is a pen\u0026quot;の代わりにこういう（単語は簡単な）実用的な英語を中学高校で教えて欲しかった。\nおまけ  take it away : では、はじめて下さい。 At the end of the day : 結局のところ Long story short〜, Bottom line is 〜：結論を言うと one the same page : 認識が同じ  ","permalink":"https://www.yusaito.com/blog/posts/us-life/easy-english/","summary":"前書き 渡米直後は半分以上英語が聞き取れず、非常に苦労した。聞くだけでもこんなに苦労したのだから、話す方が 3 歳児以下だったのは想像に難くない。今考えても（話せなさすぎて）クビにならなかったのが不思議なくらいである。クビにならなかったのは、ラボのデフォルトのコミュニケーションツールが slack だったからかもしれない。（slack, もっといえば email がない時代だったら僕は 1 週間でクビになるレベルだったし、そもそも採用されていないと思う）対面でも最大限コミュニケーションをとるように努力したとはいえ、最初の 3 ヶ月いや半年くらいはコミュニケーションの面で非常に迷惑をかけてしまったと思うと大変申し訳ない。これでも渡米前の半年は英会話教室に行きつつ、海外ドラマを英語字幕で見るなど一応の努力はしたつもりだった。あれほど英語がしゃべれたら、あるいはリスニングだけでも日本語レベルでできればと思った期間はなかったと思う。\n3 年弱の間、メンバーの半分くらいがネイティブの環境で仕事をしたかいもあり、少なくともリスニング力に関しては格段に向上したと思う（当社比）。専門のディスカッションではあれば（知らない単語がない限り）90%は聞き取れる\u0026quot;気がするし\u0026quot;, 日常会話でもローカルネタでなければ 80%は聞き取れるようになった\u0026quot;気がする\u0026quot;。スピーキングも毛が生えた程度には向上したと思う。\n本題 渡米当初の英語の苦労の要因はいろいろあるが、発音がわからず聞き取れない以外で大きな要因を上げるとしたら、日本の中学で習うような単語の組み合わせのはずなのに聞き取れても初見で意味を汲み取れないものが思いの他多かった点だと思う。特に頻出だった初見で難しい、しかし簡単な英語表現をいくつか列挙してみる。以下の各コメントは、完全に私の主観で、英語の専門家の解説では決してない。1 と 2 が個人的にぶっちぎりで初見殺しの表現である。\nI would 〜 (例) I would try this experiment.\n(訳) 私\u0026quot;なら\u0026quot;この実験をする＝＞この実験をやってくれ。（丁寧な命令表現）\nI would 自体は例えば丁寧な表現、あるいは婉曲するために使われるというのはどこかで習った気がするし、これは間違いではないと思う。ただ上記の I would の使い方は初見殺しで、どこかの web ページによると If I were you, が省略されている仮定法の表現らしい。したがって訳は、私\u0026quot;なら\u0026quot;この実験をする、つまり、この実験をやってくれ（これを命令と捉えるか、提案ととらえるかは文脈にもよる）、となる。多分仕事を指示する、あるいは代案を提案する場面だと頻出の使い方なのではないかと思う。ついつい You should と言ってしまいたくなる場面で I would を使えるとネイティブに一歩近づけるのではないかと思う。これとは違う使い方だけど、I think の婉曲版に I would say というのもあって、これも一日に何回も聞く表現である。\nwant to 〜 (例) Wanna grab food? (正式 ver. Do you want to grab food?","title":"初見では難しい、でも単語は簡単な英語表現"},{"content":"一般論 人生は生きてるだけで丸儲けである。生き続けるためには心身を健康に保つことが大切である。したがって、ラボ選びで重要なのは、国内国外限らず心身を健康に保てることができるラボを選ぶことである。特に心理的安全性が保障されているラボを選ぶことが重要であると思う。そんなこと当たり前じゃないかと思う人も多いかもしれないが、当たり前と思っていても実行できないのが人間である。ラボ選びは人生を左右するといっても過言ではないと思う。（さてこんなことを冒頭から偉そうに書いている自分は心身の健康を気にしてラボを選んだのかと言われると後述の通り全くそんなことはないので、私も人間であるし、全くもって説得力がない。）アカハラやパワハラが存在すると予めわかっているならばそういうラボは避けたほうが良いのは言うまでもない。あからさまなアカハラやパワハラが存在しなくともボスやスタッフとの相性が悪く、精神的に来る場合もあるので難しいところである。ある人にとってベストな上司が別の人にとってベストな上司とは限らない。\n次に実験系のラボの場合（ここでいう実験系というのは研究がパソコンだけで完結せず、試薬や生物、大規模な実験装置、ロボットなどを用いる分野を指す）は、なるべく研究設備が整っていて、可能な限り研究費が潤沢なラボを選ぶほうが良い。研究設備とお金が潤沢にあればやりたいことはだいたいなんでもできる。時々研究テーマ\u0026quot;だけで\u0026quot;ラボを選ぶ人を見かけるが、研究テーマだけでラボを選んでも、そもそもそのテーマをやらせてもらえないかもしれないし、研究設備とお金がなければ研究の土俵に立てないかもしれないし、研究の興味が時間とともに変わるかもしれない、のであまりおすすめはしない。（理論系のラボの場合は研究テーマ重視で選んでも問題ないと思う。）研究テーマに関しては\u0026quot;興味がある\u0026quot;あるいは少なくとも\u0026quot;興味がなくはない\u0026quot;くらいでスクリーニングして、あとはなるべく研究設備が整っていてと研究費がたくさんあるラボに行くほうが多くの経験を積めると思う。\nさて以下の 2 つはオプショナルである。上で書いたことに比べたら些細な違いなのであまり気にしなくていいと個人的に思う。\n  大規模な研究室（例えば 20 人以上、この辺の感覚は分野によって違うと思う）か小規模な研究室（5 人くらい？）：どちらも一長一短で英語で検索するとこの手の議論がたくさん出てくるので興味があれば読むと良いといいと思う。\n  いわゆる大御所のラボか立ち上げ直後のラボ：これもラボの立ち上げに関わりたいかそうでないかによる。ちなみに大御所のラボにいっても必ずしも成果が出るとは限らない。成果を出したいなら（そのラボからの）成果が直近でたくさん出ているラボに行ったほうが良いと思う。\n  海外ラボの場合 上記に加え、海外ラボの場合はなるべく非英語圏の特定の人種に偏っていないラボに行くことが重要だと思う。例えば中国人が 90％以上を占めるラボで使われる言語は間違いなく中国語だし、このようなラボに中国人以外の方が入って、数ヶ月や 1 年で去る話はいくつか聞いても、大活躍して論文を出しまくっている例は見たことも聞いたこともない。（もちろん中国語が堪能なら話は違う。）日本人に限らずこの点を見落とす人は意外にも多い。私はネイティブっぽいメンバーが半分以上いるところだけをラボ選びの際に探した。\n自分の場合 学部＆大学院 私の出身の東大物理工学科では研究室選びは 4 年次の最初のじゃんけん大会（2012 年の話、現在はくじ引きらしい）で決まる。希望の研究室を黒板に書いて定員よりも多かったらじゃんけんをして決める。負けたら\u0026quot;相対的に\u0026quot;人気のない研究室に行くことになる。この毎年恒例のじゃんけん大会は、学科のイベントとして１年で最も盛り上がる日の 1 つだったのではないかと思う。私は当時研究テーマだけでラボを選び、運良くじゃんけんを制し、そのラボで学部 4 年から博士 3 年までの 6 年を過ごした。\n海外ポスドク アメリカに行くならカリフォルニア、研究するならカリフォルニア、住むならカリフォルニアという感じで圧倒的にカリフォルニアバイアスがかかった状態でラボ選びを行った。天気が良ければ全てハッピーくらいの能天気ぶりである。学部＆大学院時代のボスが当時 60 歳くらいの教授だったので、逆に独立から数年以内のラボに行ってみたかった。カリフォルニアという条件を除いても、自分の興味、独立から数年以内という条件、上記の通り人種の偏りが少ないという条件、現在成果を出している/これから成果を出しそうという\u0026quot;雰囲気を感じる\u0026quot;ラボはニューヨークに 1 つ、カリフォルニア・サンタバーバラに 1 つ（現在所属のラボ）しかなかった。ちなみに現在所属している UCSB のラボ（雰囲気を感じた方）は、当時ボスが独立から 2 年目のラボだったということもあり、私がメールで応募したとき（2017 年 8-9 月くらい）にはラボの出版論文は 1 つもなかったし、大学院時代のボスは現ボスのことを全く知らなかった。（大学院時代のボスからはコネのあるラボをいくつか紹介されたが、若手のラボではなかったか、もしくは上記の人種のバランスの条件を満たさなかったので、最優先の候補にはしなかった。）メールで応募し、スカイプインタビューなどをした数カ月後、運良く現地の研究機関からElings Prize Fellowshipというポスドクフェローシップを頂けることが決定し、現在所属のラボに行けることになった。当時は論文がまだ 1 本も出ていない立ち上げから間もないラボに行くことに一抹の不安を感じたが、\u0026ldquo;ええい、ままよ\u0026quot;式の意思決定は自分の人生経験上意外にも成功することが多いので、とりあえず出たとこ勝負という気持ちで行くことにして、念願のカリフォルニアでのポスドク生活が始まった。\n","permalink":"https://www.yusaito.com/blog/posts/us-life/how-to-choose-lab/","summary":"一般論 人生は生きてるだけで丸儲けである。生き続けるためには心身を健康に保つことが大切である。したがって、ラボ選びで重要なのは、国内国外限らず心身を健康に保てることができるラボを選ぶことである。特に心理的安全性が保障されているラボを選ぶことが重要であると思う。そんなこと当たり前じゃないかと思う人も多いかもしれないが、当たり前と思っていても実行できないのが人間である。ラボ選びは人生を左右するといっても過言ではないと思う。（さてこんなことを冒頭から偉そうに書いている自分は心身の健康を気にしてラボを選んだのかと言われると後述の通り全くそんなことはないので、私も人間であるし、全くもって説得力がない。）アカハラやパワハラが存在すると予めわかっているならばそういうラボは避けたほうが良いのは言うまでもない。あからさまなアカハラやパワハラが存在しなくともボスやスタッフとの相性が悪く、精神的に来る場合もあるので難しいところである。ある人にとってベストな上司が別の人にとってベストな上司とは限らない。\n次に実験系のラボの場合（ここでいう実験系というのは研究がパソコンだけで完結せず、試薬や生物、大規模な実験装置、ロボットなどを用いる分野を指す）は、なるべく研究設備が整っていて、可能な限り研究費が潤沢なラボを選ぶほうが良い。研究設備とお金が潤沢にあればやりたいことはだいたいなんでもできる。時々研究テーマ\u0026quot;だけで\u0026quot;ラボを選ぶ人を見かけるが、研究テーマだけでラボを選んでも、そもそもそのテーマをやらせてもらえないかもしれないし、研究設備とお金がなければ研究の土俵に立てないかもしれないし、研究の興味が時間とともに変わるかもしれない、のであまりおすすめはしない。（理論系のラボの場合は研究テーマ重視で選んでも問題ないと思う。）研究テーマに関しては\u0026quot;興味がある\u0026quot;あるいは少なくとも\u0026quot;興味がなくはない\u0026quot;くらいでスクリーニングして、あとはなるべく研究設備が整っていてと研究費がたくさんあるラボに行くほうが多くの経験を積めると思う。\nさて以下の 2 つはオプショナルである。上で書いたことに比べたら些細な違いなのであまり気にしなくていいと個人的に思う。\n  大規模な研究室（例えば 20 人以上、この辺の感覚は分野によって違うと思う）か小規模な研究室（5 人くらい？）：どちらも一長一短で英語で検索するとこの手の議論がたくさん出てくるので興味があれば読むと良いといいと思う。\n  いわゆる大御所のラボか立ち上げ直後のラボ：これもラボの立ち上げに関わりたいかそうでないかによる。ちなみに大御所のラボにいっても必ずしも成果が出るとは限らない。成果を出したいなら（そのラボからの）成果が直近でたくさん出ているラボに行ったほうが良いと思う。\n  海外ラボの場合 上記に加え、海外ラボの場合はなるべく非英語圏の特定の人種に偏っていないラボに行くことが重要だと思う。例えば中国人が 90％以上を占めるラボで使われる言語は間違いなく中国語だし、このようなラボに中国人以外の方が入って、数ヶ月や 1 年で去る話はいくつか聞いても、大活躍して論文を出しまくっている例は見たことも聞いたこともない。（もちろん中国語が堪能なら話は違う。）日本人に限らずこの点を見落とす人は意外にも多い。私はネイティブっぽいメンバーが半分以上いるところだけをラボ選びの際に探した。\n自分の場合 学部＆大学院 私の出身の東大物理工学科では研究室選びは 4 年次の最初のじゃんけん大会（2012 年の話、現在はくじ引きらしい）で決まる。希望の研究室を黒板に書いて定員よりも多かったらじゃんけんをして決める。負けたら\u0026quot;相対的に\u0026quot;人気のない研究室に行くことになる。この毎年恒例のじゃんけん大会は、学科のイベントとして１年で最も盛り上がる日の 1 つだったのではないかと思う。私は当時研究テーマだけでラボを選び、運良くじゃんけんを制し、そのラボで学部 4 年から博士 3 年までの 6 年を過ごした。\n海外ポスドク アメリカに行くならカリフォルニア、研究するならカリフォルニア、住むならカリフォルニアという感じで圧倒的にカリフォルニアバイアスがかかった状態でラボ選びを行った。天気が良ければ全てハッピーくらいの能天気ぶりである。学部＆大学院時代のボスが当時 60 歳くらいの教授だったので、逆に独立から数年以内のラボに行ってみたかった。カリフォルニアという条件を除いても、自分の興味、独立から数年以内という条件、上記の通り人種の偏りが少ないという条件、現在成果を出している/これから成果を出しそうという\u0026quot;雰囲気を感じる\u0026quot;ラボはニューヨークに 1 つ、カリフォルニア・サンタバーバラに 1 つ（現在所属のラボ）しかなかった。ちなみに現在所属している UCSB のラボ（雰囲気を感じた方）は、当時ボスが独立から 2 年目のラボだったということもあり、私がメールで応募したとき（2017 年 8-9 月くらい）にはラボの出版論文は 1 つもなかったし、大学院時代のボスは現ボスのことを全く知らなかった。（大学院時代のボスからはコネのあるラボをいくつか紹介されたが、若手のラボではなかったか、もしくは上記の人種のバランスの条件を満たさなかったので、最優先の候補にはしなかった。）メールで応募し、スカイプインタビューなどをした数カ月後、運良く現地の研究機関からElings Prize Fellowshipというポスドクフェローシップを頂けることが決定し、現在所属のラボに行けることになった。当時は論文がまだ 1 本も出ていない立ち上げから間もないラボに行くことに一抹の不安を感じたが、\u0026ldquo;ええい、ままよ\u0026quot;式の意思決定は自分の人生経験上意外にも成功することが多いので、とりあえず出たとこ勝負という気持ちで行くことにして、念願のカリフォルニアでのポスドク生活が始まった。","title":"ラボの選び方"},{"content":"結論  よく調べて良い歯医者を選ぼう アメリカで歯の神経を抜く（根管治療）と保険適用で約 4 万円（私の場合）  事の始まり 渡米前に歯医者に行って虫歯などがあれば早めに直しておくように。というのよく耳にする先達からのアドバイスではあるが、私もこれに従い、渡米 3 ヶ月前あたりから家から近い歯医者に行き始めた。\n歯科医院なんてどこでもそんなに変わらないだろうとレビューをよく確認せずに治療を受けたのがが運の尽き。それほど深くない\u0026quot;はずの\u0026quot;虫歯（場所は左下の奥から 2 番目）の歯を部分的に削って治してもらってセラミックの詰め物（セラミックインレー）をしてもらったまではよかったが、いつまで経っても痛い。（セラミックインレーは保険適用外なので 1 つあたり約 5 万円。）食べ物を噛んだら痛い。噛まなくても痛い。アルコールを飲めばもっと痛い。当初はかみ合わせが合ってないからとかセラミックインレーをつける際の接着剤（のようなもの）が歯にしみているから、痛みを引き起こしているなどと説明され、痛み止めを処方されたが、痛み止めがきれればまた痛くなるというように一向によくならない。その時点で神経が傷ついたのではないかと思ったが、渡米直前にややこしい状況になるのは避けたかったのでその治療を受けた医院で神経の話題は出さなかったし、他の歯科医院にも行かなかった（もし虫歯が神経に達していればかなり痛いはずだが、私自身は冷たいものや甘いものを食べてもしみたりはしていなかった。実際にどれくらい虫歯が深かったかは治療を担当した歯科医にしか分からない。）\n渡米後 さてそんなこんなで渡米まで——ならましだったのだけれど、新婚旅行で行ったボラボラ島でも、そして残念ながらに 2018 年 10 月に渡米してからも歯の痛みは続き、サンタバーバラのポスドク生活は歯の痛みとともに始まった。（ポスドク生活はまた別の記事にしようと思う。）この痛みが続いている間は市販の痛み止めの代表である EVE など（実際に使っていたのはその中でも特に強そうな EVE QUICK DX）を 6-8 時間間隔で常に服用していた。アメリカ生活が始まって 1-2 ヶ月くらいは、全く新しい環境で、全く異なる言語での環境で、種々の手続きをしたり装置の使い方を覚えたり、文字通り毎日を生きるのに精一杯で歯の問題に関しては忘れつつあった。当時はよく調べもせずにアメリカの医療費は高いという先入観（日本と比べて高いのはかなり事実）からアメリカの歯科医に行くことは選択肢に入ってなかったし、半年後か 1 年後か次に日本に帰国するときに保険適用外でもどこかましな歯科医に診てもらおうと思っていた。実際に生活に支障が出るほど痛むわけでもないし、そのうち治るんじゃないかという淡い期待さえあった。\n事は 2019 年 1 月 11 日に起こった。その日は朝からいつにも増して歯が痛かった。ラボから帰って来たのは夜 10 時ごろ。その帰宅直後に立っていられないくらいの激痛で自分の部屋で蹲ってしまった。例えてみるなら、麻酔なしで歯をドリルで貫通させている感じ。その劇的な痛みが続いたのは 5 分か 10 分くらいで、突然その痛みはかなり和らいだ。そのとき私は、あ、これは神経が逝ったんじゃないかと悟った。とはいっても仕事中にまたこの痛みがきたら作業内容的に危険なので急いで歯の神経を専門に扱っている歯内治療専門医（Endodontist）を検索して、今回はちゃんとレビューにも目を通し、web 上での評判が素晴らしかったDr. Patmoreにメールを送って、保険適用可能かどうかだけ聞いて、運良くすぐにアポをとることができた。\n根管治療を経て アポをとった当日に訪問し、レントゲン写真をとってもらい、診察を受けると開口一番「こりゃ神経が死んでますね」だった。（多分\u0026quot;Your nerve is dead.\u0026ldquo;みたいな簡単な表現だったのでこの英語だけは聞き取れた。それ以外は専門用語のオンパレード\u0026hellip;）根管治療自体は 1 時間程度で終わったと思う。アメリカでの歯科医も神経を抜いたのも全てが人生初で、心の中では後は野となれ山となれ状態だったのでこのあたりの記憶は結構あいまいである。英語の説明は全くわからなかったけれど、治療が終わって会計に進むと保険適用後の治療費が 4 万円というの見て、とりあえずほっとしたのを覚えている。治療費が高いアメリカなら 20-30 万くらいは請求されるんじゃないかと戦々恐々としていたので。ちなみに保険適用前の治療費は 20 万円くらいだった。何はともあれ、治療は無事終了し、この日から歯の痛みから開放されてようやく本当のアメリカ生活が始まった。渡米から既に 3 ヶ月と少し経ったころであった。\n","permalink":"https://www.yusaito.com/blog/posts/us-life/root-canal-treatment/","summary":"結論  よく調べて良い歯医者を選ぼう アメリカで歯の神経を抜く（根管治療）と保険適用で約 4 万円（私の場合）  事の始まり 渡米前に歯医者に行って虫歯などがあれば早めに直しておくように。というのよく耳にする先達からのアドバイスではあるが、私もこれに従い、渡米 3 ヶ月前あたりから家から近い歯医者に行き始めた。\n歯科医院なんてどこでもそんなに変わらないだろうとレビューをよく確認せずに治療を受けたのがが運の尽き。それほど深くない\u0026quot;はずの\u0026quot;虫歯（場所は左下の奥から 2 番目）の歯を部分的に削って治してもらってセラミックの詰め物（セラミックインレー）をしてもらったまではよかったが、いつまで経っても痛い。（セラミックインレーは保険適用外なので 1 つあたり約 5 万円。）食べ物を噛んだら痛い。噛まなくても痛い。アルコールを飲めばもっと痛い。当初はかみ合わせが合ってないからとかセラミックインレーをつける際の接着剤（のようなもの）が歯にしみているから、痛みを引き起こしているなどと説明され、痛み止めを処方されたが、痛み止めがきれればまた痛くなるというように一向によくならない。その時点で神経が傷ついたのではないかと思ったが、渡米直前にややこしい状況になるのは避けたかったのでその治療を受けた医院で神経の話題は出さなかったし、他の歯科医院にも行かなかった（もし虫歯が神経に達していればかなり痛いはずだが、私自身は冷たいものや甘いものを食べてもしみたりはしていなかった。実際にどれくらい虫歯が深かったかは治療を担当した歯科医にしか分からない。）\n渡米後 さてそんなこんなで渡米まで——ならましだったのだけれど、新婚旅行で行ったボラボラ島でも、そして残念ながらに 2018 年 10 月に渡米してからも歯の痛みは続き、サンタバーバラのポスドク生活は歯の痛みとともに始まった。（ポスドク生活はまた別の記事にしようと思う。）この痛みが続いている間は市販の痛み止めの代表である EVE など（実際に使っていたのはその中でも特に強そうな EVE QUICK DX）を 6-8 時間間隔で常に服用していた。アメリカ生活が始まって 1-2 ヶ月くらいは、全く新しい環境で、全く異なる言語での環境で、種々の手続きをしたり装置の使い方を覚えたり、文字通り毎日を生きるのに精一杯で歯の問題に関しては忘れつつあった。当時はよく調べもせずにアメリカの医療費は高いという先入観（日本と比べて高いのはかなり事実）からアメリカの歯科医に行くことは選択肢に入ってなかったし、半年後か 1 年後か次に日本に帰国するときに保険適用外でもどこかましな歯科医に診てもらおうと思っていた。実際に生活に支障が出るほど痛むわけでもないし、そのうち治るんじゃないかという淡い期待さえあった。\n事は 2019 年 1 月 11 日に起こった。その日は朝からいつにも増して歯が痛かった。ラボから帰って来たのは夜 10 時ごろ。その帰宅直後に立っていられないくらいの激痛で自分の部屋で蹲ってしまった。例えてみるなら、麻酔なしで歯をドリルで貫通させている感じ。その劇的な痛みが続いたのは 5 分か 10 分くらいで、突然その痛みはかなり和らいだ。そのとき私は、あ、これは神経が逝ったんじゃないかと悟った。とはいっても仕事中にまたこの痛みがきたら作業内容的に危険なので急いで歯の神経を専門に扱っている歯内治療専門医（Endodontist）を検索して、今回はちゃんとレビューにも目を通し、web 上での評判が素晴らしかったDr. Patmoreにメールを送って、保険適用可能かどうかだけ聞いて、運良くすぐにアポをとることができた。\n根管治療を経て アポをとった当日に訪問し、レントゲン写真をとってもらい、診察を受けると開口一番「こりゃ神経が死んでますね」だった。（多分\u0026quot;Your nerve is dead.\u0026ldquo;みたいな簡単な表現だったのでこの英語だけは聞き取れた。それ以外は専門用語のオンパレード\u0026hellip;）根管治療自体は 1 時間程度で終わったと思う。アメリカでの歯科医も神経を抜いたのも全てが人生初で、心の中では後は野となれ山となれ状態だったのでこのあたりの記憶は結構あいまいである。英語の説明は全くわからなかったけれど、治療が終わって会計に進むと保険適用後の治療費が 4 万円というの見て、とりあえずほっとしたのを覚えている。治療費が高いアメリカなら 20-30 万くらいは請求されるんじゃないかと戦々恐々としていたので。ちなみに保険適用前の治療費は 20 万円くらいだった。何はともあれ、治療は無事終了し、この日から歯の痛みから開放されてようやく本当のアメリカ生活が始まった。渡米から既に 3 ヶ月と少し経ったころであった。","title":"アメリカで歯の神経を抜いた話"},{"content":"2014/03 APS March Meeting @ デンバー, USA 2015/08 M2S 2015 @ ジュネーブ, スイス 2015/08 PILS 2015 @ ストックホルム, スウェーデン  2016/03 APS March Meeting @ ボルチモア, USA 2016/08 FET2016 @ ミネソタ, USA  2017/04 IEEE International Magnetics Conference @ ダブリン, アイルランド 2017/08 28th International Conference on Low Temperature Physics (LT28) @ ヨーテボリ, スウェーデン  2017/08 XXVI International Materials Research Congress 2017 @ カンクン, メキシコ 2017/11 Superthin 2017 Superconductivity in atomically thin materials and heterostructures @ ルガーノ, スイス  2018/09 EMRS 2018 Fall meeting @ ワルシャワ, ポーランド  2019/03 APS March Meeting @ ボストン, USA ","permalink":"https://www.yusaito.com/blog/posts/other/conference-highlight/","summary":"2014/03 APS March Meeting @ デンバー, USA 2015/08 M2S 2015 @ ジュネーブ, スイス 2015/08 PILS 2015 @ ストックホルム, スウェーデン  2016/03 APS March Meeting @ ボルチモア, USA 2016/08 FET2016 @ ミネソタ, USA  2017/04 IEEE International Magnetics Conference @ ダブリン, アイルランド 2017/08 28th International Conference on Low Temperature Physics (LT28) @ ヨーテボリ, スウェーデン  2017/08 XXVI International Materials Research Congress 2017 @ カンクン, メキシコ 2017/11 Superthin 2017 Superconductivity in atomically thin materials and heterostructures @ ルガーノ, スイス  2018/09 EMRS 2018 Fall meeting @ ワルシャワ, ポーランド  2019/03 APS March Meeting @ ボストン, USA ","title":"国際会議ハイライト"},{"content":"今日からカリフォルニア・サンタバーバラでの生活が始まった。 ロサンゼルス空港から出たあとはサンターバーバラシャトルバスに乗ってサンタバーバラに向かう。  アイラビスタの Trigo Rd.にあるシェアハウスでまず生活を立げていく。\n ","permalink":"https://www.yusaito.com/blog/posts/us-life/first-day-in-santabarbara/","summary":"今日からカリフォルニア・サンタバーバラでの生活が始まった。 ロサンゼルス空港から出たあとはサンターバーバラシャトルバスに乗ってサンタバーバラに向かう。  アイラビスタの Trigo Rd.にあるシェアハウスでまず生活を立げていく。\n ","title":"First day in Santa Barbara"}]