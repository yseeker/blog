<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>YS&#39;s blog</title>
    <link>https://www.yusaito.com/blog/</link>
    <description>Recent content on YS&#39;s blog</description>
    <image>
      <url>https://www.yusaito.com/blog/papermod-cover.png</url>
      <link>https://www.yusaito.com/blog/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 19 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.yusaito.com/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python並列処理：MPIREの使い方</title>
      <link>https://www.yusaito.com/blog/posts/tech/python/how-to-use-mpire-multiprocess/</link>
      <pubDate>Sat, 19 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/tech/python/how-to-use-mpire-multiprocess/</guid>
      <description>Python では joblib や concurrent.futures などで簡単にマルチプロセスできるが、&amp;ldquo;MultiProcessing Is Really Easy&amp;quot;という名の MPIRE というライブラリを見つけたので備忘録として残しておく。この記事によると、特定の場合では joblib や concurrent.futures よりも性能が良いらしい。
MPIRE のインストール pip install mpire MPIRE の使い方 from mpire import WorkerPool def time_consuming_function(param): return None with WorkerPool(n_jobs=8) as pool: results = pool.map_unordered(time_consuming_function, interator, progress_bar=True) 参考   </description>
    </item>
    
    <item>
      <title>PythonとopenCVで並列化</title>
      <link>https://www.yusaito.com/blog/posts/tech/python/opencv-setnumthreads-multithreading/</link>
      <pubDate>Fri, 18 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/tech/python/opencv-setnumthreads-multithreading/</guid>
      <description>openCV でマルチプロセス化しようとしてもシングルプロセスになっている問題に遭遇 Python で openCV を使った処理をマルチプロセス化してみたのだが、どうもシングルプロセスになってしまうという問題に遭遇した。
解決策：cv2.setNumThreads(0)＆マルチプロセスをやめる。 cv2.setNumThreads(0) を加えて、かつマルチスレッド化（例えば、concurrent.future.ThreadPoolExecuterなど）することで効率的に並列処理可能になることが分かった。 cv2.setNumThreads(0)有りでもconcurrent.future.ProcessPoolExecuterでは、正しくマルチプロセスされなかった。
以下テンプレート。
import cv2 from concurrent.futures import ThreadPoolExecutor cv2.setNumThreads(0) def task_using_cv2(param): do_some_process_using_cv2() return with ThreadPoolExecutor() as executor: results = list(executor.map(task_using_cv2, param)) 参考   </description>
    </item>
    
    <item>
      <title>joblibの使い方</title>
      <link>https://www.yusaito.com/blog/posts/tech/python/how-to-use-joblib/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/tech/python/how-to-use-joblib/</guid>
      <description>joblib には主な機能として、1) 時間がかかる処理のキャッシュ化, 2)並列処理, 3)圧縮書き出しと読み込み、がある。
joblib のインストール pip install joblib joblib の主な機能 時間がかかる処理のキャッシュ化 (Memory) 途中で止まってしまったら困る数分とか数時間とかかかる処理のキャッシュをとっておきたいときに使う。
from joblib import Memory cachedir = &amp;#39;cache_dir&amp;#39; mem = Memory(cachedir) square = mem.cache(heavy_task_func) b = do_time_consuming_func(a) ###　並列処理 (Parallel, delayed)
デフォルトはマルチプロセスだが、マルチスレッドも選択可能。
マルチプロセス（デフォルト） from joblib import Parallel, delayed Parallel(n_jobs=-1)(delayed(task_func)(param) for param in iterator) マルチスレッド Parallel(n_jobs=-1, backend=&amp;#39;threading&amp;#39;)(delayed(task_func)(param) for param in iterator) オブジェクトの圧縮書き出し（永続化）と読み込み（dump, load） 書き出し（永続化） joblib.dump(object,file_path,compress=3) 読み込み object = joblib.load(file_path) 参考  </description>
    </item>
    
    <item>
      <title>Ubuntu 20.04 LTSセットアップ（自宅サーバー用）とリモート環境用の諸々の初期設定（docker &#43; cuda &#43; ssh &#43; vscode）</title>
      <link>https://www.yusaito.com/blog/posts/tech/linux/ubuntu-server-ssh-docker-setup/</link>
      <pubDate>Sat, 05 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/tech/linux/ubuntu-server-ssh-docker-setup/</guid>
      <description>Ubuntu 20.04 LTS の導入 こちらの記事に従って、Ubuntu 20.04 LTS を入れた。
ライブ USB の作成  Rufus をダウンロード ubuntu の iso ファイルをダウンロード USB を挿して、Rufus を使ってライブ USB を作成  Ubuntu 20.04 LTS のインストール  細かい設定はこちらの記事を参照  インストール後にログインループになってログインできなくなった  ctrl + alt + F2で tty 仮想コンソールを開く Nvidia ドライバ, cuda があるかどうか確認  dpkg -l | grep nvidia dpkg -l | grep cuda ※もしですでにある場合は削除しておく
sudo apt-get --purge remove nvidia-* sudo apt-get --purge remove cuda-*  Nvidia ドライバが無かったら下記で Nvidia ドライバと cuda を入れる  sudo ubuntu-drivers install sudo reboot または version 指定して入れる。</description>
    </item>
    
    <item>
      <title>Ryzen Threadripper 3970XとNVIDIA RTX 3090を使ってnumpy(Intel MKL and OpenBLAS)とcupyでベンチマーク</title>
      <link>https://www.yusaito.com/blog/posts/tech/python/numpy-benchmark-ryzen-threadripper/</link>
      <pubDate>Mon, 28 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/tech/python/numpy-benchmark-ryzen-threadripper/</guid>
      <description>numpy でベンチマーク # ファイル名: numpy_benchmark.py import os os.environ[&amp;#34;OPENBLAS_NUM_THREADS&amp;#34;] = &amp;#34;32&amp;#34; # import mkl # mkl.set_num_threads(32) import numpy as np import time from threadpoolctl import threadpool_info from pprint import pp pp(threadpool_info()) np.show_config() N_LOOP = 5 calc_eigh_time_list = [] calc_inv_time_list = [] calc_dot_time_list = [] calc_norm_time_list = [] for size in [5000, 10000, 20000]: print(f&amp;#34;size : {size}&amp;#34;) for i in range(3): np.random.seed(i) X = np.random.randn(size, size) t_start = time.time() np.linalg.eigh(X @ X.T) calc_eigh_time_list.</description>
    </item>
    
    <item>
      <title>Python:functools.partial 関数の引数を一部固定</title>
      <link>https://www.yusaito.com/blog/posts/tech/python/how-to-use-functools-partial/</link>
      <pubDate>Sat, 26 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/tech/python/how-to-use-functools-partial/</guid>
      <description>functools.partial は、関数の特定の引数を固定したい場合に使う 個人的に concurrent.futures の ProcessPoolExecuter や ThreadPoolExecuter の map を使うときに併用することが多い。
定義 # ref. https://docs.python.org/ja/3/library/functools.html#functools.partial def partial(func, /, *args, **keywords): def newfunc(*fargs, **fkeywords): newkeywords = {**keywords, **fkeywords} return func(*args, *fargs, **newkeywords) newfunc.func = func newfunc.args = args newfunc.keywords = keywords return newfunc 使い方 from functools import partial def product_xyz(x, y, z): return x * y * z # xとyの値を固定する product_z = partial(product_xyz, x=2, y=3) product_z(4) # 24 参考  </description>
    </item>
    
    <item>
      <title>PythonとOpenCVで画像リストから動画を作成</title>
      <link>https://www.yusaito.com/blog/posts/tech/python/create-video-from-images-opencv/</link>
      <pubDate>Sat, 26 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/tech/python/create-video-from-images-opencv/</guid>
      <description>openCV を使って画像リストから動画を作成する。 from pathlib import Path from typing import List import cv2 def list_file_paths(dir_path: str) -&amp;gt; List[str]: &amp;#34;&amp;#34;&amp;#34; List file paths in a directory. Parameters ---------- dir_path : str Path of the directory Returns ------- List[str] List of the file paths in the directory &amp;#34;&amp;#34;&amp;#34; return sorted([str(path) for path in Path(dir_path).rglob(&amp;#34;*&amp;#34;) if path.is_file()]) def create_mp4_video_from_image_path_list( output_video_path: str, image_path_list: List[str], fps: int, ) -&amp;gt; None: &amp;#34;&amp;#34;&amp;#34; Create mp4 video file from a image path list Parameters ---------- output_video_path : str Path of the output video image_path_list : List[str] Path of image file list fps : int fps (frames per second) &amp;#34;&amp;#34;&amp;#34; height, width, _ = cv2.</description>
    </item>
    
    <item>
      <title>Pathlibで相対パスを有効活用する</title>
      <link>https://www.yusaito.com/blog/posts/tech/python/relative-path-with-pathlib/</link>
      <pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/tech/python/relative-path-with-pathlib/</guid>
      <description>自走プログラマー~Python の先輩が教えるプロジェクト開発のベストプラクティス 120を読んだのでその中で気になった「ファイルパスはプログラムからの相対パスで組み立てるという箇所は実践的でとても勉強になったのでメモしておく。
├──　run.py ├──　data ├── input.txt └── images みたいなディレクトリがある場合は
import csv from pathlib import Path current_dir = Path(__file__).parent image_path = current_dir / &amp;#34;data&amp;#34; / &amp;#34;images&amp;#34; inuput_path = current_dir / &amp;#34;input_txt&amp;#34; とすればよい。</description>
    </item>
    
    <item>
      <title>loggerとprintとtqdmの併用</title>
      <link>https://www.yusaito.com/blog/posts/tech/python/tqdm-logging-print/</link>
      <pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/tech/python/tqdm-logging-print/</guid>
      <description>logger と print と tqdm を併用する場合は以下のコードをコピペする。
import contextlib import logging import logging.handlers import sys from time import sleep from tqdm import tqdm from tqdm.contrib import DummyTqdmFile class TqdmLoggingHandler(logging.Handler): colors = {&amp;#34;INFO&amp;#34;: &amp;#34;\033[37m{}\033[0m&amp;#34;} def __init__(self, level=logging.NOTSET): super().__init__(level) def emit(self, record): try: record.msg = TqdmLoggingHandler.colors.get(record.levelname, &amp;#34;{}&amp;#34;).format( record.msg ) msg = self.format(record) tqdm.write(msg, file=sys.stderr) self.flush() except Exception: self.handleError(record) class CustomFormatter(logging.Formatter): grey = &amp;#34;\x1b[38;20m&amp;#34; green = &amp;#34;\x1b[32;20m&amp;#34; yellow = &amp;#34;\x1b[33;20m&amp;#34; red = &amp;#34;\x1b[31;20m&amp;#34; bold_red = &amp;#34;\x1b[31;1m&amp;#34; reset = &amp;#34;\x1b[0m&amp;#34; format = &amp;#34;[%(asctime)s] [%(levelname)s] [%(process)d] [%(name)s] [%(funcName)s] [%(lineno)d] %(message)s&amp;#34; FORMATS = { logging.</description>
    </item>
    
    <item>
      <title>Pythonでファイルリストからの並列処理</title>
      <link>https://www.yusaito.com/blog/posts/tech/python/multiprocess-multithreading-utils/</link>
      <pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/tech/python/multiprocess-multithreading-utils/</guid>
      <description>ファイルのリストを受け取って何らかの並列処理をする。 from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor from functools import partial from pathlib import Path from typing import List def list_file_paths(dir_path: str) -&amp;gt; List[str]: &amp;#34;&amp;#34;&amp;#34; List file paths in a directory. Parameters ---------- dir_path : str Path of the directory Returns ------- List[str] List of the file paths in the directory &amp;#34;&amp;#34;&amp;#34; return sorted([str(path) for path in Path(dir_path).rglob(&amp;#34;*&amp;#34;) if path.is_file()]) def task(same_value, same_value2, diffent_values): return None def multiprocess_task(task, same_value, same_value2, diffent_values): with ProcessPoolExecutor() as executor: results = list(executor.</description>
    </item>
    
    <item>
      <title>Pythonでjpgからpngへ一括変換</title>
      <link>https://www.yusaito.com/blog/posts/tech/python/image-convert-jpg-png-multiprocess/</link>
      <pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/tech/python/image-convert-jpg-png-multiprocess/</guid>
      <description>jpg から png への一括変換 (マルチプロセス) from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor from functools import partial from pathlib import Path from typing import List from PIL import Image, ImageFile ImageFile.LOAD_TRUNCATED_IMAGES = True def list_file_paths(dir_path: str) -&amp;gt; List[str]: &amp;#34;&amp;#34;&amp;#34; List file paths in a directory. Parameters ---------- dir_path : str Path of the directory Returns ------- List[str] List of the file paths in the directory &amp;#34;&amp;#34;&amp;#34; return sorted([str(path) for path in Path(dir_path).rglob(&amp;#34;*&amp;#34;) if path.</description>
    </item>
    
    <item>
      <title>Pathlibの使い方</title>
      <link>https://www.yusaito.com/blog/posts/tech/python/how-to-use-pathlib/</link>
      <pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/tech/python/how-to-use-pathlib/</guid>
      <description>基本操作 ファイル名取得 ディレクトリ名取得 from pathlib import Path path = Path(&amp;#34;./dir/filename.txt&amp;#34;)  ファイル名を取得 : path.name ファイル名拡張子抜き : path.stem ファイルの拡張子のみ : path.suffix ファイルのディレクトリを取得 : path.parents (list) パス連結 : / 演算子を使う（path.joinpath()） パスの存在確認：path.exists() ファイルかどうか確認 : path.is_file() ディレクトリかどうか確認 : path.is_dir() ディレクトリの作成 : path.mkdir(exist_ok=True, parents=True) ディレクトリの削除 : path.rmdir() ファイル/ディレクトリパス変更 : path.replace(tgt) ファイル/ディレクトリパス変更（末尾のみ）: path.rename(new_file_apth) 同じ階層に別名ファイルを作成 : path.with_name(&#39;file_new.txt&#39;).touch() 同じ階層に別拡張子ファイルを作成 : path.with_suffix(&#39;png&#39;).touch() 同じ階層のファイルとディレクトリ一覧を返す：path.iterdir() ファイルの存在ディレクトリのパスを取得：Path(__file__).parent  個人的によく使うモジュール ファイルを再帰的に探索  Pathlib の場合  # Pathlibの場合 from pathlib import Path from typing import List def list_file_paths(dir_path: str) -&amp;gt; List[str]: &amp;#34;&amp;#34;&amp;#34; List file paths in a directory.</description>
    </item>
    
    <item>
      <title>AzureでA100x8（V100x4）のPytorch環境構築とエラー対処</title>
      <link>https://www.yusaito.com/blog/posts/tech/linux/azure-vm-cuda-docker-setup/</link>
      <pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/tech/linux/azure-vm-cuda-docker-setup/</guid>
      <description>Azure の web で VM インスタンスを作成 VM インスタンスの作成はこちら 秘密鍵をダウンロードして、read 権限を与えていおく。
cp ~/Downloads/your_key_name.pem ~/.ssh/keys/azure_vm_key.pem chmod 400 ~/.ssh/keys/azure_vm_key.pem ssh を使って VM にアクセス
ssh -i ~/.ssh/keys/azure_vm_key.pem azureuser@&amp;lt;public ip address of VM instance&amp;gt; Cuda をインストール wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin sudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600 wget https://developer.download.nvidia.com/compute/cuda/11.5.0/local_installers/cuda-repo-ubuntu1804-11-5-local_11.5.0-495.29.05-1_amd64.deb sudo dpkg -i cuda-repo-ubuntu1804-11-5-local_11.5.0-495.29.05-1_amd64.deb sudo apt-key add /var/cuda-repo-ubuntu1804-11-5-local/7fa2af80.pub sudo apt-get update sudo apt-get -y install cuda Data Center GPU manager のインストール（A100x8 の場合） bandwidthTest を行う 詳細は、こちらを参照。 A100x8 ではここでエラーが出る、V100x4 では出ない
git clone https://github.com/NVIDIA/cuda-samples.git cd cuda-samples/Samples/bandwidthTest make .</description>
    </item>
    
    <item>
      <title>エラーメモ：IOError: image file is truncated</title>
      <link>https://www.yusaito.com/blog/posts/tech/python/ioerror-image-file-is-truncated/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/tech/python/ioerror-image-file-is-truncated/</guid>
      <description>IOError: image file is truncated jpg で結構大きめの画像を Pillow で読み込むときに下記のエラーが出た。
IOError: image file is truncated 解決策 from PIL import ImageFile ImageFile.LOAD_TRUNCATED_IMAGES = True 参考  </description>
    </item>
    
    <item>
      <title>Last day in Santa Barbara</title>
      <link>https://www.yusaito.com/blog/posts/us-life/last-day-in-santabarbara/</link>
      <pubDate>Sat, 11 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/us-life/last-day-in-santabarbara/</guid>
      <description>この日にサンタバーバラに来てからあっという間に３年間が経った。２年間住んだ Berkshire Terrace ともお別れである。 家具の大部分は FaceBook のコミュニティを通して UCSB の学生に買い取ってもらったので大きいもので捨てるものはほとんど無かった。
窓際のL字型の机キッチン＆ダイニングアパートと壺2年間住んだアパート。Berkshire Terraceバスの中から見たダウンタウン  空港への道中</description>
    </item>
    
    <item>
      <title>UCSBポスドク記</title>
      <link>https://www.yusaito.com/blog/posts/us-life/ucsb-postdoc-memory/</link>
      <pubDate>Fri, 10 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/us-life/ucsb-postdoc-memory/</guid>
      <description>カリフォルニア大学サンタバーバラ校での３年間の研究の日々</description>
    </item>
    
    <item>
      <title>海外ポスドクになる方法と現地フェローシップ</title>
      <link>https://www.yusaito.com/blog/posts/us-life/how-to-get-fellowship/</link>
      <pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/us-life/how-to-get-fellowship/</guid>
      <description>ポスドク（Postdoctoral Researcher; 博士研究員）のポジションは世界中に無数にあるので博士号さえ持っていれば容易になれる（なりたいかどうかはもちろん人による）。日本から海外のポスドクを目指す際に多くの人はまず第一に海外学振をとることを目指すと思うが、少なくともアメリカに関しては、応募先のラボがある程度以上に研究費が潤沢であれば応募者側に明らかに問題がない限り（例えばコミュニケーションに極端に難がある、前所属で何らかの問題を起こしたなど）フェローシップ無しでもポスドクに応募して落ちることはまずない。&amp;ldquo;研究費に困っていない&amp;quot;ラボの主宰者（PI）が、応募してくるポスドクを断る理由がほぼないのである。論文が 1 本もないからと言って海外ポスドクを諦める人をたまに見かけるが、アメリカには論文無しで学位をとってポスドクやってる人なんて山ほどいるから基本的には問題にはならないと思う。従って、海外ポスドクになりたい場合はいくつか研究費が潤沢そうで&amp;ldquo;良さげなラボ&amp;rdquo;の候補を決めてとりあえずメールを送ってみるのが良いと思う。ラボの PI のもとにはかなり多く（数十から 100 以上）の迷惑メールが届くので（メールアドレスを論文の責任著者として各論文誌の web サイトに公開しているため）、返信がなくともめげずに何度も送って見るのが良い。もちろんメールを送る前に学会などで顔見知りになっていればなお良いと思う。
海外ポスドクになる方法 海外ポスドクになるには、1) フェローシップ無しで現地のラボに直接応募する（アメリカでは最も一般的）、2) 海外学振を獲得する、以外にも 3) 現地のフェローシップを獲得するという方法がある。現地のフェローシップというの国や地域、そして各研究機関が出しているフェローシップのことである。フェローシップ獲得のメリットは、お給料が同じ研究機関のポスドクよりも 100 万円前後高くなる（特に各研究機関が出している場合）のと、アカデミックキャリアを目指すのであれば研究費獲得実績と言う点でプラスになることである。デメリットは倍率が高い（例えば 30 倍-100 倍以上）のである程度は運である点である。例えば私が知っている物理関連分野で応募できるものをぱっと上げると
 Pappalardo Fellowship (MIT, 物理分野) Miller Research Fellowship (UC Berkeley, 基礎研究全般) Kavli Institute at Cornell Postdoctoral Fellowships (Cornell, ナノサイエンス) Materials Science Postdoctoral Fellowship (Princeton, 材料科学) Elings Prize Fellowship (UC Santa Barbara, ナノサイエンス)  地域・国単位だと例えば
 Marie Skłodowska-Curie Fellowship (ヨーロッパ) Banting Postdoctoral Fellowships (カナダ)  などがある。
要求される応募書類 どの fellowship も似たような書類が要求される。例えば私が獲得した Elings Prize Fellowship の公式サイトから要求される書類を見てみると（特に太字の箇所はどこの応募する際にも要求されると思う）、</description>
    </item>
    
    <item>
      <title>Kaggle：SETIコンペ参加記（ソロ銅：71th/768 teams）</title>
      <link>https://www.yusaito.com/blog/posts/tech/kaggle/seti-breakthrough-listen/</link>
      <pubDate>Thu, 19 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/tech/kaggle/seti-breakthrough-listen/</guid>
      <description>SETI Breakthrough Listen - E.T. Signal Searchという Kaggle の画像分類コンペに参加しました。
結果 774 チーム中 74 位でソロ銅でした。
コンペの概要 Overview のページには
 In this competition, use your data science skills to help identify anomalous signals in scans of Breakthrough Listen targets. Because there are no confirmed examples of alien signals to use to train machine learning algorithms, the team included some simulated signals (that they call “needles”) in the haystack of data from the telescope.</description>
    </item>
    
    <item>
      <title>写真で振り返るサンタバーバラ滞在記</title>
      <link>https://www.yusaito.com/blog/posts/us-life/santabarbara-pictures/</link>
      <pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/us-life/santabarbara-pictures/</guid>
      <description>渡米直後 渡米直後に最初に住んだ部屋。アイラビスタの Trigo Rd にある 7-8 人くらいが住めるシェアハウス。同じ時期に ICU から交換留学のような制度で女子学生が二人来ていた。彼女達は二人とも英語がペラペラでキャンパスの情報などを時折仕入れてくれたり、時には日本食をプレゼントしてくれたりなどとてもお世話になった。（学部生の彼女達からみたら私は毎日深夜頃にラボから部屋に帰ってくる異様な存在だったのではないかと思う。）
アイラビスタの街並み アイラビスタは人口の大半が学生の街である。スケボーに乗ってる人やサーフボードを持ってる人を多数見かける。治安はとても良い。ニューヨークと比べて時間がとてもゆっくり流れていて、穏やかな人が多く、これといった（人種）差別を受けたことは 3 年間で一度もない。ただし、たまによそ見をしているスケボーダーが突っ込んできたり、スケボーダーが転んだ際にボードがこちらに突っ込んでくることがあるので注意。
カリフォルニア大学サンタバーバラ校（UCSB） 多分 UCSB の正門（キャンパスの東側にある）。めったに使わない。 キャンパス内 キャンパスビーチ 研究で疲れたときはぼーっとビーチを見ると癒やされる。 Downtown 赤い屋根が特徴的なスペイン風の美しい建物が多い。ワイナリーや海鮮系のレストランも多い。 サンタバーバラはウニの名産地なので、Sushi Go Go と Shell fish company というお店で妻とウニを食べた。 以下はサンタバーバラ外の場所である。
チャンネル諸島（Channel island） @ Ventura チャンネル諸島は、サンタバーバラ近くにベンチュラ郡に属する 8 つの島々で構成される諸島で国立公園にもなっている。シマハイイロギツネ(Island fox)という小柄なキツネが多数生息する。かなり人馴れしている。 リンダウ・ノーベル賞受賞者会議 @ Linadu, Germany 毎年 30 名程度のノーベル賞受賞者が世界中から招待され、若手研究者（大学院生やポスドク）に対して講演やディスカッションを行って下さる会議でドイツのリンダウで開催されている。 日本人は 10 名程度参加していた。詳細はこちら
The Institute of Photonic Sciences @ Castelldefels, Spain リンダウの帰りにスペインのカステイダフェルス（Castelldefels）にある ICFO（The Institute of Photonic Sciences）という研究機関の中の Dimitri Efetov 研を訪問した。Prof. Efetov の大学院時代の研究テーマが私の大学院時代の研究テーマと似た内容だったために興味をもってもらい、大学院時代の研究テーマでセミナーをさせて頂いた。 ニューヨーク大学 @ NYC 2019 年 12 月頃（covid19 が中国で発見されたあたり？）にベクトルマグネット付きの希釈冷凍機を借りるためにニューヨーク大学の Javad Shabani 研究室を訪問した。冬のニューヨーク市は極寒で日によってはマイナス 10 度を下回ったりして顔中凍るかと思った。ニューヨーク市滞在中に体調を崩し、そこそこの熱（38 度以上）とひどい咳が出た。これがコロナの症状だったかどうかは今となっては知る由もない。ちなみに実験はうまくいかなかった（サンプルが全滅した）。 </description>
    </item>
    
    <item>
      <title>Shell Fish Company</title>
      <link>https://www.yusaito.com/blog/posts/us-life/shellfish-company/</link>
      <pubDate>Sat, 14 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/us-life/shellfish-company/</guid>
      <description>サンタバーバラのスターンズワーフの先端にある Shell Fish Company という甲殻類がメインの海鮮料理店に行った。サンタバーバラはウニの名産地なので目的はウニだった。 ホタテの上に乗ったウニがとても美味しかった。</description>
    </item>
    
    <item>
      <title>アメリカで矯正歯科に行った話</title>
      <link>https://www.yusaito.com/blog/posts/us-life/orthodontics-santabarbara/</link>
      <pubDate>Sat, 14 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/us-life/orthodontics-santabarbara/</guid>
      <description>以前の記事で書いた通り、私は渡米 3 ヶ月で歯の神経を抜いた。歯内療法科で専門医に歯の神経を抜いてもらった後に、すぐ隣の一般歯科の専門医に見てもらったのだが、その際に奥歯に過度な力が加わっているためこのまま放っておくと頭痛持ちになるかもしれないからどこかの矯正歯科に行ったほうが良いと言われた。当時は渡米直後ということもあり、仕事をするのに、もっと言えば生活していくのに精一杯だったためには華麗にスルーしてしまったのだが（金銭的にも余裕がなかった）、それから数ヶ月が経って一段落してやはり矯正歯科に行くことにした。お世辞にも健康で丈夫な体とは言えないので年をとってからの悩みの種を増やしたくなかったからである。それと矯正大国アメリカでの矯正を体験してみたかったというのも少しある。矯正歯科は、根管治療をしてくださった歯内療法科と一般歯科のすぐ近くにあるSanta Barbara Orthodontistというところにした。これらの歯科医院は全てAlamar Dental Centerに連なって存在している。これら以外にもあと 3 つくらい別の分野を専門とする歯科医院が存在している。
初回相談でレントゲン写真などをとってもらい（無料）、治療完了までの予想期間や費用、完成予想図などを説明された。さて米国での治療費は日本に比べてかなり高いと言われるが、その数少ない例外が歯科矯正の治療費だと思う。アメリカでの平均治療費は約 50 万（うわさ）で、これは日本の平均的な治療費である約 100 万円（いくつかのサイトを適当に見て平均した）の半分である。その例に漏れず、私の場合も治療費は 49 万円だった。内訳は、表側治療の透明ブラケット＆ワイヤーで基本治療費 56 万円＋透明なブラケット 3 万円－保険適用 10 万円＝ 49 万円である。この他に上下左右の真ん中あたりの歯の 4 本を&amp;quot;同時に&amp;quot;抜いたので、この矯正の費用とは別に一般歯科で数万円かかった。治療完了までの予想期間は 2 年弱と言われた。何事もなければ本帰国予定までちょうど 2 年だったのでまあ間に合うだろうと思っていた。もちろん当時はその後、Covid-19 によるパンデミックが起こるとは夢にも思っていなかった。そんなこんなで帰国 1 ヶ月になって、主治医からは&amp;quot;ぎりぎり間に合わない&amp;quot;と言われて、日本で継続治療をできる矯正歯科医を絶賛探し中である。</description>
    </item>
    
    <item>
      <title>Twenty-four seven --- ポスドク1年目の思い出</title>
      <link>https://www.yusaito.com/blog/posts/us-life/first-year-postdoc/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/us-life/first-year-postdoc/</guid>
      <description>Twenty-four seven. 24 時間 365 日。&amp;ldquo;いつでも&amp;quot;を表す表現は日本語も英語もあまり変わらない。私はポスドク 1 年目はほぼ文字通り&amp;quot;いつでも&amp;quot;働いていた。実際には週 7 で 1 日 12-13 時間、365 日のうち休んだのは 10 日くらいである。もちろん、研究自体は楽しかったし（特にはじめは新しい環境で新しいテーマだったので）、没頭できていたというのもあるが、その一方全く別の環境でもしっかりと結果を出したいという思いもあった。
渡米前に英語の勉強を兼ねて&amp;quot;Suits&amp;quot;という弁護士が主役の法律事務所が舞台のアメリカドラマを見ていたのたが、そのメインキャラの一人である Harvey Specter がもうひとりのメインキャラである Mike Ross（当時は Harvey の弟子的ポジション）に次のようなことを言っていた。
 Now when I got here, I dominated. They thought I worked 100 hours a day. Now, no matter what time I get in, nobody questions my ability to get the job done. Get it through your head. First impressions last. Suits シーズン 1 第３話</description>
    </item>
    
    <item>
      <title>若者の街、アイラビスタ</title>
      <link>https://www.yusaito.com/blog/posts/us-life/islavista/</link>
      <pubDate>Wed, 11 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/us-life/islavista/</guid>
      <description>住民の大半が学生で構成されているアイラビスタはカリフォルニア大学サンタバーバラ校（UCSB）のすぐ東側に位置する小さい町である。
 一年中快晴の地中海性気候（冬に少し雨が降る）のせいか、ビーチ沿いのせいか、学生街だからか、治安はとても良い。ビーチに隣接しているので街中には夏冬関係なく水着姿の学生が散見され、ビーチではサーフィンしている学生も多い（例えばある学生の一日の様子が Youtube にある＝＞A Day in My Life at UCSB ）。下記は 2021 年 1 月に撮影したアイラビスタのビーチの写真である。(気温は 15-20℃ くらいだった。) デルプラヤ アイラビスタのデルプラヤ（Del Playa Drive）というビーチ沿いのストリートは現地ではかなり有名で、第３セメスター（semester）後の春休み明け（4 月頭）になるとデルトピアと呼ばれる盛大なパーティーが街中で開催される。このパーティーのために、ときにはカリフォルニア中からこの小さい街に学生が集まるとも言われている。このデルトピアのためか、UCSB は全米でも有数のパーティー大学としても有名である。もっともデルプラヤではデルトピアの日に限らずほとんど毎日各家でパーティー（日本で言うところの学生の宅飲みだが、爆音で音楽をかけながら庭で（時として上裸または水着で）謎のテーブルゲームをしながら行う点が異なる）が行われているのでパーティー三昧の学生生活を謳歌したければデルプラヤのどこかに住むのが良いし、そうでなければなるべくデルプラヤから離れた場所に部屋を借りるのが賢明である。ちなみに私は後者を選択した。
スケボー文化 アイラビスタにはスケボーが自転車並に使われている。平時であれば自転車よりも多くみかけるかもしれない。UCSB キャンパス内にはスケボーの専用レーンがあるほどである。裸足でスケボーに乗っている人もいれば（街中には裸足の人が意外に多い）、サーフボードを抱えながら乗りこなす人もいたりする。
 </description>
    </item>
    
    <item>
      <title>Cancun</title>
      <link>https://www.yusaito.com/blog/posts/us-life/cancun-trip/</link>
      <pubDate>Fri, 06 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/us-life/cancun-trip/</guid>
      <description>アメリカ生活最後の思い出として、妻とメキシコのカンクンへ旅行に行った。 宿泊したホテルはハイアット・ジラーラという所で年齢制限があるため子供は宿泊できない大人オンリーの空間である。ホテル内のプールから望むカリブ海は絶景だった。 オールインクルーシブプランのためホテル内のレストランであればどこでも食べ放題でとても豪華なひとときを過ごした。
午前１１時くらいからホテル中央のバーでお酒も飲み放題になる。 アジア料理店アシアナとメキシコ料理店マリアマリエ インターナショナルビュッフェのスパイス。朝食はだいたいここで食べた。 シェフズプレート。豪華なコース料理を頂いた。
 VELTRA のツアーを使ってマヤ文明やセノーテの観光にも行った。ガイドの MAMI さんにはとてもお世話になった。
チチェンイッツァ遺跡 セノーテ スイトゥン セノーテ イキル セノーテイキルのお土産屋で買える珍しい蜂蜜酒 </description>
    </item>
    
    <item>
      <title>Jamie Sloan Wines</title>
      <link>https://www.yusaito.com/blog/posts/us-life/jamie-sloan-wines/</link>
      <pubDate>Fri, 06 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/us-life/jamie-sloan-wines/</guid>
      <description>ダウンタウンのワイナリーでとても良い雰囲気な所を見つけた。店員の方がワインの産地についてとても詳しく説明してくれたが英語が早すぎて３ − ４割分からなかった。
 </description>
    </item>
    
    <item>
      <title>ポスドク＠UCSBでの実験について</title>
      <link>https://www.yusaito.com/blog/posts/us-life/experiment-in-ucsb/</link>
      <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/us-life/experiment-in-ucsb/</guid>
      <description>Broida Hall (物理学棟) Broida Hall は、カリフォルニア大学サンタバーバラ校（UCSB）のキャンパスの東側にある物理学科の建物で、ここに各研究室の居室や実験室などがだいたい入っている。 実験室の近く。実験室の扉を開けるとすぐ外に出る。液体窒素などの汲み場はすぐ近くにあり、便利である。 研究グループの居室。窓が無いのが残念。 サンプル作製と測定 サンプルの作製 実験では、まずスコッチテープ法という手法（2010 年ノーベル物理学賞）でグラファイトや六方晶窒化ホウ素などを劈開して（スコッチテープで手で剥がしていく）それらの原子層（ナノメートルスケールの厚さのもの）を準備する。これらを積層する（重ねる）ことでサンプルを作製する。私の研究では各層（主にグラフェン）の結晶方位に対する相対角度を制御して積層していき、モアレ構造を作成する。（例えばこちらの記事を参照。）実際のサンプル作製に関しては下記の Youtube 動画が分かりやすい
  スコッチテープ法に関して     原子層の転写に関して     実際の原子層の光学顕微鏡の写真。右から六方晶窒化ホウ素、グラフェン、六方晶窒化ホウ素。これらを積層するとその下の写真になる。 デバイス加工 積層したサンプルをデバイスに加工する。これらのプロセスはキャンパス内の共同利用施設であるクリーンルーム(UCSB Nanofabrication Facility)で行う。企業なども利用でき（ただしかなり高額）、例えば Google の量子コンピュータ部門（サンタバーバラ近くの Goleta にある）もハードウェアの部品の作成などに利用している。クリーンルーム内の装置（主に走査型電子顕微鏡、Etching 装置、蒸着装置）を利用して、加工していく。 クリーンルーム内 Wet bench：試薬の使用など。 走査型電子顕微鏡: デバイスのデザインのパターニングに使用。装置の詳細はこちら 電子ビーム蒸着装置：電極の作成に使用。装置の詳細はこちら 完成したデバイスの例がこちら。 デバイスのサイズは 10-20 マイクロメートル程度である。このデバイスは実際に論文中のデータ取得に使ったものでこの論文 (arXiv 版)中の Device #1 と同一のものである。 実際にどのように電極がデバイスに電気的に接しているかはこちらの論文を参照。
測定 デバイスが実際に測定可能か、つまり最低限電気的にコンタクトがとれているか、ゲートがリークしていないかをプローブステーションでチェックする。針のようなもの（プローブ）を電極パッドに接触させて、任意の電極間の抵抗値などを測定する。 冷凍機に入れるためにまずこのような冷却用プローブの先端にデバイスを設置する。 希釈冷凍機（写真左側の大きい白い円筒状のもの）で最低温度 10mK（つまりセルシウス度で-273.14℃、絶対零度よりも 0.01℃ だけ高い）まで冷却し、デバイスの特性、例えば電気抵抗値や量子キャパシタンスなどを測定する。希釈冷凍機の仕組みはこちら。冷凍機や測定装置の制御には LabRAD を用いていた。 そこまでの低温が必要ない場合は液体ヘリウム（＋減圧）を用いて、1.5K まで冷却して測定を行う。希釈冷凍機が最低温度 10mK まで 10 時間程度かかるのに対して、こちらは 2-3 時間で最低温（1.5K）までいくことができる。写真の冷凍機は今のラボができる前にこの実験室を使用していたラボが数十年前に購入し使用していた（古代の）冷凍機でメンテナンスが大変である。 研究テーマと論文 UCSB では、twisted2 層グラフェンという 2 枚のグラフェンをある特定の角度（1.</description>
    </item>
    
    <item>
      <title>公募状況のうわさ</title>
      <link>https://www.yusaito.com/blog/posts/other/cmp-rumor/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/other/cmp-rumor/</guid>
      <description>アメリカの物理関連分野用の公募状況の噂サイト</description>
    </item>
    
    <item>
      <title>海外版逆評定</title>
      <link>https://www.yusaito.com/blog/posts/other/rate-my-professors/</link>
      <pubDate>Wed, 21 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/other/rate-my-professors/</guid>
      <description>学生が大学の先生を評価する媒体は世界中どこにでもあるらしい</description>
    </item>
    
    <item>
      <title>アメリカ生活ミニマムセットアップ（ポスドク＠サンタバーバラ版）</title>
      <link>https://www.yusaito.com/blog/posts/us-life/setup-life-in-us/</link>
      <pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/us-life/setup-life-in-us/</guid>
      <description>初めてアメリカに来たのは、修士 1 年の頃、アメリカ物理学会＠デンバー（APS March Meeting）に参加したときのことだった。それから 4 年半後にアメリカ（カリフォルニア・サンタバーバラ）で生活することになるとは夢にも思ってなかった。
サンタバーバラは海がとてもきれいなリゾート地である一方、リゾート地であるが故に田舎なので例えばニューヨークやボストン、ロサンゼルスなどと比べたらほとんど日本人がいない。もちろん知り合いなどもいなかった。そのためネット上で日本語で検索できる情報にはかなり限りがあり、事前準備や生活のセットアップで未知数なところがいろいろあった。そこで、もしサンタバーバラを含め、アメリカの都市部/田舎でポスドクなどを始める場合に参考になればと思い、そして自分が万が一またアメリカに行くことになった場合の備忘録として自分の場合の（でもある程度汎用的な）海外生活ミニマムセットアップを書き残してみる。
渡米前 ビザの取得（渡米 2-3 ヶ月前 ビザが無ければ入国できないので最重要事項である。ポスドクで行く場合はJ1 ビザが必要。取得は他の H1B などの労働ビザに比べたら圧倒的に簡単。普通は落ちないらしい。詳細情報/必要書類は公式 webを参照。DS2019（滞在/労働許可証のようなものでビザと同程度に重要）などの必要書類を大学から手に入れたら（大学の事務は遅いことがあるので、必要であればリマンドを絶えず送ったほうが良い）、面接の予約が埋まってたりするので例えば出国 2-3 ヶ月前に準備を始めるほうが良い。
※以下の渡米前の準備は必ずしも必須ではないし、個人の価値観に左右される部分だと思う。私は渡米直後の面倒を最小限にするために行った。
銀行口座の開設（渡米 1-2 ヶ月前） 銀行口座は渡米後にももちろん開設できるし、その場合は Chase 銀行が人気である。私は渡米後の面倒を 1 つ減らすために渡米前に日本にいながら現地のユニオン・バンクの口座を開設できる三菱 UFJ 銀行のパシフィックリム・カンパニーベネフィット・プログラムを利用した。日本に本帰国後も口座を閉じる必要はなく利用可能である。
家探し（渡米 1 ヶ月前） 家探しは渡米後でもできるし、実際の部屋を見てから決めたいという人も多くいると思う。私は決め打ちでどんとこい派なので日本から契約できるなら契約したかった。ネットで調べるといろいろな方法があるが、例えば大学関係者の場合は&amp;quot;大学名　Housing&amp;quot;で検索すると専用の web がある場合があり、そこから探すこともできる。私は UCSB の housing 専用サイトから探して、渡米前に決め打ちで契約した。すでに現地の口座とそれに付随するクレジットデビットを持っていたので契約は楽だった。サンタバーバラの治安の良さは日本と同等以上なので（サンタバーバラはアメリカではない、と言われるくらいに治安が良い）、家の場所を考える際に治安はそこまで考慮しなかったけど、そうでなければ治安が比較的に良い場所の部屋を借りるのが良いと思う。部屋タイプとして単身または夫婦で住む場合は、Studio(日本で言うところの 1K)かone bedroom(日本で言うところの 1LDK)がちょうど良いと思う。2021 年のサンタバーバラの平均家賃は Studio で 1000-1500USD/月、one bedroom で 1500-2000USD/月くらいである。(毎年値上がりしている。)
荷物を船便で発送（渡米 3 週間前） 家が決まったので、必要な荷物を現地の住所にクロネコヤマトの海外引越単身プランで送った。ダンボール 9 箱分のミニマムコースで料金はおよそ 10 万円。服や下着、靴（現地だとサイズが合わないかもしれないので）、デスクトップ PC、モニター x2, 炊飯器(大半のものは渡米後に揃うけど、ご飯が食べたい人は炊飯器は日本で買って送ったほうが良い気がする)、シャンプー、リンス、ボディーソープなどを送った。場合にもよるが、平時であれば 1 ヶ月程度で届く。本などは渡米前に可能な限り PDF 化した。
現地で使える SIM カードを Hanacell で契約（渡米 2-3 週間前） これも渡米後に契約できるし、現地のプランの方がお得かもしれない（あまり調べていない）が面倒くさがりの私は日本で渡米直前に契約した。大学と家との往復なので基本的に Wifi しか使わないし、モバイル通信であまり困ったことはない。</description>
    </item>
    
    <item>
      <title>初見では難しい、でも単語は簡単な英語表現</title>
      <link>https://www.yusaito.com/blog/posts/us-life/easy-english/</link>
      <pubDate>Thu, 08 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/us-life/easy-english/</guid>
      <description>渡米直後は半分以上英語が聞き取れず、非常に苦労した。聞くだけでもこんなに苦労したのだから、話す方が 3 歳児以下だったのは想像に難くない。今考えても（話せなさすぎて）クビにならなかったのが不思議なくらいである。クビにならなかったのは、ラボのデフォルトのコミュニケーションツールが slack だったからかもしれない。（slack, もっといえば email がない時代だったら僕は 1 週間でクビになるレベルだったし、そもそも採用されていないと思う）対面でも最大限コミュニケーションをとるように努力したとはいえ、最初の 3 ヶ月いや半年くらいはコミュニケーションの面で非常に迷惑をかけてしまったと思うと大変申し訳ない。これでも渡米前の半年は英会話教室に行きつつ、海外ドラマを英語字幕で見るなど一応の努力はしたつもりだった。あれほど英語がしゃべれたら、あるいはリスニングだけでも日本語レベルでできればと思った期間はなかったと思う。3 年弱の間、メンバーの半分くらいがネイティブの環境で仕事をしたかいもあり、少なくともリスニング力に関しては格段に向上したと思う（当社比）。専門のディスカッションではあれば（知らない単語がない限り）90%は聞き取れる&amp;quot;気がするし&amp;quot;, 日常会話でもローカルネタでなければ 80%は聞き取れるようになった&amp;quot;気がする&amp;quot;。スピーキングも毛が生えた程度には向上したと思う。
渡米当初の英語の苦労の要因はいろいろあるが、発音がわからず聞き取れない以外で大きな要因を上げるとしたら、日本の中学で習うような単語の組み合わせのはずなのに聞き取れても初見で意味を汲み取れないものが思いの他多かった点だと思う。特に頻出だった初見で難しい、しかし簡単な英語表現をいくつか列挙してみる。以下の各コメントは、完全に私の主観で、英語の専門家の解説では決してない。1 と 2 が個人的にぶっちぎりで初見殺しの表現である。
  I would 〜
(例) I would try this experiment.
(訳) 私&amp;quot;なら&amp;quot;この実験をする＝＞この実験をやってくれ。（丁寧な命令表現）
I would 自体は例えば丁寧な表現、あるいは婉曲するために使われるというのはどこかで習った気がするし、これは間違いではないと思う。ただ上記の I would の使い方は初見殺しで、どこかの web ページによると If I were you, が省略されている仮定法の表現らしい。したがって訳は、私&amp;quot;なら&amp;quot;この実験をする、つまり、この実験をやってくれ（これを命令と捉えるか、提案ととらえるかは文脈にもよる）、となる。多分仕事を指示する、あるいは代案を提案する場面だと頻出の使い方なのではないかと思う。ついつい You should と言ってしまいたくなる場面で I would を使えるとネイティブに一歩近づけるのではないかと思う。これとは違う使い方だけど、I think の婉曲版に I would say というのもあって、これも一日に何回も聞く表現である。
  want to 〜 (例) Wanna grab food? (正式 ver. Do you want to grab food?</description>
    </item>
    
    <item>
      <title>ラボの選び方</title>
      <link>https://www.yusaito.com/blog/posts/us-life/how-to-choose-lab/</link>
      <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/us-life/how-to-choose-lab/</guid>
      <description>一般論 人生は生きてるだけで丸儲けである。生き続けるためには心身を健康に保つことが大切である。したがって、ラボ選びで重要なのは、国内国外限らず心身を健康に保てることができるラボを選ぶことである。特に心理的安全性が保障されているラボを選ぶことが重要であると思う。そんなこと当たり前じゃないかと思う人も多いかもしれないが、当たり前と思っていても実行できないのが人間である。ラボ選びは人生を左右するといっても過言ではないと思う。（さてこんなことを冒頭から偉そうに書いている自分は心身の健康を気にしてラボを選んだのかと言われると後述の通り全くそんなことはないので、私も人間であるし、全くもって説得力がない。）アカハラやパワハラが存在すると予めわかっているならばそういうラボは避けたほうが良いのは言うまでもない。あからさまなアカハラやパワハラが存在しなくともボスやスタッフとの相性が悪く、精神的に来る場合もあるので難しいところである。ある人にとってベストな上司が別の人にとってベストな上司とは限らない。
次に実験系のラボの場合（ここでいう実験系というのは研究がパソコンだけで完結せず、試薬や生物、大規模な実験装置、ロボットなどを用いる分野を指す）は、なるべく研究設備が整っていて、可能な限り研究費が潤沢なラボを選ぶほうが良い。研究設備とお金が潤沢にあればやりたいことはだいたいなんでもできる。時々研究テーマ&amp;quot;だけで&amp;quot;ラボを選ぶ人を見かけるが、研究テーマだけでラボを選んでも、そもそもそのテーマをやらせてもらえないかもしれないし、研究設備とお金がなければ研究の土俵に立てないかもしれないし、研究の興味が時間とともに変わるかもしれない、のであまりおすすめはしない。（理論系のラボの場合は研究テーマ重視で選んでも問題ないと思う。）研究テーマに関しては&amp;quot;興味がある&amp;quot;あるいは少なくとも&amp;quot;興味がなくはない&amp;quot;くらいでスクリーニングして、あとはなるべく研究設備が整っていてと研究費がたくさんあるラボに行くほうが多くの経験を積めると思う。
さて以下の 2 つはオプショナルである。上で書いたことに比べたら些細な違いなのであまり気にしなくていいと個人的に思う。
  大規模な研究室（例えば 20 人以上、この辺の感覚は分野によって違うと思う）か小規模な研究室（5 人くらい？）：どちらも一長一短で英語で検索するとこの手の議論がたくさん出てくるので興味があれば読むと良いといいと思う。
  いわゆる大御所のラボか立ち上げ直後のラボ：これもラボの立ち上げに関わりたいかそうでないかによる。ちなみに大御所のラボにいっても必ずしも成果が出るとは限らない。成果を出したいなら（そのラボからの）成果が直近でたくさん出ているラボに行ったほうが良いと思う。
  海外ラボの場合 上記に加え、海外ラボの場合はなるべく非英語圏の特定の人種に偏っていないラボに行くことが重要だと思う。例えば中国人が 90％以上を占めるラボで使われる言語は間違いなく中国語だし、このようなラボに中国人以外の方が入って、数ヶ月や 1 年で去る話はいくつか聞いても、大活躍して論文を出しまくっている例は見たことも聞いたこともない。（もちろん中国語が堪能なら話は違う。）日本人に限らずこの点を見落とす人は意外にも多い。私はネイティブっぽいメンバーが半分以上いるところだけをラボ選びの際に探した。
自分の場合 学部＆大学院：私の出身の東大物理工学科では研究室選びは 4 年次の最初のじゃんけん大会（2012 年の話、現在はくじ引きらしい）で決まる。希望の研究室を黒板に書いて定員よりも多かったらじゃんけんをして決める。負けたら&amp;quot;相対的に&amp;quot;人気のない研究室に行くことになる。この毎年恒例のじゃんけん大会は、学科のイベントとして１年で最も盛り上がる日の 1 つだったのではないかと思う。私は当時研究テーマだけでラボを選び、運良くじゃんけんを制し、そのラボで学部 4 年から博士 3 年までの 6 年を過ごした。
海外ポスドク：アメリカに行くならカリフォルニア、研究するならカリフォルニア、住むならカリフォルニアという感じで圧倒的にカリフォルニアバイアスがかかった状態でラボ選びを行った。天気が良ければ全てハッピーくらいの能天気ぶりである。学部＆大学院時代のボスが当時 60 歳くらいの教授だったので、逆に独立から数年以内のラボに行ってみたかった。カリフォルニアという条件を除いても、自分の興味、独立から数年以内という条件、上記の通り人種の偏りが少ないという条件、現在成果を出している/これから成果を出しそうという&amp;quot;雰囲気を感じる&amp;quot;ラボはニューヨークに 1 つ、カリフォルニア・サンタバーバラに 1 つ（現在所属のラボ）しかなかった。ちなみに現在所属している UCSB のラボ（雰囲気を感じた方）は、当時ボスが独立から 2 年目のラボだったということもあり、私がメールで応募したとき（2017 年 8-9 月くらい）にはラボの出版論文は 1 つもなかったし、大学院時代のボスは現ボスのことを全く知らなかった。（大学院時代のボスからはコネのあるラボをいくつか紹介されたが、若手のラボではなかったか、もしくは上記の人種のバランスの条件を満たさなかったので、最優先の候補にはしなかった。）メールで応募し、スカイプインタビューなどをした数カ月後、運良く現地の研究機関からElings Prize Fellowshipというポスドクフェローシップを頂けることが決定し、現在所属のラボに行けることになった。当時は論文がまだ 1 本も出ていない立ち上げから間もないラボに行くことに一抹の不安を感じたが、&amp;ldquo;ええい、ままよ&amp;quot;式の意思決定は自分の人生経験上意外にも成功することが多いので、とりあえず出たとこ勝負という気持ちで行くことにして、念願のカリフォルニアでのポスドク生活が始まった。</description>
    </item>
    
    <item>
      <title>アメリカで歯の神経を抜いた話</title>
      <link>https://www.yusaito.com/blog/posts/us-life/root-canal-treatment/</link>
      <pubDate>Tue, 15 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/us-life/root-canal-treatment/</guid>
      <description>結論  よく調べて良い歯医者を選ぼう アメリカで歯の神経を抜く（根管治療）と保険適用で約 4 万円（私の場合）  事の始まり 渡米前に歯医者に行って虫歯などがあれば早めに直しておくように。というのよく耳にする先達からのアドバイスではあるが、私もこれに従い、渡米 3 ヶ月前あたりから家から近い歯医者に行き始めた。
歯科医院なんてどこでもそんなに変わらないだろうとレビューをよく確認せずに治療を受けたのがが運の尽き。それほど深くない&amp;quot;はずの&amp;quot;虫歯（場所は左下の奥から 2 番目）の歯を部分的に削って治してもらってセラミックの詰め物（セラミックインレー）をしてもらったまではよかったが、いつまで経っても痛い。（セラミックインレーは保険適用外なので 1 つあたり約 5 万円。）食べ物を噛んだら痛い。噛まなくても痛い。アルコールを飲めばもっと痛い。当初はかみ合わせが合ってないからとかセラミックインレーをつける際の接着剤（のようなもの）が歯にしみているから、痛みを引き起こしているなどと説明され、痛み止めを処方されたが、痛み止めがきれればまた痛くなるというように一向によくならない。その時点で神経が傷ついたのではないかと思ったが、渡米直前にややこしい状況になるのは避けたかったのでその治療を受けた医院で神経の話題は出さなかったし、他の歯科医院にも行かなかった（もし虫歯が神経に達していればかなり痛いはずだが、私自身は冷たいものや甘いものを食べてもしみたりはしていなかった。実際にどれくらい虫歯が深かったかは治療を担当した歯科医にしか分からない。）
渡米後 さてそんなこんなで渡米まで——ならましだったのだけれど、新婚旅行で行ったボラボラ島でも、そして残念ながらに 2018 年 10 月に渡米してからも歯の痛みは続き、サンタバーバラのポスドク生活は歯の痛みとともに始まった。（ポスドク生活はまた別の記事にしようと思う。）この痛みが続いている間は市販の痛み止めの代表である EVE など（実際に使っていたのはその中でも特に強そうな EVE QUICK DX）を 6-8 時間間隔で常に服用していた。アメリカ生活が始まって 1-2 ヶ月くらいは、全く新しい環境で、全く異なる言語での環境で、種々の手続きをしたり装置の使い方を覚えたり、文字通り毎日を生きるのに精一杯で歯の問題に関しては忘れつつあった。当時はよく調べもせずにアメリカの医療費は高いという先入観（日本と比べて高いのはかなり事実）からアメリカの歯科医に行くことは選択肢に入ってなかったし、半年後か 1 年後か次に日本に帰国するときに保険適用外でもどこかましな歯科医に診てもらおうと思っていた。実際に生活に支障が出るほど痛むわけでもないし、そのうち治るんじゃないかという淡い期待さえあった。
事は 2019 年 1 月 11 日に起こった。その日は朝からいつにも増して歯が痛かった。ラボから帰って来たのは夜 10 時ごろ。その帰宅直後に立っていられないくらいの激痛で自分の部屋で蹲ってしまった。例えてみるなら、麻酔なしで歯をドリルで貫通させている感じ。その劇的な痛みが続いたのは 5 分か 10 分くらいで、突然その痛みはかなり和らいだ。そのとき私は、あ、これは神経が逝ったんじゃないかと悟った。とはいっても仕事中にまたこの痛みがきたら作業内容的に危険なので急いで歯の神経を専門に扱っている歯内治療専門医（Endodontist）を検索して、今回はちゃんとレビューにも目を通し、web 上での評判が素晴らしかったDr. Patmoreにメールを送って、保険適用可能かどうかだけ聞いて、運良くすぐにアポをとることができた。
根管治療を経て アポをとった当日に訪問し、レントゲン写真をとってもらい、診察を受けると開口一番「こりゃ神経が死んでますね」だった。（多分&amp;quot;Your nerve is dead.&amp;ldquo;みたいな簡単な表現だったのでこの英語だけは聞き取れた。それ以外は専門用語のオンパレード&amp;hellip;）根管治療自体は 1 時間程度で終わったと思う。アメリカでの歯科医も神経を抜いたのも全てが人生初で、心の中では後は野となれ山となれ状態だったのでこのあたりの記憶は結構あいまいである。英語の説明は全くわからなかったけれど、治療が終わって会計に進むと保険適用後の治療費が 4 万円というの見て、とりあえずほっとしたのを覚えている。治療費が高いアメリカなら 20-30 万くらいは請求されるんじゃないかと戦々恐々としていたので。ちなみに保険適用前の治療費は 20 万円くらいだった。何はともあれ、治療は無事終了し、この日から歯の痛みから開放されてようやく本当のアメリカ生活が始まった。渡米から既に 3 ヶ月と少し経ったころであった。</description>
    </item>
    
    <item>
      <title>国際会議ハイライト</title>
      <link>https://www.yusaito.com/blog/posts/other/conference-highlight/</link>
      <pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/other/conference-highlight/</guid>
      <description>これまで行った国際学会の総集編.</description>
    </item>
    
    <item>
      <title>First day in Santa Barbara</title>
      <link>https://www.yusaito.com/blog/posts/us-life/first-day-in-santabarbara/</link>
      <pubDate>Sat, 29 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.yusaito.com/blog/posts/us-life/first-day-in-santabarbara/</guid>
      <description>今日からカリフォルニア・サンタバーバラでの生活が始まった。 ロサンゼルス空港から出たあとはサンターバーバラシャトルバスに乗ってサンタバーバラに向かう。  アイラビスタの Trigo Rd.にあるシェアハウスでまず生活を立げていく。
 </description>
    </item>
    
    
    
  </channel>
</rss>
